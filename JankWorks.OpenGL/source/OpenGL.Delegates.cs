/**

https://github.com/tstavrianos/OpenGL

MIT License

Copyright (c) 2018 Theo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



using System;
using System.Text;

namespace OpenGL {
    public unsafe static class Delegates {
        public delegate void glAccum(int op, float value);
        public delegate void glAccumxOES(int op, IntPtr value);
        public delegate void glActiveProgramEXT(uint program);
        public delegate void glActiveShaderProgram(uint pipeline, uint program);
        public delegate void glActiveShaderProgramEXT(uint pipeline, uint program);
        public delegate void glActiveStencilFaceEXT(int face);
        public delegate void glActiveTexture(int texture);
        public delegate void glActiveTextureARB(int texture);
        public delegate void glActiveVaryingNV(uint program, string name);
        public delegate void glAlphaFragmentOp1ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
        public delegate void glAlphaFragmentOp2ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
        public delegate void glAlphaFragmentOp3ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
        public delegate void glAlphaFunc(int func, float _ref);
        public delegate void glAlphaFuncQCOM(int func, float _ref);
        public delegate void glAlphaFuncx(int func, IntPtr _ref);
        public delegate void glAlphaFuncxOES(int func, IntPtr _ref);
        public delegate void glAlphaToCoverageDitherControlNV(int mode);
        public delegate void glApplyFramebufferAttachmentCMAAINTEL();
        public delegate void glApplyTextureEXT(int mode);
        public delegate bool glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout);
        public delegate bool glAreProgramsResidentNV(int n, uint* programs, bool* residences);
        public delegate bool glAreTexturesResident(int n, uint* textures, bool* residences);
        public delegate bool glAreTexturesResidentEXT(int n, uint* textures, bool* residences);
        public delegate void glArrayElement(int i);
        public delegate void glArrayElementEXT(int i);
        public delegate void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, uint offset);
        public delegate void glAsyncMarkerSGIX(uint marker);
        public delegate void glAttachObjectARB(uint containerObj, uint obj);
        public delegate void glAttachShader(uint program, uint shader);
        public delegate void glBegin(int mode);
        public delegate void glBeginConditionalRender(uint id, int mode);
        public delegate void glBeginConditionalRenderNV(uint id, int mode);
        public delegate void glBeginConditionalRenderNVX(uint id);
        public delegate void glBeginFragmentShaderATI();
        public delegate void glBeginOcclusionQueryNV(uint id);
        public delegate void glBeginPerfMonitorAMD(uint monitor);
        public delegate void glBeginPerfQueryINTEL(uint queryHandle);
        public delegate void glBeginQuery(int target, uint id);
        public delegate void glBeginQueryARB(int target, uint id);
        public delegate void glBeginQueryEXT(int target, uint id);
        public delegate void glBeginQueryIndexed(int target, uint index, uint id);
        public delegate void glBeginTransformFeedback(int primitiveMode);
        public delegate void glBeginTransformFeedbackEXT(int primitiveMode);
        public delegate void glBeginTransformFeedbackNV(int primitiveMode);
        public delegate void glBeginVertexShaderEXT();
        public delegate void glBeginVideoCaptureNV(uint video_capture_slot);
        public delegate void glBindAttribLocation(uint program, uint index, string name);
        public delegate void glBindAttribLocationARB(uint programObj, uint index, string name);
        public delegate void glBindBuffer(int target, uint buffer);
        public delegate void glBindBufferARB(int target, uint buffer);
        public delegate void glBindBufferBase(int target, uint index, uint buffer);
        public delegate void glBindBufferBaseEXT(int target, uint index, uint buffer);
        public delegate void glBindBufferBaseNV(int target, uint index, uint buffer);
        public delegate void glBindBufferOffsetEXT(int target, uint index, uint buffer, uint offset);
        public delegate void glBindBufferOffsetNV(int target, uint index, uint buffer, uint offset);
        public delegate void glBindBufferRange(int target, uint index, uint buffer, uint offset, uint size);
        public delegate void glBindBufferRangeEXT(int target, uint index, uint buffer, uint offset, uint size);
        public delegate void glBindBufferRangeNV(int target, uint index, uint buffer, uint offset, uint size);
        public delegate void glBindBuffersBase(int target, uint first, int count, uint* buffers);
        public delegate void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint* offsets, uint* sizes);
        public delegate void glBindFragDataLocation(uint program, uint color, string name);
        public delegate void glBindFragDataLocationEXT(uint program, uint color, string name);
        public delegate void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);
        public delegate void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, string name);
        public delegate void glBindFragmentShaderATI(uint id);
        public delegate void glBindFramebuffer(int target, uint framebuffer);
        public delegate void glBindFramebufferEXT(int target, uint framebuffer);
        public delegate void glBindFramebufferOES(int target, uint framebuffer);
        public delegate void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, int access, int format);
        public delegate void glBindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, int access, int format);
        public delegate void glBindImageTextures(uint first, int count, uint* textures);
        public delegate uint glBindLightParameterEXT(int light, int value);
        public delegate uint glBindMaterialParameterEXT(int face, int value);
        public delegate void glBindMultiTextureEXT(int texunit, int target, uint texture);
        public delegate uint glBindParameterEXT(int value);
        public delegate void glBindProgramARB(int target, uint program);
        public delegate void glBindProgramNV(int target, uint id);
        public delegate void glBindProgramPipeline(uint pipeline);
        public delegate void glBindProgramPipelineEXT(uint pipeline);
        public delegate void glBindRenderbuffer(int target, uint renderbuffer);
        public delegate void glBindRenderbufferEXT(int target, uint renderbuffer);
        public delegate void glBindRenderbufferOES(int target, uint renderbuffer);
        public delegate void glBindSampler(uint unit, uint sampler);
        public delegate void glBindSamplers(uint first, int count, uint* samplers);
        public delegate void glBindShadingRateImageNV(uint texture);
        public delegate uint glBindTexGenParameterEXT(int unit, int coord, int value);
        public delegate void glBindTexture(int target, uint texture);
        public delegate void glBindTextureEXT(int target, uint texture);
        public delegate void glBindTextureUnit(uint unit, uint texture);
        public delegate uint glBindTextureUnitParameterEXT(int unit, int value);
        public delegate void glBindTextures(uint first, int count, uint* textures);
        public delegate void glBindTransformFeedback(int target, uint id);
        public delegate void glBindTransformFeedbackNV(int target, uint id);
        public delegate void glBindVertexArray(uint array);
        public delegate void glBindVertexArrayAPPLE(uint array);
        public delegate void glBindVertexArrayOES(uint array);
        public delegate void glBindVertexBuffer(uint bindingindex, uint buffer, uint offset, int stride);
        public delegate void glBindVertexBuffers(uint first, int count, uint* buffers, uint* offsets, int* strides);
        public delegate void glBindVertexShaderEXT(uint id);
        public delegate void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, IntPtr offset);
        public delegate void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture);
        public delegate void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz);
        public delegate void glBinormal3bvEXT(sbyte* v);
        public delegate void glBinormal3dEXT(double bx, double by, double bz);
        public delegate void glBinormal3dvEXT(double* v);
        public delegate void glBinormal3fEXT(float bx, float by, float bz);
        public delegate void glBinormal3fvEXT(float* v);
        public delegate void glBinormal3iEXT(int bx, int by, int bz);
        public delegate void glBinormal3ivEXT(int* v);
        public delegate void glBinormal3sEXT(short bx, short by, short bz);
        public delegate void glBinormal3svEXT(short* v);
        public delegate void glBinormalPointerEXT(int type, int stride, IntPtr pointer);
        public delegate void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);
        public delegate void glBitmapxOES(int width, int height, IntPtr xorig, IntPtr yorig, IntPtr xmove, IntPtr ymove, byte* bitmap);
        public delegate void glBlendBarrier();
        public delegate void glBlendBarrierKHR();
        public delegate void glBlendBarrierNV();
        public delegate void glBlendColor(float red, float green, float blue, float alpha);
        public delegate void glBlendColorEXT(float red, float green, float blue, float alpha);
        public delegate void glBlendColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glBlendEquation(int mode);
        public delegate void glBlendEquationEXT(int mode);
        public delegate void glBlendEquationIndexedAMD(uint buf, int mode);
        public delegate void glBlendEquationOES(int mode);
        public delegate void glBlendEquationSeparate(int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateIndexedAMD(uint buf, int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateOES(int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparatei(uint buf, int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateiARB(uint buf, int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateiEXT(uint buf, int modeRGB, int modeAlpha);
        public delegate void glBlendEquationSeparateiOES(uint buf, int modeRGB, int modeAlpha);
        public delegate void glBlendEquationi(uint buf, int mode);
        public delegate void glBlendEquationiARB(uint buf, int mode);
        public delegate void glBlendEquationiEXT(uint buf, int mode);
        public delegate void glBlendEquationiOES(uint buf, int mode);
        public delegate void glBlendFunc(int sfactor, int dfactor);
        public delegate void glBlendFuncIndexedAMD(uint buf, int src, int dst);
        public delegate void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);
        public delegate void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);
        public delegate void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);
        public delegate void glBlendFuncSeparateIndexedAMD(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFuncSeparateOES(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFuncSeparatei(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFuncSeparateiARB(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFuncSeparateiEXT(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFuncSeparateiOES(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        public delegate void glBlendFunci(uint buf, int src, int dst);
        public delegate void glBlendFunciARB(uint buf, int src, int dst);
        public delegate void glBlendFunciEXT(uint buf, int src, int dst);
        public delegate void glBlendFunciOES(uint buf, int src, int dst);
        public delegate void glBlendParameteriNV(int pname, int value);
        public delegate void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glBufferAddressRangeNV(int pname, uint index, ulong address, uint length);
        public delegate void glBufferAttachMemoryNV(int target, uint memory, ulong offset);
        public delegate void glBufferData(int target, uint size, void* data, int usage);
        public delegate void glBufferDataARB(int target, uint size, void* data, int usage);
        public delegate void glBufferPageCommitmentARB(int target, uint offset, uint size, bool commit);
        public delegate void glBufferParameteriAPPLE(int target, int pname, int param);
        public delegate void glBufferStorage(int target, uint size, void* data, uint flags);
        public delegate void glBufferStorageEXT(int target, uint size, void* data, uint flags);
        public delegate void glBufferStorageExternalEXT(int target, uint offset, uint size, IntPtr clientBuffer, uint flags);
        public delegate void glBufferStorageMemEXT(int target, uint size, uint memory, ulong offset);
        public delegate void glBufferSubData(int target, uint offset, uint size, void* data);
        public delegate void glBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data);
        public delegate void glCallCommandListNV(uint list);
        public delegate void glCallList(uint list);
        public delegate void glCallLists(int n, int type, IntPtr lists);
        public delegate int glCheckFramebufferStatus(int target);
        public delegate int glCheckFramebufferStatusEXT(int target);
        public delegate int glCheckFramebufferStatusOES(int target);
        public delegate int glCheckNamedFramebufferStatus(uint framebuffer, int target);
        public delegate int glCheckNamedFramebufferStatusEXT(uint framebuffer, int target);
        public delegate void glClampColor(int target, int clamp);
        public delegate void glClampColorARB(int target, int clamp);
        public delegate void glClear(uint mask);
        public delegate void glClearAccum(float red, float green, float blue, float alpha);
        public delegate void glClearAccumxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glClearBufferData(int target, int internalformat, int format, int type, IntPtr data);
        public delegate void glClearBufferSubData(int target, int internalformat, uint offset, uint size, int format, int type, IntPtr data);
        public delegate void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil);
        public delegate void glClearBufferfv(int buffer, int drawbuffer, float* value);
        public delegate void glClearBufferiv(int buffer, int drawbuffer, int* value);
        public delegate void glClearBufferuiv(int buffer, int drawbuffer, uint* value);
        public delegate void glClearColor(float red, float green, float blue, float alpha);
        public delegate void glClearColorIiEXT(int red, int green, int blue, int alpha);
        public delegate void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);
        public delegate void glClearColorx(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glClearColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glClearDepth(double depth);
        public delegate void glClearDepthdNV(double depth);
        public delegate void glClearDepthf(float d);
        public delegate void glClearDepthfOES(float depth);
        public delegate void glClearDepthx(IntPtr depth);
        public delegate void glClearDepthxOES(IntPtr depth);
        public delegate void glClearIndex(float c);
        public delegate void glClearNamedBufferData(uint buffer, int internalformat, int format, int type, IntPtr data);
        public delegate void glClearNamedBufferDataEXT(uint buffer, int internalformat, int format, int type, IntPtr data);
        public delegate void glClearNamedBufferSubData(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data);
        public delegate void glClearNamedBufferSubDataEXT(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data);
        public delegate void glClearNamedFramebufferfi(uint framebuffer, int buffer, int drawbuffer, float depth, int stencil);
        public delegate void glClearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float* value);
        public delegate void glClearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int* value);
        public delegate void glClearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint* value);
        public delegate void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values);
        public delegate void glClearStencil(int s);
        public delegate void glClearTexImage(uint texture, int level, int format, int type, IntPtr data);
        public delegate void glClearTexImageEXT(uint texture, int level, int format, int type, IntPtr data);
        public delegate void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data);
        public delegate void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data);
        public delegate void glClientActiveTexture(int texture);
        public delegate void glClientActiveTextureARB(int texture);
        public delegate void glClientActiveVertexStreamATI(int stream);
        public delegate void glClientAttribDefaultEXT(uint mask);
        public delegate int glClientWaitSync(IntPtr sync, uint flags, ulong timeout);
        public delegate int glClientWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout);
        public delegate void glClipControl(int origin, int depth);
        public delegate void glClipControlEXT(int origin, int depth);
        public delegate void glClipPlane(int plane, double* equation);
        public delegate void glClipPlanef(int p, float* eqn);
        public delegate void glClipPlanefIMG(int p, float* eqn);
        public delegate void glClipPlanefOES(int plane, float* equation);
        public delegate void glClipPlanex(int plane, IntPtr* equation);
        public delegate void glClipPlanexIMG(int p, IntPtr* eqn);
        public delegate void glClipPlanexOES(int plane, IntPtr* equation);
        public delegate void glColor3b(sbyte red, sbyte green, sbyte blue);
        public delegate void glColor3bv(sbyte* v);
        public delegate void glColor3d(double red, double green, double blue);
        public delegate void glColor3dv(double* v);
        public delegate void glColor3f(float red, float green, float blue);
        public delegate void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z);
        public delegate void glColor3fVertex3fvSUN(float* c, float* v);
        public delegate void glColor3fv(float* v);
        public delegate void glColor3hNV(short red, short green, short blue);
        public delegate void glColor3hvNV(short* v);
        public delegate void glColor3i(int red, int green, int blue);
        public delegate void glColor3iv(int* v);
        public delegate void glColor3s(short red, short green, short blue);
        public delegate void glColor3sv(short* v);
        public delegate void glColor3ub(byte red, byte green, byte blue);
        public delegate void glColor3ubv(byte* v);
        public delegate void glColor3ui(uint red, uint green, uint blue);
        public delegate void glColor3uiv(uint* v);
        public delegate void glColor3us(ushort red, ushort green, ushort blue);
        public delegate void glColor3usv(ushort* v);
        public delegate void glColor3xOES(IntPtr red, IntPtr green, IntPtr blue);
        public delegate void glColor3xvOES(IntPtr* components);
        public delegate void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);
        public delegate void glColor4bv(sbyte* v);
        public delegate void glColor4d(double red, double green, double blue, double alpha);
        public delegate void glColor4dv(double* v);
        public delegate void glColor4f(float red, float green, float blue, float alpha);
        public delegate void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v);
        public delegate void glColor4fv(float* v);
        public delegate void glColor4hNV(short red, short green, short blue, short alpha);
        public delegate void glColor4hvNV(short* v);
        public delegate void glColor4i(int red, int green, int blue, int alpha);
        public delegate void glColor4iv(int* v);
        public delegate void glColor4s(short red, short green, short blue, short alpha);
        public delegate void glColor4sv(short* v);
        public delegate void glColor4ub(byte red, byte green, byte blue, byte alpha);
        public delegate void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);
        public delegate void glColor4ubVertex2fvSUN(byte* c, float* v);
        public delegate void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);
        public delegate void glColor4ubVertex3fvSUN(byte* c, float* v);
        public delegate void glColor4ubv(byte* v);
        public delegate void glColor4ui(uint red, uint green, uint blue, uint alpha);
        public delegate void glColor4uiv(uint* v);
        public delegate void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);
        public delegate void glColor4usv(ushort* v);
        public delegate void glColor4x(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glColor4xOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha);
        public delegate void glColor4xvOES(IntPtr* components);
        public delegate void glColorFormatNV(int size, int type, int stride);
        public delegate void glColorFragmentOp1ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
        public delegate void glColorFragmentOp2ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
        public delegate void glColorFragmentOp3ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
        public delegate void glColorMask(bool red, bool green, bool blue, bool alpha);
        public delegate void glColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a);
        public delegate void glColorMaski(uint index, bool r, bool g, bool b, bool a);
        public delegate void glColorMaskiEXT(uint index, bool r, bool g, bool b, bool a);
        public delegate void glColorMaskiOES(uint index, bool r, bool g, bool b, bool a);
        public delegate void glColorMaterial(int face, int mode);
        public delegate void glColorP3ui(int type, uint color);
        public delegate void glColorP3uiv(int type, uint* color);
        public delegate void glColorP4ui(int type, uint color);
        public delegate void glColorP4uiv(int type, uint* color);
        public delegate void glColorPointer(int size, int type, int stride, IntPtr pointer);
        public delegate void glColorPointerEXT(int size, int type, int stride, int count, IntPtr pointer);
        public delegate void glColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glColorPointervINTEL(int size, int type, IntPtr* pointer);
        public delegate void glColorSubTable(int target, int start, int count, int format, int type, IntPtr data);
        public delegate void glColorSubTableEXT(int target, int start, int count, int format, int type, IntPtr data);
        public delegate void glColorTable(int target, int internalformat, int width, int format, int type, IntPtr table);
        public delegate void glColorTableEXT(int target, int internalFormat, int width, int format, int type, IntPtr table);
        public delegate void glColorTableParameterfv(int target, int pname, float* _params);
        public delegate void glColorTableParameterfvSGI(int target, int pname, float* _params);
        public delegate void glColorTableParameteriv(int target, int pname, int* _params);
        public delegate void glColorTableParameterivSGI(int target, int pname, int* _params);
        public delegate void glColorTableSGI(int target, int internalformat, int width, int format, int type, IntPtr table);
        public delegate void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage);
        public delegate void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum);
        public delegate void glCombinerParameterfNV(int pname, float param);
        public delegate void glCombinerParameterfvNV(int pname, float* _params);
        public delegate void glCombinerParameteriNV(int pname, int param);
        public delegate void glCombinerParameterivNV(int pname, int* _params);
        public delegate void glCombinerStageParameterfvNV(int stage, int pname, float* _params);
        public delegate void glCommandListSegmentsNV(uint list, uint segments);
        public delegate void glCompileCommandListNV(uint list);
        public delegate void glCompileShader(uint shader);
        public delegate void glCompileShaderARB(uint shaderObj);
        public delegate void glCompileShaderIncludeARB(uint shader, int count, string[] path, int* length);
        public delegate void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits);
        public delegate void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits);
        public delegate void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits);
        public delegate void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);
        public delegate void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits);
        public delegate void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits);
        public delegate void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data);
        public delegate void glCompressedTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits);
        public delegate void glConservativeRasterParameterfNV(int pname, float value);
        public delegate void glConservativeRasterParameteriNV(int pname, int param);
        public delegate void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, IntPtr image);
        public delegate void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, IntPtr image);
        public delegate void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr image);
        public delegate void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr image);
        public delegate void glConvolutionParameterf(int target, int pname, float _params);
        public delegate void glConvolutionParameterfEXT(int target, int pname, float _params);
        public delegate void glConvolutionParameterfv(int target, int pname, float* _params);
        public delegate void glConvolutionParameterfvEXT(int target, int pname, float* _params);
        public delegate void glConvolutionParameteri(int target, int pname, int _params);
        public delegate void glConvolutionParameteriEXT(int target, int pname, int _params);
        public delegate void glConvolutionParameteriv(int target, int pname, int* _params);
        public delegate void glConvolutionParameterivEXT(int target, int pname, int* _params);
        public delegate void glConvolutionParameterxOES(int target, int pname, IntPtr param);
        public delegate void glConvolutionParameterxvOES(int target, int pname, IntPtr* _params);
        public delegate void glCopyBufferSubData(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size);
        public delegate void glCopyBufferSubDataNV(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size);
        public delegate void glCopyColorSubTable(int target, int start, int x, int y, int width);
        public delegate void glCopyColorSubTableEXT(int target, int start, int x, int y, int width);
        public delegate void glCopyColorTable(int target, int internalformat, int x, int y, int width);
        public delegate void glCopyColorTableSGI(int target, int internalformat, int x, int y, int width);
        public delegate void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width);
        public delegate void glCopyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width);
        public delegate void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height);
        public delegate void glCopyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height);
        public delegate void glCopyImageSubData(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        public delegate void glCopyImageSubDataEXT(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        public delegate void glCopyImageSubDataNV(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
        public delegate void glCopyImageSubDataOES(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        public delegate void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border);
        public delegate void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border);
        public delegate void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size);
        public delegate void glCopyPathNV(uint resultPath, uint srcPath);
        public delegate void glCopyPixels(int x, int y, int width, int height, int type);
        public delegate void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);
        public delegate void glCopyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border);
        public delegate void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);
        public delegate void glCopyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border);
        public delegate void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glCopyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCopyTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCopyTextureImage1DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int border);
        public delegate void glCopyTextureImage2DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);
        public delegate void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount);
        public delegate void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glCopyTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCopyTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues);
        public delegate void glCoverFillPathNV(uint path, int coverMode);
        public delegate void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues);
        public delegate void glCoverStrokePathNV(uint path, int coverMode);
        public delegate void glCoverageMaskNV(bool mask);
        public delegate void glCoverageModulationNV(int components);
        public delegate void glCoverageModulationTableNV(int n, float* v);
        public delegate void glCoverageOperationNV(int operation);
        public delegate void glCreateBuffers(int n, uint* buffers);
        public delegate void glCreateCommandListsNV(int n, uint* lists);
        public delegate void glCreateFramebuffers(int n, uint* framebuffers);
        public delegate void glCreateMemoryObjectsEXT(int n, uint* memoryObjects);
        public delegate void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle);
        public delegate uint glCreateProgram();
        public delegate uint glCreateProgramObjectARB();
        public delegate void glCreateProgramPipelines(int n, uint* pipelines);
        public delegate void glCreateQueries(int target, int n, uint* ids);
        public delegate void glCreateRenderbuffers(int n, uint* renderbuffers);
        public delegate void glCreateSamplers(int n, uint* samplers);
        public delegate uint glCreateShader(int type);
        public delegate uint glCreateShaderObjectARB(int shaderType);
        public delegate uint glCreateShaderProgramEXT(int type, string _string);
        public delegate uint glCreateShaderProgramv(int type, int count, string[] strings);
        public delegate uint glCreateShaderProgramvEXT(int type, int count, string[] strings);
        public delegate void glCreateStatesNV(int n, uint* states);
        public delegate IntPtr glCreateSyncFromCLeventARB(IntPtr context, IntPtr _event, uint flags);
        public delegate void glCreateTextures(int target, int n, uint* textures);
        public delegate void glCreateTransformFeedbacks(int n, uint* ids);
        public delegate void glCreateVertexArrays(int n, uint* arrays);
        public delegate void glCullFace(int mode);
        public delegate void glCullParameterdvEXT(int pname, double* _params);
        public delegate void glCullParameterfvEXT(int pname, float* _params);
        public delegate void glCurrentPaletteMatrixARB(int index);
        public delegate void glCurrentPaletteMatrixOES(uint matrixpaletteindex);
        public delegate void glDebugMessageCallback(IntPtr callback, IntPtr userParam);
        public delegate void glDebugMessageCallbackAMD(IntPtr callback, IntPtr userParam);
        public delegate void glDebugMessageCallbackARB(IntPtr callback, IntPtr userParam);
        public delegate void glDebugMessageCallbackKHR(IntPtr callback, IntPtr userParam);
        public delegate void glDebugMessageControl(int source, int type, int severity, int count, uint* ids, bool enabled);
        public delegate void glDebugMessageControlARB(int source, int type, int severity, int count, uint* ids, bool enabled);
        public delegate void glDebugMessageControlKHR(int source, int type, int severity, int count, uint* ids, bool enabled);
        public delegate void glDebugMessageEnableAMD(int category, int severity, int count, uint* ids, bool enabled);
        public delegate void glDebugMessageInsert(int source, int type, uint id, int severity, int length, string buf);
        public delegate void glDebugMessageInsertAMD(int category, int severity, uint id, int length, string buf);
        public delegate void glDebugMessageInsertARB(int source, int type, uint id, int severity, int length, string buf);
        public delegate void glDebugMessageInsertKHR(int source, int type, uint id, int severity, int length, string buf);
        public delegate void glDeformSGIX(uint mask);
        public delegate void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points);
        public delegate void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points);
        public delegate void glDeleteAsyncMarkersSGIX(uint marker, int range);
        public delegate void glDeleteBuffers(int n, uint* buffers);
        public delegate void glDeleteBuffersARB(int n, uint* buffers);
        public delegate void glDeleteCommandListsNV(int n, uint* lists);
        public delegate void glDeleteFencesAPPLE(int n, uint* fences);
        public delegate void glDeleteFencesNV(int n, uint* fences);
        public delegate void glDeleteFragmentShaderATI(uint id);
        public delegate void glDeleteFramebuffers(int n, uint* framebuffers);
        public delegate void glDeleteFramebuffersEXT(int n, uint* framebuffers);
        public delegate void glDeleteFramebuffersOES(int n, uint* framebuffers);
        public delegate void glDeleteLists(uint list, int range);
        public delegate void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects);
        public delegate void glDeleteNamedStringARB(int namelen, string name);
        public delegate void glDeleteNamesAMD(int identifier, uint num, uint* names);
        public delegate void glDeleteObjectARB(uint obj);
        public delegate void glDeleteOcclusionQueriesNV(int n, uint* ids);
        public delegate void glDeletePathsNV(uint path, int range);
        public delegate void glDeletePerfMonitorsAMD(int n, uint* monitors);
        public delegate void glDeletePerfQueryINTEL(uint queryHandle);
        public delegate void glDeleteProgram(uint program);
        public delegate void glDeleteProgramPipelines(int n, uint* pipelines);
        public delegate void glDeleteProgramPipelinesEXT(int n, uint* pipelines);
        public delegate void glDeleteProgramsARB(int n, uint* programs);
        public delegate void glDeleteProgramsNV(int n, uint* programs);
        public delegate void glDeleteQueries(int n, uint* ids);
        public delegate void glDeleteQueriesARB(int n, uint* ids);
        public delegate void glDeleteQueriesEXT(int n, uint* ids);
        public delegate void glDeleteQueryResourceTagNV(int n, int* tagIds);
        public delegate void glDeleteRenderbuffers(int n, uint* renderbuffers);
        public delegate void glDeleteRenderbuffersEXT(int n, uint* renderbuffers);
        public delegate void glDeleteRenderbuffersOES(int n, uint* renderbuffers);
        public delegate void glDeleteSamplers(int count, uint* samplers);
        public delegate void glDeleteSemaphoresEXT(int n, uint* semaphores);
        public delegate void glDeleteShader(uint shader);
        public delegate void glDeleteStatesNV(int n, uint* states);
        public delegate void glDeleteSync(IntPtr sync);
        public delegate void glDeleteSyncAPPLE(IntPtr sync);
        public delegate void glDeleteTextures(int n, uint* textures);
        public delegate void glDeleteTexturesEXT(int n, uint* textures);
        public delegate void glDeleteTransformFeedbacks(int n, uint* ids);
        public delegate void glDeleteTransformFeedbacksNV(int n, uint* ids);
        public delegate void glDeleteVertexArrays(int n, uint* arrays);
        public delegate void glDeleteVertexArraysAPPLE(int n, uint* arrays);
        public delegate void glDeleteVertexArraysOES(int n, uint* arrays);
        public delegate void glDeleteVertexShaderEXT(uint id);
        public delegate void glDepthBoundsEXT(double zmin, double zmax);
        public delegate void glDepthBoundsdNV(double zmin, double zmax);
        public delegate void glDepthFunc(int func);
        public delegate void glDepthMask(bool flag);
        public delegate void glDepthRange(double n, double f);
        public delegate void glDepthRangeArrayfvNV(uint first, int count, float* v);
        public delegate void glDepthRangeArrayfvOES(uint first, int count, float* v);
        public delegate void glDepthRangeArrayv(uint first, int count, double* v);
        public delegate void glDepthRangeIndexed(uint index, double n, double f);
        public delegate void glDepthRangeIndexedfNV(uint index, float n, float f);
        public delegate void glDepthRangeIndexedfOES(uint index, float n, float f);
        public delegate void glDepthRangedNV(double zNear, double zFar);
        public delegate void glDepthRangef(float n, float f);
        public delegate void glDepthRangefOES(float n, float f);
        public delegate void glDepthRangex(IntPtr n, IntPtr f);
        public delegate void glDepthRangexOES(IntPtr n, IntPtr f);
        public delegate void glDetachObjectARB(uint containerObj, uint attachedObj);
        public delegate void glDetachShader(uint program, uint shader);
        public delegate void glDetailTexFuncSGIS(int target, int n, float* points);
        public delegate void glDisable(int cap);
        public delegate void glDisableClientState(int array);
        public delegate void glDisableClientStateIndexedEXT(int array, uint index);
        public delegate void glDisableClientStateiEXT(int array, uint index);
        public delegate void glDisableDriverControlQCOM(uint driverControl);
        public delegate void glDisableIndexedEXT(int target, uint index);
        public delegate void glDisableVariantClientStateEXT(uint id);
        public delegate void glDisableVertexArrayAttrib(uint vaobj, uint index);
        public delegate void glDisableVertexArrayAttribEXT(uint vaobj, uint index);
        public delegate void glDisableVertexArrayEXT(uint vaobj, int array);
        public delegate void glDisableVertexAttribAPPLE(uint index, int pname);
        public delegate void glDisableVertexAttribArray(uint index);
        public delegate void glDisableVertexAttribArrayARB(uint index);
        public delegate void glDisablei(int target, uint index);
        public delegate void glDisableiEXT(int target, uint index);
        public delegate void glDisableiNV(int target, uint index);
        public delegate void glDisableiOES(int target, uint index);
        public delegate void glDiscardFramebufferEXT(int target, int numAttachments, uint* attachments);
        public delegate void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        public delegate void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);
        public delegate void glDispatchComputeIndirect(uint indirect);
        public delegate void glDrawArrays(int mode, int first, int count);
        public delegate void glDrawArraysEXT(int mode, int first, int count);
        public delegate void glDrawArraysIndirect(int mode, IntPtr indirect);
        public delegate void glDrawArraysInstanced(int mode, int first, int count, int instancecount);
        public delegate void glDrawArraysInstancedANGLE(int mode, int first, int count, int primcount);
        public delegate void glDrawArraysInstancedARB(int mode, int first, int count, int primcount);
        public delegate void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, uint baseinstance);
        public delegate void glDrawArraysInstancedBaseInstanceEXT(int mode, int first, int count, int instancecount, uint baseinstance);
        public delegate void glDrawArraysInstancedEXT(int mode, int start, int count, int primcount);
        public delegate void glDrawArraysInstancedNV(int mode, int first, int count, int primcount);
        public delegate void glDrawBuffer(int buf);
        public delegate void glDrawBuffers(int n, uint* bufs);
        public delegate void glDrawBuffersARB(int n, uint* bufs);
        public delegate void glDrawBuffersATI(int n, uint* bufs);
        public delegate void glDrawBuffersEXT(int n, uint* bufs);
        public delegate void glDrawBuffersIndexedEXT(int n, uint* location, int* indices);
        public delegate void glDrawBuffersNV(int n, uint* bufs);
        public delegate void glDrawCommandsAddressNV(int primitiveMode, ulong* indirects, int* sizes, uint count);
        public delegate void glDrawCommandsNV(int primitiveMode, uint buffer, uint* indirects, int* sizes, uint count);
        public delegate void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count);
        public delegate void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint* states, uint* fbos, uint count);
        public delegate void glDrawElementArrayAPPLE(int mode, int first, int count);
        public delegate void glDrawElementArrayATI(int mode, int count);
        public delegate void glDrawElements(int mode, int count, int type, void* indices);
        public delegate void glDrawElementsBaseVertex(int mode, int count, int type, void* indices, int basevertex);
        public delegate void glDrawElementsBaseVertexEXT(int mode, int count, int type, void* indices, int basevertex);
        public delegate void glDrawElementsBaseVertexOES(int mode, int count, int type, void* indices, int basevertex);
        public delegate void glDrawElementsIndirect(int mode, int type, void* indirect);
        public delegate void glDrawElementsInstanced(int mode, int count, int type, void* indices, int instancecount);
        public delegate void glDrawElementsInstancedANGLE(int mode, int count, int type, void* indices, int primcount);
        public delegate void glDrawElementsInstancedARB(int mode, int count, int type, void* indices, int primcount);
        public delegate void glDrawElementsInstancedBaseInstance(int mode, int count, int type, void* indices, int instancecount, uint baseinstance);
        public delegate void glDrawElementsInstancedBaseInstanceEXT(int mode, int count, int type, void* indices, int instancecount, uint baseinstance);
        public delegate void glDrawElementsInstancedBaseVertex(int mode, int count, int type, void* indices, int instancecount, int basevertex);
        public delegate void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, void* indices, int instancecount, int basevertex, uint baseinstance);
        public delegate void glDrawElementsInstancedBaseVertexBaseInstanceEXT(int mode, int count, int type, void* indices, int instancecount, int basevertex, uint baseinstance);
        public delegate void glDrawElementsInstancedBaseVertexEXT(int mode, int count, int type, void* indices, int instancecount, int basevertex);
        public delegate void glDrawElementsInstancedBaseVertexOES(int mode, int count, int type, void* indices, int instancecount, int basevertex);
        public delegate void glDrawElementsInstancedEXT(int mode, int count, int type, void* indices, int primcount);
        public delegate void glDrawElementsInstancedNV(int mode, int count, int type, void* indices, int primcount);
        public delegate void glDrawMeshArraysSUN(int mode, int first, int count, int width);
        public delegate void glDrawMeshTasksNV(uint first, uint count);
        public delegate void glDrawMeshTasksIndirectNV(uint indirect);
        public delegate void glDrawPixels(int width, int height, int format, int type, void* pixels);
        public delegate void glDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int first, int count);
        public delegate void glDrawRangeElementArrayATI(int mode, uint start, uint end, int count);
        public delegate void glDrawRangeElements(int mode, uint start, uint end, int count, int type, void* indices);
        public delegate void glDrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, void* indices, int basevertex);
        public delegate void glDrawRangeElementsBaseVertexEXT(int mode, uint start, uint end, int count, int type, void* indices, int basevertex);
        public delegate void glDrawRangeElementsBaseVertexOES(int mode, uint start, uint end, int count, int type, void* indices, int basevertex);
        public delegate void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, void* indices);
        public delegate void glDrawTexfOES(float x, float y, float z, float width, float height);
        public delegate void glDrawTexfvOES(float* coords);
        public delegate void glDrawTexiOES(int x, int y, int z, int width, int height);
        public delegate void glDrawTexivOES(int* coords);
        public delegate void glDrawTexsOES(short x, short y, short z, short width, short height);
        public delegate void glDrawTexsvOES(short* coords);
        public delegate void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
        public delegate void glDrawTexxOES(IntPtr x, IntPtr y, IntPtr z, IntPtr width, IntPtr height);
        public delegate void glDrawTexxvOES(IntPtr* coords);
        public delegate void glDrawTransformFeedback(int mode, uint id);
        public delegate void glDrawTransformFeedbackEXT(int mode, uint id);
        public delegate void glDrawTransformFeedbackInstanced(int mode, uint id, int instancecount);
        public delegate void glDrawTransformFeedbackInstancedEXT(int mode, uint id, int instancecount);
        public delegate void glDrawTransformFeedbackNV(int mode, uint id);
        public delegate void glDrawTransformFeedbackStream(int mode, uint id, uint stream);
        public delegate void glDrawTransformFeedbackStreamInstanced(int mode, uint id, uint stream, int instancecount);
        public delegate void glEGLImageTargetRenderbufferStorageOES(int target, IntPtr image);
        public delegate void glEGLImageTargetTexStorageEXT(int target, IntPtr image, int* attrib_list);
        public delegate void glEGLImageTargetTexture2DOES(int target, IntPtr image);
        public delegate void glEGLImageTargetTextureStorageEXT(uint texture, IntPtr image, int* attrib_list);
        public delegate void glEdgeFlag(bool flag);
        public delegate void glEdgeFlagFormatNV(int stride);
        public delegate void glEdgeFlagPointer(int stride, IntPtr pointer);
        public delegate void glEdgeFlagPointerEXT(int stride, int count, bool* pointer);
        public delegate void glEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride);
        public delegate void glEdgeFlagv(bool* flag);
        public delegate void glElementPointerAPPLE(int type, IntPtr pointer);
        public delegate void glElementPointerATI(int type, IntPtr pointer);
        public delegate void glEnable(int cap);
        public delegate void glEnableClientState(int array);
        public delegate void glEnableClientStateIndexedEXT(int array, uint index);
        public delegate void glEnableClientStateiEXT(int array, uint index);
        public delegate void glEnableDriverControlQCOM(uint driverControl);
        public delegate void glEnableIndexedEXT(int target, uint index);
        public delegate void glEnableVariantClientStateEXT(uint id);
        public delegate void glEnableVertexArrayAttrib(uint vaobj, uint index);
        public delegate void glEnableVertexArrayAttribEXT(uint vaobj, uint index);
        public delegate void glEnableVertexArrayEXT(uint vaobj, int array);
        public delegate void glEnableVertexAttribAPPLE(uint index, int pname);
        public delegate void glEnableVertexAttribArray(uint index);
        public delegate void glEnableVertexAttribArrayARB(uint index);
        public delegate void glEnablei(int target, uint index);
        public delegate void glEnableiEXT(int target, uint index);
        public delegate void glEnableiNV(int target, uint index);
        public delegate void glEnableiOES(int target, uint index);
        public delegate void glEnd();
        public delegate void glEndConditionalRender();
        public delegate void glEndConditionalRenderNV();
        public delegate void glEndConditionalRenderNVX();
        public delegate void glEndFragmentShaderATI();
        public delegate void glEndList();
        public delegate void glEndOcclusionQueryNV();
        public delegate void glEndPerfMonitorAMD(uint monitor);
        public delegate void glEndPerfQueryINTEL(uint queryHandle);
        public delegate void glEndQuery(int target);
        public delegate void glEndQueryARB(int target);
        public delegate void glEndQueryEXT(int target);
        public delegate void glEndQueryIndexed(int target, uint index);
        public delegate void glEndTilingQCOM(uint preserveMask);
        public delegate void glEndTransformFeedback();
        public delegate void glEndTransformFeedbackEXT();
        public delegate void glEndTransformFeedbackNV();
        public delegate void glEndVertexShaderEXT();
        public delegate void glEndVideoCaptureNV(uint video_capture_slot);
        public delegate void glEvalCoord1d(double u);
        public delegate void glEvalCoord1dv(double* u);
        public delegate void glEvalCoord1f(float u);
        public delegate void glEvalCoord1fv(float* u);
        public delegate void glEvalCoord1xOES(IntPtr u);
        public delegate void glEvalCoord1xvOES(IntPtr* coords);
        public delegate void glEvalCoord2d(double u, double v);
        public delegate void glEvalCoord2dv(double* u);
        public delegate void glEvalCoord2f(float u, float v);
        public delegate void glEvalCoord2fv(float* u);
        public delegate void glEvalCoord2xOES(IntPtr u, IntPtr v);
        public delegate void glEvalCoord2xvOES(IntPtr* coords);
        public delegate void glEvalMapsNV(int target, int mode);
        public delegate void glEvalMesh1(int mode, int i1, int i2);
        public delegate void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);
        public delegate void glEvalPoint1(int i);
        public delegate void glEvalPoint2(int i, int j);
        public delegate void glEvaluateDepthValuesARB();
        public delegate void glExecuteProgramNV(int target, uint id, float* _params);
        public delegate void glExtGetBufferPointervQCOM(int target, IntPtr* _params);
        public delegate void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);
        public delegate void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);
        public delegate void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, StringBuilder source, int* length);
        public delegate void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms);
        public delegate void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);
        public delegate void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders);
        public delegate void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int* _params);
        public delegate void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr texels);
        public delegate void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);
        public delegate bool glExtIsProgramBinaryQCOM(uint program);
        public delegate void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);
        public delegate void glExtractComponentEXT(uint res, uint src, uint num);
        public delegate void glFeedbackBuffer(int size, int type, float* buffer);
        public delegate void glFeedbackBufferxOES(int n, int type, IntPtr* buffer);
        public delegate IntPtr glFenceSync(int condition, uint flags);
        public delegate IntPtr glFenceSyncAPPLE(int condition, uint flags);
        public delegate void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage);
        public delegate void glFinish();
        public delegate int glFinishAsyncSGIX(uint* markerp);
        public delegate void glFinishFenceAPPLE(uint fence);
        public delegate void glFinishFenceNV(uint fence);
        public delegate void glFinishObjectAPPLE(int _object, int name);
        public delegate void glFinishTextureSUNX();
        public delegate void glFlush();
        public delegate void glFlushMappedBufferRange(int target, uint offset, uint length);
        public delegate void glFlushMappedBufferRangeAPPLE(int target, uint offset, uint size);
        public delegate void glFlushMappedBufferRangeEXT(int target, uint offset, uint length);
        public delegate void glFlushMappedNamedBufferRange(uint buffer, uint offset, uint length);
        public delegate void glFlushMappedNamedBufferRangeEXT(uint buffer, uint offset, uint length);
        public delegate void glFlushPixelDataRangeNV(int target);
        public delegate void glFlushRasterSGIX();
        public delegate void glFlushStaticDataIBM(int target);
        public delegate void glFlushVertexArrayRangeAPPLE(int length, IntPtr pointer);
        public delegate void glFlushVertexArrayRangeNV();
        public delegate void glFogCoordFormatNV(int type, int stride);
        public delegate void glFogCoordPointer(int type, int stride, IntPtr pointer);
        public delegate void glFogCoordPointerEXT(int type, int stride, IntPtr pointer);
        public delegate void glFogCoordPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glFogCoordd(double coord);
        public delegate void glFogCoorddEXT(double coord);
        public delegate void glFogCoorddv(double* coord);
        public delegate void glFogCoorddvEXT(double* coord);
        public delegate void glFogCoordf(float coord);
        public delegate void glFogCoordfEXT(float coord);
        public delegate void glFogCoordfv(float* coord);
        public delegate void glFogCoordfvEXT(float* coord);
        public delegate void glFogCoordhNV(short fog);
        public delegate void glFogCoordhvNV(short* fog);
        public delegate void glFogFuncSGIS(int n, float* points);
        public delegate void glFogf(int pname, float param);
        public delegate void glFogfv(int pname, float* _params);
        public delegate void glFogi(int pname, int param);
        public delegate void glFogiv(int pname, int* _params);
        public delegate void glFogx(int pname, IntPtr param);
        public delegate void glFogxOES(int pname, IntPtr param);
        public delegate void glFogxv(int pname, IntPtr* param);
        public delegate void glFogxvOES(int pname, IntPtr* param);
        public delegate void glFragmentColorMaterialSGIX(int face, int mode);
        public delegate void glFragmentCoverageColorNV(uint color);
        public delegate void glFragmentLightModelfSGIX(int pname, float param);
        public delegate void glFragmentLightModelfvSGIX(int pname, float* _params);
        public delegate void glFragmentLightModeliSGIX(int pname, int param);
        public delegate void glFragmentLightModelivSGIX(int pname, int* _params);
        public delegate void glFragmentLightfSGIX(int light, int pname, float param);
        public delegate void glFragmentLightfvSGIX(int light, int pname, float* _params);
        public delegate void glFragmentLightiSGIX(int light, int pname, int param);
        public delegate void glFragmentLightivSGIX(int light, int pname, int* _params);
        public delegate void glFragmentMaterialfSGIX(int face, int pname, float param);
        public delegate void glFragmentMaterialfvSGIX(int face, int pname, float* _params);
        public delegate void glFragmentMaterialiSGIX(int face, int pname, int param);
        public delegate void glFragmentMaterialivSGIX(int face, int pname, int* _params);
        public delegate void glFrameTerminatorGREMEDY();
        public delegate void glFrameZoomSGIX(int factor);
        public delegate void glFramebufferDrawBufferEXT(uint framebuffer, int mode);
        public delegate void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs);
        public delegate void glFramebufferFetchBarrierEXT();
        public delegate void glFramebufferFetchBarrierQCOM();
        public delegate void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures);
        public delegate void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
        public delegate void glFramebufferParameteri(int target, int pname, int param);
        public delegate void glFramebufferPixelLocalStorageSizeEXT(uint target, int size);
        public delegate void glFramebufferReadBufferEXT(uint framebuffer, int mode);
        public delegate void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, uint renderbuffer);
        public delegate void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, uint renderbuffer);
        public delegate void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, uint renderbuffer);
        public delegate void glFramebufferSampleLocationsfvARB(int target, uint start, int count, float* v);
        public delegate void glFramebufferSampleLocationsfvNV(int target, uint start, int count, float* v);
        public delegate void glFramebufferSamplePositionsfvAMD(int target, uint numsamples, uint pixelindex, float* values);
        public delegate void glFramebufferTexture(int target, int attachment, uint texture, int level);
        public delegate void glFramebufferTexture1D(int target, int attachment, int textarget, uint texture, int level);
        public delegate void glFramebufferTexture1DEXT(int target, int attachment, int textarget, uint texture, int level);
        public delegate void glFramebufferTexture2D(int target, int attachment, int textarget, uint texture, int level);
        public delegate void glFramebufferTexture2DEXT(int target, int attachment, int textarget, uint texture, int level);
        public delegate void glFramebufferTexture2DDownsampleIMG(int target, int attachment, int textarget, uint texture, int level, int xscale, int yscale);
        public delegate void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, uint texture, int level, int samples);
        public delegate void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, uint texture, int level, int samples);
        public delegate void glFramebufferTexture2DOES(int target, int attachment, int textarget, uint texture, int level);
        public delegate void glFramebufferTexture3D(int target, int attachment, int textarget, uint texture, int level, int zoffset);
        public delegate void glFramebufferTexture3DEXT(int target, int attachment, int textarget, uint texture, int level, int zoffset);
        public delegate void glFramebufferTexture3DOES(int target, int attachment, int textarget, uint texture, int level, int zoffset);
        public delegate void glFramebufferTextureARB(int target, int attachment, uint texture, int level);
        public delegate void glFramebufferTextureEXT(int target, int attachment, uint texture, int level);
        public delegate void glFramebufferTextureFaceARB(int target, int attachment, uint texture, int level, int face);
        public delegate void glFramebufferTextureFaceEXT(int target, int attachment, uint texture, int level, int face);
        public delegate void glFramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer);
        public delegate void glFramebufferTextureLayerARB(int target, int attachment, uint texture, int level, int layer);
        public delegate void glFramebufferTextureLayerEXT(int target, int attachment, uint texture, int level, int layer);
        public delegate void glFramebufferTextureLayerDownsampleIMG(int target, int attachment, uint texture, int level, int layer, int xscale, int yscale);
        public delegate void glFramebufferTextureMultisampleMultiviewOVR(int target, int attachment, uint texture, int level, int samples, int baseViewIndex, int numViews);
        public delegate void glFramebufferTextureMultiviewOVR(int target, int attachment, uint texture, int level, int baseViewIndex, int numViews);
        public delegate void glFramebufferTextureOES(int target, int attachment, uint texture, int level);
        public delegate void glFreeObjectBufferATI(uint buffer);
        public delegate void glFrontFace(int mode);
        public delegate void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);
        public delegate void glFrustumf(float l, float r, float b, float t, float n, float f);
        public delegate void glFrustumfOES(float l, float r, float b, float t, float n, float f);
        public delegate void glFrustumx(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f);
        public delegate void glFrustumxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f);
        public delegate uint glGenAsyncMarkersSGIX(int range);
        public delegate void glGenBuffers(int n, uint* buffers);
        public delegate void glGenBuffersARB(int n, uint* buffers);
        public delegate void glGenFencesAPPLE(int n, uint* fences);
        public delegate void glGenFencesNV(int n, uint* fences);
        public delegate uint glGenFragmentShadersATI(uint range);
        public delegate void glGenFramebuffers(int n, uint* framebuffers);
        public delegate void glGenFramebuffersEXT(int n, uint* framebuffers);
        public delegate void glGenFramebuffersOES(int n, uint* framebuffers);
        public delegate uint glGenLists(int range);
        public delegate void glGenNamesAMD(int identifier, uint num, uint* names);
        public delegate void glGenOcclusionQueriesNV(int n, uint* ids);
        public delegate uint glGenPathsNV(int range);
        public delegate void glGenPerfMonitorsAMD(int n, uint* monitors);
        public delegate void glGenProgramPipelines(int n, uint* pipelines);
        public delegate void glGenProgramPipelinesEXT(int n, uint* pipelines);
        public delegate void glGenProgramsARB(int n, uint* programs);
        public delegate void glGenProgramsNV(int n, uint* programs);
        public delegate void glGenQueries(int n, uint* ids);
        public delegate void glGenQueriesARB(int n, uint* ids);
        public delegate void glGenQueriesEXT(int n, uint* ids);
        public delegate void glGenQueryResourceTagNV(int n, int* tagIds);
        public delegate void glGenRenderbuffers(int n, uint* renderbuffers);
        public delegate void glGenRenderbuffersEXT(int n, uint* renderbuffers);
        public delegate void glGenRenderbuffersOES(int n, uint* renderbuffers);
        public delegate void glGenSamplers(int count, uint* samplers);
        public delegate void glGenSemaphoresEXT(int n, uint* semaphores);
        public delegate uint glGenSymbolsEXT(int datatype, int storagetype, int range, uint components);
        public delegate void glGenTextures(int n, uint* textures);
        public delegate void glGenTexturesEXT(int n, uint* textures);
        public delegate void glGenTransformFeedbacks(int n, uint* ids);
        public delegate void glGenTransformFeedbacksNV(int n, uint* ids);
        public delegate void glGenVertexArrays(int n, uint* arrays);
        public delegate void glGenVertexArraysAPPLE(int n, uint* arrays);
        public delegate void glGenVertexArraysOES(int n, uint* arrays);
        public delegate uint glGenVertexShadersEXT(uint range);
        public delegate void glGenerateMipmap(int target);
        public delegate void glGenerateMipmapEXT(int target);
        public delegate void glGenerateMipmapOES(int target);
        public delegate void glGenerateMultiTexMipmapEXT(int texunit, int target);
        public delegate void glGenerateTextureMipmap(uint texture);
        public delegate void glGenerateTextureMipmapEXT(uint texture, int target);
        public delegate void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int* _params);
        public delegate void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetActiveSubroutineName(uint program, int shadertype, uint index, int bufsize, int* length, StringBuilder name);
        public delegate void glGetActiveSubroutineUniformName(uint program, int shadertype, uint index, int bufsize, int* length, StringBuilder name);
        public delegate void glGetActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int* values);
        public delegate void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, StringBuilder uniformBlockName);
        public delegate void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* _params);
        public delegate void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, StringBuilder uniformName);
        public delegate void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* _params);
        public delegate void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetArrayObjectfvATI(int array, int pname, float* _params);
        public delegate void glGetArrayObjectivATI(int array, int pname, int* _params);
        public delegate void glGetAttachedObjectsARB(uint containerObj, int maxCount, int* count, uint* obj);
        public delegate void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders);
        public delegate int glGetAttribLocation(uint program, string name);
        public delegate int glGetAttribLocationARB(uint programObj, string name);
        public delegate void glGetBooleanIndexedvEXT(int target, uint index, bool* data);
        public delegate void glGetBooleani_v(int target, uint index, bool* data);
        public delegate void glGetBooleanv(int pname, bool* data);
        public delegate void glGetBufferParameteri64v(int target, int pname, long* _params);
        public delegate void glGetBufferParameteriv(int target, int pname, int* _params);
        public delegate void glGetBufferParameterivARB(int target, int pname, int* _params);
        public delegate void glGetBufferParameterui64vNV(int target, int pname, ulong* _params);
        public delegate void glGetBufferPointerv(int target, int pname, IntPtr* _params);
        public delegate void glGetBufferPointervARB(int target, int pname, IntPtr* _params);
        public delegate void glGetBufferPointervOES(int target, int pname, IntPtr* _params);
        public delegate void glGetBufferSubData(int target, uint offset, uint size, IntPtr data);
        public delegate void glGetBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data);
        public delegate void glGetClipPlane(int plane, double* equation);
        public delegate void glGetClipPlanef(int plane, float* equation);
        public delegate void glGetClipPlanefOES(int plane, float* equation);
        public delegate void glGetClipPlanex(int plane, IntPtr* equation);
        public delegate void glGetClipPlanexOES(int plane, IntPtr* equation);
        public delegate void glGetColorTable(int target, int format, int type, IntPtr table);
        public delegate void glGetColorTableEXT(int target, int format, int type, IntPtr data);
        public delegate void glGetColorTableParameterfv(int target, int pname, float* _params);
        public delegate void glGetColorTableParameterfvEXT(int target, int pname, float* _params);
        public delegate void glGetColorTableParameterfvSGI(int target, int pname, float* _params);
        public delegate void glGetColorTableParameteriv(int target, int pname, int* _params);
        public delegate void glGetColorTableParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetColorTableParameterivSGI(int target, int pname, int* _params);
        public delegate void glGetColorTableSGI(int target, int format, int type, IntPtr table);
        public delegate void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float* _params);
        public delegate void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int* _params);
        public delegate void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float* _params);
        public delegate void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int* _params);
        public delegate void glGetCombinerStageParameterfvNV(int stage, int pname, float* _params);
        public delegate uint glGetCommandHeaderNV(int tokenID, uint size);
        public delegate void glGetCompressedMultiTexImageEXT(int texunit, int target, int lod, IntPtr img);
        public delegate void glGetCompressedTexImage(int target, int level, IntPtr img);
        public delegate void glGetCompressedTexImageARB(int target, int level, IntPtr img);
        public delegate void glGetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels);
        public delegate void glGetCompressedTextureImageEXT(uint texture, int target, int lod, IntPtr img);
        public delegate void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels);
        public delegate void glGetConvolutionFilter(int target, int format, int type, IntPtr image);
        public delegate void glGetConvolutionFilterEXT(int target, int format, int type, IntPtr image);
        public delegate void glGetConvolutionParameterfv(int target, int pname, float* _params);
        public delegate void glGetConvolutionParameterfvEXT(int target, int pname, float* _params);
        public delegate void glGetConvolutionParameteriv(int target, int pname, int* _params);
        public delegate void glGetConvolutionParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetConvolutionParameterxvOES(int target, int pname, IntPtr* _params);
        public delegate void glGetCoverageModulationTableNV(int bufsize, float* v);
        public delegate uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog);
        public delegate uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint* ids, int* lengths, StringBuilder message);
        public delegate uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog);
        public delegate uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog);
        public delegate void glGetDetailTexFuncSGIS(int target, float* points);
        public delegate void glGetDoubleIndexedvEXT(int target, uint index, double* data);
        public delegate void glGetDoublei_v(int target, uint index, double* data);
        public delegate void glGetDoublei_vEXT(int pname, uint index, double* _params);
        public delegate void glGetDoublev(int pname, double* data);
        public delegate void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, StringBuilder driverControlString);
        public delegate void glGetDriverControlsQCOM(int* num, int size, uint* driverControls);
        public delegate int glGetError();
        public delegate void glGetFenceivNV(uint fence, int pname, int* _params);
        public delegate void glGetFinalCombinerInputParameterfvNV(int variable, int pname, float* _params);
        public delegate void glGetFinalCombinerInputParameterivNV(int variable, int pname, int* _params);
        public delegate void glGetFirstPerfQueryIdINTEL(uint* queryId);
        public delegate void glGetFixedv(int pname, IntPtr* _params);
        public delegate void glGetFixedvOES(int pname, IntPtr* _params);
        public delegate void glGetFloatIndexedvEXT(int target, uint index, float* data);
        public delegate void glGetFloati_v(int target, uint index, float* data);
        public delegate void glGetFloati_vEXT(int pname, uint index, float* _params);
        public delegate void glGetFloati_vNV(int target, uint index, float* data);
        public delegate void glGetFloati_vOES(int target, uint index, float* data);
        public delegate void glGetFloatv(int pname, float* data);
        public delegate void glGetFogFuncSGIS(float* points);
        public delegate int glGetFragDataIndex(uint program, string name);
        public delegate int glGetFragDataIndexEXT(uint program, string name);
        public delegate int glGetFragDataLocation(uint program, string name);
        public delegate int glGetFragDataLocationEXT(uint program, string name);
        public delegate void glGetFragmentLightfvSGIX(int light, int pname, float* _params);
        public delegate void glGetFragmentLightivSGIX(int light, int pname, int* _params);
        public delegate void glGetFragmentMaterialfvSGIX(int face, int pname, float* _params);
        public delegate void glGetFragmentMaterialivSGIX(int face, int pname, int* _params);
        public delegate void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* _params);
        public delegate void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, int* _params);
        public delegate void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int* _params);
        public delegate void glGetFramebufferParameterfvAMD(int target, int pname, uint numsamples, uint pixelindex, int size, float* values);
        public delegate void glGetFramebufferParameteriv(int target, int pname, int* _params);
        public delegate void glGetFramebufferParameterivEXT(uint framebuffer, int pname, int* _params);
        public delegate int glGetFramebufferPixelLocalStorageSizeEXT(uint target);
        public delegate int glGetGraphicsResetStatus();
        public delegate int glGetGraphicsResetStatusARB();
        public delegate int glGetGraphicsResetStatusEXT();
        public delegate int glGetGraphicsResetStatusKHR();
        public delegate uint glGetHandleARB(int pname);
        public delegate void glGetHistogram(int target, bool reset, int format, int type, IntPtr values);
        public delegate void glGetHistogramEXT(int target, bool reset, int format, int type, IntPtr values);
        public delegate void glGetHistogramParameterfv(int target, int pname, float* _params);
        public delegate void glGetHistogramParameterfvEXT(int target, int pname, float* _params);
        public delegate void glGetHistogramParameteriv(int target, int pname, int* _params);
        public delegate void glGetHistogramParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetHistogramParameterxvOES(int target, int pname, IntPtr* _params);
        public delegate ulong glGetImageHandleARB(uint texture, int level, bool layered, int layer, int format);
        public delegate ulong glGetImageHandleNV(uint texture, int level, bool layered, int layer, int format);
        public delegate void glGetImageTransformParameterfvHP(int target, int pname, float* _params);
        public delegate void glGetImageTransformParameterivHP(int target, int pname, int* _params);
        public delegate void glGetInfoLogARB(uint obj, int maxLength, int* length, StringBuilder infoLog);
        public delegate int glGetInstrumentsSGIX();
        public delegate void glGetInteger64i_v(int target, uint index, long* data);
        public delegate void glGetInteger64v(int pname, long* data);
        public delegate void glGetInteger64vAPPLE(int pname, long* _params);
        public delegate void glGetIntegerIndexedvEXT(int target, uint index, int* data);
        public delegate void glGetIntegeri_v(int target, uint index, int* data);
        public delegate void glGetIntegeri_vEXT(int target, uint index, int* data);
        public delegate void glGetIntegerui64i_vNV(int value, uint index, ulong* result);
        public delegate void glGetIntegerui64vNV(int value, ulong* result);
        public delegate void glGetIntegerv(int pname, int* data);
        public delegate void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int bufSize, int* _params);
        public delegate void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long* _params);
        public delegate void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int* _params);
        public delegate void glGetInvariantBooleanvEXT(uint id, int value, bool* data);
        public delegate void glGetInvariantFloatvEXT(uint id, int value, float* data);
        public delegate void glGetInvariantIntegervEXT(uint id, int value, int* data);
        public delegate void glGetLightfv(int light, int pname, float* _params);
        public delegate void glGetLightiv(int light, int pname, int* _params);
        public delegate void glGetLightxOES(int light, int pname, IntPtr* _params);
        public delegate void glGetLightxv(int light, int pname, IntPtr* _params);
        public delegate void glGetLightxvOES(int light, int pname, IntPtr* _params);
        public delegate void glGetListParameterfvSGIX(uint list, int pname, float* _params);
        public delegate void glGetListParameterivSGIX(uint list, int pname, int* _params);
        public delegate void glGetLocalConstantBooleanvEXT(uint id, int value, bool* data);
        public delegate void glGetLocalConstantFloatvEXT(uint id, int value, float* data);
        public delegate void glGetLocalConstantIntegervEXT(uint id, int value, int* data);
        public delegate void glGetMapAttribParameterfvNV(int target, uint index, int pname, float* _params);
        public delegate void glGetMapAttribParameterivNV(int target, uint index, int pname, int* _params);
        public delegate void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points);
        public delegate void glGetMapParameterfvNV(int target, int pname, float* _params);
        public delegate void glGetMapParameterivNV(int target, int pname, int* _params);
        public delegate void glGetMapdv(int target, int query, double* v);
        public delegate void glGetMapfv(int target, int query, float* v);
        public delegate void glGetMapiv(int target, int query, int* v);
        public delegate void glGetMapxvOES(int target, int query, IntPtr* v);
        public delegate void glGetMaterialfv(int face, int pname, float* _params);
        public delegate void glGetMaterialiv(int face, int pname, int* _params);
        public delegate void glGetMaterialxOES(int face, int pname, IntPtr param);
        public delegate void glGetMaterialxv(int face, int pname, IntPtr* _params);
        public delegate void glGetMaterialxvOES(int face, int pname, IntPtr* _params);
        public delegate void glGetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, uint* _params);
        public delegate void glGetMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params);
        public delegate void glGetMinmax(int target, bool reset, int format, int type, IntPtr values);
        public delegate void glGetMinmaxEXT(int target, bool reset, int format, int type, IntPtr values);
        public delegate void glGetMinmaxParameterfv(int target, int pname, float* _params);
        public delegate void glGetMinmaxParameterfvEXT(int target, int pname, float* _params);
        public delegate void glGetMinmaxParameteriv(int target, int pname, int* _params);
        public delegate void glGetMinmaxParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params);
        public delegate void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double* _params);
        public delegate void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params);
        public delegate void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int* _params);
        public delegate void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, IntPtr pixels);
        public delegate void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float* _params);
        public delegate void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int* _params);
        public delegate void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params);
        public delegate void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params);
        public delegate void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glGetMultisamplefv(int pname, uint index, float* val);
        public delegate void glGetMultisamplefvNV(int pname, uint index, float* val);
        public delegate void glGetNamedBufferParameteri64v(uint buffer, int pname, long* _params);
        public delegate void glGetNamedBufferParameteriv(uint buffer, int pname, int* _params);
        public delegate void glGetNamedBufferParameterivEXT(uint buffer, int pname, int* _params);
        public delegate void glGetNamedBufferParameterui64vNV(uint buffer, int pname, ulong* _params);
        public delegate void glGetNamedBufferPointerv(uint buffer, int pname, IntPtr* _params);
        public delegate void glGetNamedBufferPointervEXT(uint buffer, int pname, IntPtr* _params);
        public delegate void glGetNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glGetNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, float* values);
        public delegate void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int* _params);
        public delegate void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, int attachment, int pname, int* _params);
        public delegate void glGetNamedFramebufferParameteriv(uint framebuffer, int pname, int* param);
        public delegate void glGetNamedFramebufferParameterivEXT(uint framebuffer, int pname, int* _params);
        public delegate void glGetNamedProgramLocalParameterIivEXT(uint program, int target, uint index, int* _params);
        public delegate void glGetNamedProgramLocalParameterIuivEXT(uint program, int target, uint index, uint* _params);
        public delegate void glGetNamedProgramLocalParameterdvEXT(uint program, int target, uint index, double* _params);
        public delegate void glGetNamedProgramLocalParameterfvEXT(uint program, int target, uint index, float* _params);
        public delegate void glGetNamedProgramStringEXT(uint program, int target, int pname, IntPtr _string);
        public delegate void glGetNamedProgramivEXT(uint program, int target, int pname, int* _params);
        public delegate void glGetNamedRenderbufferParameteriv(uint renderbuffer, int pname, int* _params);
        public delegate void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, int pname, int* _params);
        public delegate void glGetNamedStringARB(int namelen, string name, int bufSize, int* stringlen, StringBuilder _string);
        public delegate void glGetNamedStringivARB(int namelen, string name, int pname, int* _params);
        public delegate void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId);
        public delegate void glGetObjectBufferfvATI(uint buffer, int pname, float* _params);
        public delegate void glGetObjectBufferivATI(uint buffer, int pname, int* _params);
        public delegate void glGetObjectLabel(int identifier, uint name, int bufSize, int* length, StringBuilder label);
        public delegate void glGetObjectLabelEXT(int type, uint _object, int bufSize, int* length, StringBuilder label);
        public delegate void glGetObjectLabelKHR(int identifier, uint name, int bufSize, int* length, StringBuilder label);
        public delegate void glGetObjectParameterfvARB(uint obj, int pname, float* _params);
        public delegate void glGetObjectParameterivAPPLE(int objectType, uint name, int pname, int* _params);
        public delegate void glGetObjectParameterivARB(uint obj, int pname, int* _params);
        public delegate void glGetObjectPtrLabel(IntPtr ptr, int bufSize, int* length, StringBuilder label);
        public delegate void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int* length, StringBuilder label);
        public delegate void glGetOcclusionQueryivNV(uint id, int pname, int* _params);
        public delegate void glGetOcclusionQueryuivNV(uint id, int pname, uint* _params);
        public delegate void glGetPathColorGenfvNV(int color, int pname, float* value);
        public delegate void glGetPathColorGenivNV(int color, int pname, int* value);
        public delegate void glGetPathCommandsNV(uint path, byte* commands);
        public delegate void glGetPathCoordsNV(uint path, float* coords);
        public delegate void glGetPathDashArrayNV(uint path, float* dashArray);
        public delegate float glGetPathLengthNV(uint path, int startSegment, int numSegments);
        public delegate void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics);
        public delegate void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, IntPtr paths, uint pathBase, int stride, float* metrics);
        public delegate void glGetPathParameterfvNV(uint path, int pname, float* value);
        public delegate void glGetPathParameterivNV(uint path, int pname, int* value);
        public delegate void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float* returnedSpacing);
        public delegate void glGetPathTexGenfvNV(int texCoordSet, int pname, float* value);
        public delegate void glGetPathTexGenivNV(int texCoordSet, int pname, int* value);
        public delegate void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue);
        public delegate void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint* data, int* bytesWritten);
        public delegate void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, IntPtr data);
        public delegate void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, StringBuilder counterString);
        public delegate void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters);
        public delegate void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, StringBuilder groupString);
        public delegate void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups);
        public delegate void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, IntPtr data, uint* bytesWritten);
        public delegate void glGetPerfQueryIdByNameINTEL(StringBuilder queryName, uint* queryId);
        public delegate void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask);
        public delegate void glGetPixelMapfv(int map, float* values);
        public delegate void glGetPixelMapuiv(int map, uint* values);
        public delegate void glGetPixelMapusv(int map, ushort* values);
        public delegate void glGetPixelMapxv(int map, int size, IntPtr* values);
        public delegate void glGetPixelTexGenParameterfvSGIS(int pname, float* _params);
        public delegate void glGetPixelTexGenParameterivSGIS(int pname, int* _params);
        public delegate void glGetPixelTransformParameterfvEXT(int target, int pname, float* _params);
        public delegate void glGetPixelTransformParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetPointerIndexedvEXT(int target, uint index, IntPtr* data);
        public delegate void glGetPointeri_vEXT(int pname, uint index, IntPtr* _params);
        public delegate void glGetPointerv(int pname, IntPtr* _params);
        public delegate void glGetPointervEXT(int pname, IntPtr* _params);
        public delegate void glGetPointervKHR(int pname, IntPtr* _params);
        public delegate void glGetPolygonStipple(byte* mask);
        public delegate void glGetProgramBinary(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary);
        public delegate void glGetProgramBinaryOES(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary);
        public delegate void glGetProgramEnvParameterIivNV(int target, uint index, int* _params);
        public delegate void glGetProgramEnvParameterIuivNV(int target, uint index, uint* _params);
        public delegate void glGetProgramEnvParameterdvARB(int target, uint index, double* _params);
        public delegate void glGetProgramEnvParameterfvARB(int target, uint index, float* _params);
        public delegate void glGetProgramInfoLog(uint program, int bufSize, int* length, byte* infoLog);
        public delegate void glGetProgramInterfaceiv(uint program, int programInterface, int pname, int* _params);
        public delegate void glGetProgramLocalParameterIivNV(int target, uint index, int* _params);
        public delegate void glGetProgramLocalParameterIuivNV(int target, uint index, uint* _params);
        public delegate void glGetProgramLocalParameterdvARB(int target, uint index, double* _params);
        public delegate void glGetProgramLocalParameterfvARB(int target, uint index, float* _params);
        public delegate void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* _params);
        public delegate void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* _params);
        public delegate void glGetProgramParameterdvNV(int target, uint index, int pname, double* _params);
        public delegate void glGetProgramParameterfvNV(int target, uint index, int pname, float* _params);
        public delegate void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, byte* infoLog);
        public delegate void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, byte* infoLog);
        public delegate void glGetProgramPipelineiv(uint pipeline, int pname, int* _params);
        public delegate void glGetProgramPipelineivEXT(uint pipeline, int pname, int* _params);
        public delegate uint glGetProgramResourceIndex(uint program, int programInterface, string name);
        public delegate int glGetProgramResourceLocation(uint program, int programInterface, string name);
        public delegate int glGetProgramResourceLocationIndex(uint program, int programInterface, string name);
        public delegate int glGetProgramResourceLocationIndexEXT(uint program, int programInterface, string name);
        public delegate void glGetProgramResourceName(uint program, int programInterface, uint index, int bufSize, int* length, byte* name);
        public delegate void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, float* _params);
        public delegate void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, int* _params);
        public delegate void glGetProgramStageiv(uint program, int shadertype, int pname, int* values);
        public delegate void glGetProgramStringARB(int target, int pname, IntPtr _string);
        public delegate void glGetProgramStringNV(uint id, int pname, byte* program);
        public delegate void glGetProgramSubroutineParameteruivNV(int target, uint index, uint* param);
        public delegate void glGetProgramiv(uint program, int pname, int* _params);
        public delegate void glGetProgramivARB(int target, int pname, int* _params);
        public delegate void glGetProgramivNV(uint id, int pname, int* _params);
        public delegate void glGetQueryBufferObjecti64v(uint id, uint buffer, int pname, uint offset);
        public delegate void glGetQueryBufferObjectiv(uint id, uint buffer, int pname, uint offset);
        public delegate void glGetQueryBufferObjectui64v(uint id, uint buffer, int pname, uint offset);
        public delegate void glGetQueryBufferObjectuiv(uint id, uint buffer, int pname, uint offset);
        public delegate void glGetQueryIndexediv(int target, uint index, int pname, int* _params);
        public delegate void glGetQueryObjecti64v(uint id, int pname, long* _params);
        public delegate void glGetQueryObjecti64vEXT(uint id, int pname, long* _params);
        public delegate void glGetQueryObjectiv(uint id, int pname, int* _params);
        public delegate void glGetQueryObjectivARB(uint id, int pname, int* _params);
        public delegate void glGetQueryObjectivEXT(uint id, int pname, int* _params);
        public delegate void glGetQueryObjectui64v(uint id, int pname, ulong* _params);
        public delegate void glGetQueryObjectui64vEXT(uint id, int pname, ulong* _params);
        public delegate void glGetQueryObjectuiv(uint id, int pname, uint* _params);
        public delegate void glGetQueryObjectuivARB(uint id, int pname, uint* _params);
        public delegate void glGetQueryObjectuivEXT(uint id, int pname, uint* _params);
        public delegate void glGetQueryiv(int target, int pname, int* _params);
        public delegate void glGetQueryivARB(int target, int pname, int* _params);
        public delegate void glGetQueryivEXT(int target, int pname, int* _params);
        public delegate void glGetRenderbufferParameteriv(int target, int pname, int* _params);
        public delegate void glGetRenderbufferParameterivEXT(int target, int pname, int* _params);
        public delegate void glGetRenderbufferParameterivOES(int target, int pname, int* _params);
        public delegate void glGetSamplerParameterIiv(uint sampler, int pname, int* _params);
        public delegate void glGetSamplerParameterIivEXT(uint sampler, int pname, int* _params);
        public delegate void glGetSamplerParameterIivOES(uint sampler, int pname, int* _params);
        public delegate void glGetSamplerParameterIuiv(uint sampler, int pname, uint* _params);
        public delegate void glGetSamplerParameterIuivEXT(uint sampler, int pname, uint* _params);
        public delegate void glGetSamplerParameterIuivOES(uint sampler, int pname, uint* _params);
        public delegate void glGetSamplerParameterfv(uint sampler, int pname, float* _params);
        public delegate void glGetSamplerParameteriv(uint sampler, int pname, int* _params);
        public delegate void glGetSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params);
        public delegate void glGetSeparableFilter(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span);
        public delegate void glGetSeparableFilterEXT(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span);
        public delegate void glGetShaderInfoLog(uint shader, int bufSize, int* length, byte* infoLog);
        public delegate void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, int* precision);
        public delegate void glGetShaderSource(uint shader, int bufSize, int* length, byte* source);
        public delegate void glGetShaderSourceARB(uint obj, int maxLength, int* length, byte* source);
        public delegate void glGetShaderiv(uint shader, int pname, int* _params);
        public delegate void glGetShadingRateImagePaletteNV(uint viewport, uint entry, int* rate);
        public delegate void glGetShadingRateSampleLocationivNV(int rate, uint samples, uint index, int* location);
        public delegate void glGetSharpenTexFuncSGIS(int target, float* points);
        public delegate ushort glGetStageIndexNV(int shadertype);
        public delegate IntPtr glGetString(int name);
        public delegate IntPtr glGetStringi(int name, uint index);
        public delegate uint glGetSubroutineIndex(uint program, int shadertype, string name);
        public delegate int glGetSubroutineUniformLocation(uint program, int shadertype, string name);
        public delegate void glGetSynciv(IntPtr sync, int pname, int bufSize, int* length, int* values);
        public delegate void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int* length, int* values);
        public delegate void glGetTexBumpParameterfvATI(int pname, float* param);
        public delegate void glGetTexBumpParameterivATI(int pname, int* param);
        public delegate void glGetTexEnvfv(int target, int pname, float* _params);
        public delegate void glGetTexEnviv(int target, int pname, int* _params);
        public delegate void glGetTexEnvxv(int target, int pname, IntPtr* _params);
        public delegate void glGetTexEnvxvOES(int target, int pname, IntPtr* _params);
        public delegate void glGetTexFilterFuncSGIS(int target, int filter, float* weights);
        public delegate void glGetTexGendv(int coord, int pname, double* _params);
        public delegate void glGetTexGenfv(int coord, int pname, float* _params);
        public delegate void glGetTexGenfvOES(int coord, int pname, float* _params);
        public delegate void glGetTexGeniv(int coord, int pname, int* _params);
        public delegate void glGetTexGenivOES(int coord, int pname, int* _params);
        public delegate void glGetTexGenxvOES(int coord, int pname, IntPtr* _params);
        public delegate void glGetTexImage(int target, int level, int format, int type, IntPtr pixels);
        public delegate void glGetTexLevelParameterfv(int target, int level, int pname, float* _params);
        public delegate void glGetTexLevelParameteriv(int target, int level, int pname, int* _params);
        public delegate void glGetTexLevelParameterxvOES(int target, int level, int pname, IntPtr* _params);
        public delegate void glGetTexParameterIiv(int target, int pname, int* _params);
        public delegate void glGetTexParameterIivEXT(int target, int pname, int* _params);
        public delegate void glGetTexParameterIivOES(int target, int pname, int* _params);
        public delegate void glGetTexParameterIuiv(int target, int pname, uint* _params);
        public delegate void glGetTexParameterIuivEXT(int target, int pname, uint* _params);
        public delegate void glGetTexParameterIuivOES(int target, int pname, uint* _params);
        public delegate void glGetTexParameterPointervAPPLE(int target, int pname, IntPtr* _params);
        public delegate void glGetTexParameterfv(int target, int pname, float* _params);
        public delegate void glGetTexParameteriv(int target, int pname, int* _params);
        public delegate void glGetTexParameterxv(int target, int pname, IntPtr* _params);
        public delegate void glGetTexParameterxvOES(int target, int pname, IntPtr* _params);
        public delegate ulong glGetTextureHandleARB(uint texture);
        public delegate ulong glGetTextureHandleIMG(uint texture);
        public delegate ulong glGetTextureHandleNV(uint texture);
        public delegate void glGetTextureImage(uint texture, int level, int format, int type, int bufSize, IntPtr pixels);
        public delegate void glGetTextureImageEXT(uint texture, int target, int level, int format, int type, IntPtr pixels);
        public delegate void glGetTextureLevelParameterfv(uint texture, int level, int pname, float* _params);
        public delegate void glGetTextureLevelParameterfvEXT(uint texture, int target, int level, int pname, float* _params);
        public delegate void glGetTextureLevelParameteriv(uint texture, int level, int pname, int* _params);
        public delegate void glGetTextureLevelParameterivEXT(uint texture, int target, int level, int pname, int* _params);
        public delegate void glGetTextureParameterIiv(uint texture, int pname, int* _params);
        public delegate void glGetTextureParameterIivEXT(uint texture, int target, int pname, int* _params);
        public delegate void glGetTextureParameterIuiv(uint texture, int pname, uint* _params);
        public delegate void glGetTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params);
        public delegate void glGetTextureParameterfv(uint texture, int pname, float* _params);
        public delegate void glGetTextureParameterfvEXT(uint texture, int target, int pname, float* _params);
        public delegate void glGetTextureParameteriv(uint texture, int pname, int* _params);
        public delegate void glGetTextureParameterivEXT(uint texture, int target, int pname, int* _params);
        public delegate ulong glGetTextureSamplerHandleARB(uint texture, uint sampler);
        public delegate ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler);
        public delegate ulong glGetTextureSamplerHandleNV(uint texture, uint sampler);
        public delegate void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, IntPtr pixels);
        public delegate void glGetTrackMatrixivNV(int target, uint address, int pname, int* _params);
        public delegate void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);
        public delegate void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location);
        public delegate void glGetTransformFeedbacki64_v(uint xfb, int pname, uint index, long* param);
        public delegate void glGetTransformFeedbacki_v(uint xfb, int pname, uint index, int* param);
        public delegate void glGetTransformFeedbackiv(uint xfb, int pname, int* param);
        public delegate void glGetTranslatedShaderSourceANGLE(uint shader, int bufsize, int* length, StringBuilder source);
        public delegate uint glGetUniformBlockIndex(uint program, string uniformBlockName);
        public delegate int glGetUniformBufferSizeEXT(uint program, int location);
        public delegate void glGetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint* uniformIndices);
        public delegate int glGetUniformLocation(uint program, string name);
        public delegate int glGetUniformLocationARB(uint programObj, string name);
        public delegate uint glGetUniformOffsetEXT(uint program, int location);
        public delegate void glGetUniformSubroutineuiv(int shadertype, int location, uint* _params);
        public delegate void glGetUniformdv(uint program, int location, double* _params);
        public delegate void glGetUniformfv(uint program, int location, float* _params);
        public delegate void glGetUniformfvARB(uint programObj, int location, float* _params);
        public delegate void glGetUniformi64vARB(uint program, int location, long* _params);
        public delegate void glGetUniformi64vNV(uint program, int location, long* _params);
        public delegate void glGetUniformiv(uint program, int location, int* _params);
        public delegate void glGetUniformivARB(uint programObj, int location, int* _params);
        public delegate void glGetUniformui64vARB(uint program, int location, ulong* _params);
        public delegate void glGetUniformui64vNV(uint program, int location, ulong* _params);
        public delegate void glGetUniformuiv(uint program, int location, uint* _params);
        public delegate void glGetUniformuivEXT(uint program, int location, uint* _params);
        public delegate void glGetUnsignedBytevEXT(int pname, byte* data);
        public delegate void glGetUnsignedBytei_vEXT(int target, uint index, byte* data);
        public delegate void glGetVariantArrayObjectfvATI(uint id, int pname, float* _params);
        public delegate void glGetVariantArrayObjectivATI(uint id, int pname, int* _params);
        public delegate void glGetVariantBooleanvEXT(uint id, int value, bool* data);
        public delegate void glGetVariantFloatvEXT(uint id, int value, float* data);
        public delegate void glGetVariantIntegervEXT(uint id, int value, int* data);
        public delegate void glGetVariantPointervEXT(uint id, int value, IntPtr* data);
        public delegate int glGetVaryingLocationNV(uint program, string name);
        public delegate void glGetVertexArrayIndexed64iv(uint vaobj, uint index, int pname, long* param);
        public delegate void glGetVertexArrayIndexediv(uint vaobj, uint index, int pname, int* param);
        public delegate void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, int pname, int* param);
        public delegate void glGetVertexArrayIntegervEXT(uint vaobj, int pname, int* param);
        public delegate void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, int pname, IntPtr* param);
        public delegate void glGetVertexArrayPointervEXT(uint vaobj, int pname, IntPtr* param);
        public delegate void glGetVertexArrayiv(uint vaobj, int pname, int* param);
        public delegate void glGetVertexAttribArrayObjectfvATI(uint index, int pname, float* _params);
        public delegate void glGetVertexAttribArrayObjectivATI(uint index, int pname, int* _params);
        public delegate void glGetVertexAttribIiv(uint index, int pname, int* _params);
        public delegate void glGetVertexAttribIivEXT(uint index, int pname, int* _params);
        public delegate void glGetVertexAttribIuiv(uint index, int pname, uint* _params);
        public delegate void glGetVertexAttribIuivEXT(uint index, int pname, uint* _params);
        public delegate void glGetVertexAttribLdv(uint index, int pname, double* _params);
        public delegate void glGetVertexAttribLdvEXT(uint index, int pname, double* _params);
        public delegate void glGetVertexAttribLi64vNV(uint index, int pname, long* _params);
        public delegate void glGetVertexAttribLui64vARB(uint index, int pname, ulong* _params);
        public delegate void glGetVertexAttribLui64vNV(uint index, int pname, ulong* _params);
        public delegate void glGetVertexAttribPointerv(uint index, int pname, IntPtr* pointer);
        public delegate void glGetVertexAttribPointervARB(uint index, int pname, IntPtr* pointer);
        public delegate void glGetVertexAttribPointervNV(uint index, int pname, IntPtr* pointer);
        public delegate void glGetVertexAttribdv(uint index, int pname, double* _params);
        public delegate void glGetVertexAttribdvARB(uint index, int pname, double* _params);
        public delegate void glGetVertexAttribdvNV(uint index, int pname, double* _params);
        public delegate void glGetVertexAttribfv(uint index, int pname, float* _params);
        public delegate void glGetVertexAttribfvARB(uint index, int pname, float* _params);
        public delegate void glGetVertexAttribfvNV(uint index, int pname, float* _params);
        public delegate void glGetVertexAttribiv(uint index, int pname, int* _params);
        public delegate void glGetVertexAttribivARB(uint index, int pname, int* _params);
        public delegate void glGetVertexAttribivNV(uint index, int pname, int* _params);
        public delegate void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, double* _params);
        public delegate void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, float* _params);
        public delegate void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, int* _params);
        public delegate void glGetVideoCaptureivNV(uint video_capture_slot, int pname, int* _params);
        public delegate void glGetVideoi64vNV(uint video_slot, int pname, long* _params);
        public delegate void glGetVideoivNV(uint video_slot, int pname, int* _params);
        public delegate void glGetVideoui64vNV(uint video_slot, int pname, ulong* _params);
        public delegate void glGetVideouivNV(uint video_slot, int pname, uint* _params);
        public delegate void glGetnColorTable(int target, int format, int type, int bufSize, IntPtr table);
        public delegate void glGetnColorTableARB(int target, int format, int type, int bufSize, IntPtr table);
        public delegate void glGetnCompressedTexImage(int target, int lod, int bufSize, IntPtr pixels);
        public delegate void glGetnCompressedTexImageARB(int target, int lod, int bufSize, IntPtr img);
        public delegate void glGetnConvolutionFilter(int target, int format, int type, int bufSize, IntPtr image);
        public delegate void glGetnConvolutionFilterARB(int target, int format, int type, int bufSize, IntPtr image);
        public delegate void glGetnHistogram(int target, bool reset, int format, int type, int bufSize, IntPtr values);
        public delegate void glGetnHistogramARB(int target, bool reset, int format, int type, int bufSize, IntPtr values);
        public delegate void glGetnMapdv(int target, int query, int bufSize, double* v);
        public delegate void glGetnMapdvARB(int target, int query, int bufSize, double* v);
        public delegate void glGetnMapfv(int target, int query, int bufSize, float* v);
        public delegate void glGetnMapfvARB(int target, int query, int bufSize, float* v);
        public delegate void glGetnMapiv(int target, int query, int bufSize, int* v);
        public delegate void glGetnMapivARB(int target, int query, int bufSize, int* v);
        public delegate void glGetnMinmax(int target, bool reset, int format, int type, int bufSize, IntPtr values);
        public delegate void glGetnMinmaxARB(int target, bool reset, int format, int type, int bufSize, IntPtr values);
        public delegate void glGetnPixelMapfv(int map, int bufSize, float* values);
        public delegate void glGetnPixelMapfvARB(int map, int bufSize, float* values);
        public delegate void glGetnPixelMapuiv(int map, int bufSize, uint* values);
        public delegate void glGetnPixelMapuivARB(int map, int bufSize, uint* values);
        public delegate void glGetnPixelMapusv(int map, int bufSize, ushort* values);
        public delegate void glGetnPixelMapusvARB(int map, int bufSize, ushort* values);
        public delegate void glGetnPolygonStipple(int bufSize, byte* pattern);
        public delegate void glGetnPolygonStippleARB(int bufSize, byte* pattern);
        public delegate void glGetnSeparableFilter(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span);
        public delegate void glGetnSeparableFilterARB(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span);
        public delegate void glGetnTexImage(int target, int level, int format, int type, uint bufSize, IntPtr pixels);
        public delegate void glGetnTexImageARB(int target, int level, int format, int type, uint bufSize, IntPtr img);
        public delegate void glGetnUniformdv(uint program, int location, int bufSize, double* _params);
        public delegate void glGetnUniformdvARB(uint program, int location, int bufSize, double* _params);
        public delegate void glGetnUniformfv(uint program, int location, int bufSize, float* _params);
        public delegate void glGetnUniformfvARB(uint program, int location, int bufSize, float* _params);
        public delegate void glGetnUniformfvEXT(uint program, int location, int bufSize, float* _params);
        public delegate void glGetnUniformfvKHR(uint program, int location, int bufSize, float* _params);
        public delegate void glGetnUniformi64vARB(uint program, int location, int bufSize, long* _params);
        public delegate void glGetnUniformiv(uint program, int location, int bufSize, int* _params);
        public delegate void glGetnUniformivARB(uint program, int location, int bufSize, int* _params);
        public delegate void glGetnUniformivEXT(uint program, int location, int bufSize, int* _params);
        public delegate void glGetnUniformivKHR(uint program, int location, int bufSize, int* _params);
        public delegate void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* _params);
        public delegate void glGetnUniformuiv(uint program, int location, int bufSize, uint* _params);
        public delegate void glGetnUniformuivARB(uint program, int location, int bufSize, uint* _params);
        public delegate void glGetnUniformuivKHR(uint program, int location, int bufSize, uint* _params);
        public delegate void glGlobalAlphaFactorbSUN(sbyte factor);
        public delegate void glGlobalAlphaFactordSUN(double factor);
        public delegate void glGlobalAlphaFactorfSUN(float factor);
        public delegate void glGlobalAlphaFactoriSUN(int factor);
        public delegate void glGlobalAlphaFactorsSUN(short factor);
        public delegate void glGlobalAlphaFactorubSUN(byte factor);
        public delegate void glGlobalAlphaFactoruiSUN(uint factor);
        public delegate void glGlobalAlphaFactorusSUN(ushort factor);
        public delegate void glHint(int target, int mode);
        public delegate void glHintPGI(int target, int mode);
        public delegate void glHistogram(int target, int width, int internalformat, bool sink);
        public delegate void glHistogramEXT(int target, int width, int internalformat, bool sink);
        public delegate void glIglooInterfaceSGIX(int pname, IntPtr _params);
        public delegate void glImageTransformParameterfHP(int target, int pname, float param);
        public delegate void glImageTransformParameterfvHP(int target, int pname, float* _params);
        public delegate void glImageTransformParameteriHP(int target, int pname, int param);
        public delegate void glImageTransformParameterivHP(int target, int pname, int* _params);
        public delegate void glImportMemoryFdEXT(uint memory, ulong size, int handleType, int fd);
        public delegate void glImportMemoryWin32HandleEXT(uint memory, ulong size, int handleType, IntPtr handle);
        public delegate void glImportMemoryWin32NameEXT(uint memory, ulong size, int handleType, IntPtr name);
        public delegate void glImportSemaphoreFdEXT(uint semaphore, int handleType, int fd);
        public delegate void glImportSemaphoreWin32HandleEXT(uint semaphore, int handleType, IntPtr handle);
        public delegate void glImportSemaphoreWin32NameEXT(uint semaphore, int handleType, IntPtr name);
        public delegate IntPtr glImportSyncEXT(int external_sync_type, uint external_sync, uint flags);
        public delegate void glIndexFormatNV(int type, int stride);
        public delegate void glIndexFuncEXT(int func, float _ref);
        public delegate void glIndexMask(uint mask);
        public delegate void glIndexMaterialEXT(int face, int mode);
        public delegate void glIndexPointer(int type, int stride, IntPtr pointer);
        public delegate void glIndexPointerEXT(int type, int stride, int count, IntPtr pointer);
        public delegate void glIndexPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glIndexd(double c);
        public delegate void glIndexdv(double* c);
        public delegate void glIndexf(float c);
        public delegate void glIndexfv(float* c);
        public delegate void glIndexi(int c);
        public delegate void glIndexiv(int* c);
        public delegate void glIndexs(short c);
        public delegate void glIndexsv(short* c);
        public delegate void glIndexub(byte c);
        public delegate void glIndexubv(byte* c);
        public delegate void glIndexxOES(IntPtr component);
        public delegate void glIndexxvOES(IntPtr* component);
        public delegate void glInitNames();
        public delegate void glInsertComponentEXT(uint res, uint src, uint num);
        public delegate void glInsertEventMarkerEXT(int length, string marker);
        public delegate void glInstrumentsBufferSGIX(int size, int* buffer);
        public delegate void glInterleavedArrays(int format, int stride, IntPtr pointer);
        public delegate void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);
        public delegate void glInvalidateBufferData(uint buffer);
        public delegate void glInvalidateBufferSubData(uint buffer, uint offset, uint length);
        public delegate void glInvalidateFramebuffer(int target, int numAttachments, uint* attachments);
        public delegate void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments);
        public delegate void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height);
        public delegate void glInvalidateSubFramebuffer(int target, int numAttachments, uint* attachments, int x, int y, int width, int height);
        public delegate void glInvalidateTexImage(uint texture, int level);
        public delegate void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        public delegate bool glIsAsyncMarkerSGIX(uint marker);
        public delegate bool glIsBuffer(uint buffer);
        public delegate bool glIsBufferARB(uint buffer);
        public delegate bool glIsBufferResidentNV(int target);
        public delegate bool glIsCommandListNV(uint list);
        public delegate bool glIsEnabled(int cap);
        public delegate bool glIsEnabledIndexedEXT(int target, uint index);
        public delegate bool glIsEnabledi(int target, uint index);
        public delegate bool glIsEnablediEXT(int target, uint index);
        public delegate bool glIsEnablediNV(int target, uint index);
        public delegate bool glIsEnablediOES(int target, uint index);
        public delegate bool glIsFenceAPPLE(uint fence);
        public delegate bool glIsFenceNV(uint fence);
        public delegate bool glIsFramebuffer(uint framebuffer);
        public delegate bool glIsFramebufferEXT(uint framebuffer);
        public delegate bool glIsFramebufferOES(uint framebuffer);
        public delegate bool glIsImageHandleResidentARB(ulong handle);
        public delegate bool glIsImageHandleResidentNV(ulong handle);
        public delegate bool glIsList(uint list);
        public delegate bool glIsMemoryObjectEXT(uint memoryObject);
        public delegate bool glIsNameAMD(int identifier, uint name);
        public delegate bool glIsNamedBufferResidentNV(uint buffer);
        public delegate bool glIsNamedStringARB(int namelen, string name);
        public delegate bool glIsObjectBufferATI(uint buffer);
        public delegate bool glIsOcclusionQueryNV(uint id);
        public delegate bool glIsPathNV(uint path);
        public delegate bool glIsPointInFillPathNV(uint path, uint mask, float x, float y);
        public delegate bool glIsPointInStrokePathNV(uint path, float x, float y);
        public delegate bool glIsProgram(uint program);
        public delegate bool glIsProgramARB(uint program);
        public delegate bool glIsProgramNV(uint id);
        public delegate bool glIsProgramPipeline(uint pipeline);
        public delegate bool glIsProgramPipelineEXT(uint pipeline);
        public delegate bool glIsQuery(uint id);
        public delegate bool glIsQueryARB(uint id);
        public delegate bool glIsQueryEXT(uint id);
        public delegate bool glIsRenderbuffer(uint renderbuffer);
        public delegate bool glIsRenderbufferEXT(uint renderbuffer);
        public delegate bool glIsRenderbufferOES(uint renderbuffer);
        public delegate bool glIsSemaphoreEXT(uint semaphore);
        public delegate bool glIsSampler(uint sampler);
        public delegate bool glIsShader(uint shader);
        public delegate bool glIsStateNV(uint state);
        public delegate bool glIsSync(IntPtr sync);
        public delegate bool glIsSyncAPPLE(IntPtr sync);
        public delegate bool glIsTexture(uint texture);
        public delegate bool glIsTextureEXT(uint texture);
        public delegate bool glIsTextureHandleResidentARB(ulong handle);
        public delegate bool glIsTextureHandleResidentNV(ulong handle);
        public delegate bool glIsTransformFeedback(uint id);
        public delegate bool glIsTransformFeedbackNV(uint id);
        public delegate bool glIsVariantEnabledEXT(uint id, int cap);
        public delegate bool glIsVertexArray(uint array);
        public delegate bool glIsVertexArrayAPPLE(uint array);
        public delegate bool glIsVertexArrayOES(uint array);
        public delegate bool glIsVertexAttribEnabledAPPLE(uint index, int pname);
        public delegate void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
        public delegate void glLGPUInterlockNVX();
        public delegate void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glLabelObjectEXT(int type, uint _object, int length, string label);
        public delegate void glLightEnviSGIX(int pname, int param);
        public delegate void glLightModelf(int pname, float param);
        public delegate void glLightModelfv(int pname, float* _params);
        public delegate void glLightModeli(int pname, int param);
        public delegate void glLightModeliv(int pname, int* _params);
        public delegate void glLightModelx(int pname, IntPtr param);
        public delegate void glLightModelxOES(int pname, IntPtr param);
        public delegate void glLightModelxv(int pname, IntPtr* param);
        public delegate void glLightModelxvOES(int pname, IntPtr* param);
        public delegate void glLightf(int light, int pname, float param);
        public delegate void glLightfv(int light, int pname, float* _params);
        public delegate void glLighti(int light, int pname, int param);
        public delegate void glLightiv(int light, int pname, int* _params);
        public delegate void glLightx(int light, int pname, IntPtr param);
        public delegate void glLightxOES(int light, int pname, IntPtr param);
        public delegate void glLightxv(int light, int pname, IntPtr* _params);
        public delegate void glLightxvOES(int light, int pname, IntPtr* _params);
        public delegate void glLineStipple(int factor, ushort pattern);
        public delegate void glLineWidth(float width);
        public delegate void glLineWidthx(IntPtr width);
        public delegate void glLineWidthxOES(IntPtr width);
        public delegate void glLinkProgram(uint program);
        public delegate void glLinkProgramARB(uint programObj);
        public delegate void glListBase(uint _base);
        public delegate void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count);
        public delegate void glListParameterfSGIX(uint list, int pname, float param);
        public delegate void glListParameterfvSGIX(uint list, int pname, float* _params);
        public delegate void glListParameteriSGIX(uint list, int pname, int param);
        public delegate void glListParameterivSGIX(uint list, int pname, int* _params);
        public delegate void glLoadIdentity();
        public delegate void glLoadIdentityDeformationMapSGIX(uint mask);
        public delegate void glLoadMatrixd(double* m);
        public delegate void glLoadMatrixf(float* m);
        public delegate void glLoadMatrixx(IntPtr* m);
        public delegate void glLoadMatrixxOES(IntPtr* m);
        public delegate void glLoadName(uint name);
        public delegate void glLoadPaletteFromModelViewMatrixOES();
        public delegate void glLoadProgramNV(int target, uint id, int len, byte* program);
        public delegate void glLoadTransposeMatrixd(double* m);
        public delegate void glLoadTransposeMatrixdARB(double* m);
        public delegate void glLoadTransposeMatrixf(float* m);
        public delegate void glLoadTransposeMatrixfARB(float* m);
        public delegate void glLoadTransposeMatrixxOES(IntPtr* m);
        public delegate void glLockArraysEXT(int first, int count);
        public delegate void glLogicOp(int opcode);
        public delegate void glMakeBufferNonResidentNV(int target);
        public delegate void glMakeBufferResidentNV(int target, int access);
        public delegate void glMakeImageHandleNonResidentARB(ulong handle);
        public delegate void glMakeImageHandleNonResidentNV(ulong handle);
        public delegate void glMakeImageHandleResidentARB(ulong handle, int access);
        public delegate void glMakeImageHandleResidentNV(ulong handle, int access);
        public delegate void glMakeNamedBufferNonResidentNV(uint buffer);
        public delegate void glMakeNamedBufferResidentNV(uint buffer, int access);
        public delegate void glMakeTextureHandleNonResidentARB(ulong handle);
        public delegate void glMakeTextureHandleNonResidentNV(ulong handle);
        public delegate void glMakeTextureHandleResidentARB(ulong handle);
        public delegate void glMakeTextureHandleResidentNV(ulong handle);
        public delegate void glMap1d(int target, double u1, double u2, int stride, int order, double* points);
        public delegate void glMap1f(int target, float u1, float u2, int stride, int order, float* points);
        public delegate void glMap1xOES(int target, IntPtr u1, IntPtr u2, int stride, int order, IntPtr points);
        public delegate void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);
        public delegate void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);
        public delegate void glMap2xOES(int target, IntPtr u1, IntPtr u2, int ustride, int uorder, IntPtr v1, IntPtr v2, int vstride, int vorder, IntPtr points);
        public delegate IntPtr glMapBuffer(int target, int access);
        public delegate IntPtr glMapBufferARB(int target, int access);
        public delegate IntPtr glMapBufferOES(int target, int access);
        public delegate IntPtr glMapBufferRange(int target, uint offset, uint length, uint access);
        public delegate IntPtr glMapBufferRangeEXT(int target, uint offset, uint length, uint access);
        public delegate void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points);
        public delegate void glMapGrid1d(int un, double u1, double u2);
        public delegate void glMapGrid1f(int un, float u1, float u2);
        public delegate void glMapGrid1xOES(int n, IntPtr u1, IntPtr u2);
        public delegate void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
        public delegate void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
        public delegate void glMapGrid2xOES(int n, IntPtr u1, IntPtr u2, IntPtr v1, IntPtr v2);
        public delegate IntPtr glMapNamedBuffer(uint buffer, int access);
        public delegate IntPtr glMapNamedBufferEXT(uint buffer, int access);
        public delegate IntPtr glMapNamedBufferRange(uint buffer, uint offset, uint length, uint access);
        public delegate IntPtr glMapNamedBufferRangeEXT(uint buffer, uint offset, uint length, uint access);
        public delegate IntPtr glMapObjectBufferATI(uint buffer);
        public delegate void glMapParameterfvNV(int target, int pname, float* _params);
        public delegate void glMapParameterivNV(int target, int pname, int* _params);
        public delegate IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, int* layout);
        public delegate void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points);
        public delegate void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points);
        public delegate void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);
        public delegate void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);
        public delegate void glMaterialf(int face, int pname, float param);
        public delegate void glMaterialfv(int face, int pname, float* _params);
        public delegate void glMateriali(int face, int pname, int param);
        public delegate void glMaterialiv(int face, int pname, int* _params);
        public delegate void glMaterialx(int face, int pname, IntPtr param);
        public delegate void glMaterialxOES(int face, int pname, IntPtr param);
        public delegate void glMaterialxv(int face, int pname, IntPtr* param);
        public delegate void glMaterialxvOES(int face, int pname, IntPtr* param);
        public delegate void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);
        public delegate void glMatrixIndexPointerARB(int size, int type, int stride, IntPtr pointer);
        public delegate void glMatrixIndexPointerOES(int size, int type, int stride, IntPtr pointer);
        public delegate void glMatrixIndexubvARB(int size, byte* indices);
        public delegate void glMatrixIndexuivARB(int size, uint* indices);
        public delegate void glMatrixIndexusvARB(int size, ushort* indices);
        public delegate void glMatrixLoad3x2fNV(int matrixMode, float* m);
        public delegate void glMatrixLoad3x3fNV(int matrixMode, float* m);
        public delegate void glMatrixLoadIdentityEXT(int mode);
        public delegate void glMatrixLoadTranspose3x3fNV(int matrixMode, float* m);
        public delegate void glMatrixLoadTransposedEXT(int mode, double* m);
        public delegate void glMatrixLoadTransposefEXT(int mode, float* m);
        public delegate void glMatrixLoaddEXT(int mode, double* m);
        public delegate void glMatrixLoadfEXT(int mode, float* m);
        public delegate void glMatrixMode(int mode);
        public delegate void glMatrixMult3x2fNV(int matrixMode, float* m);
        public delegate void glMatrixMult3x3fNV(int matrixMode, float* m);
        public delegate void glMatrixMultTranspose3x3fNV(int matrixMode, float* m);
        public delegate void glMatrixMultTransposedEXT(int mode, double* m);
        public delegate void glMatrixMultTransposefEXT(int mode, float* m);
        public delegate void glMatrixMultdEXT(int mode, double* m);
        public delegate void glMatrixMultfEXT(int mode, float* m);
        public delegate void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);
        public delegate void glMatrixPopEXT(int mode);
        public delegate void glMatrixPushEXT(int mode);
        public delegate void glMatrixRotatedEXT(int mode, double angle, double x, double y, double z);
        public delegate void glMatrixRotatefEXT(int mode, float angle, float x, float y, float z);
        public delegate void glMatrixScaledEXT(int mode, double x, double y, double z);
        public delegate void glMatrixScalefEXT(int mode, float x, float y, float z);
        public delegate void glMatrixTranslatedEXT(int mode, double x, double y, double z);
        public delegate void glMatrixTranslatefEXT(int mode, float x, float y, float z);
        public delegate void glMaxShaderCompilerThreadsKHR(uint count);
        public delegate void glMaxShaderCompilerThreadsARB(uint count);
        public delegate void glMemoryBarrier(uint barriers);
        public delegate void glMemoryBarrierByRegion(uint barriers);
        public delegate void glMemoryBarrierEXT(uint barriers);
        public delegate void glMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params);
        public delegate void glMinSampleShading(float value);
        public delegate void glMinSampleShadingARB(float value);
        public delegate void glMinSampleShadingOES(float value);
        public delegate void glMinmax(int target, int internalformat, bool sink);
        public delegate void glMinmaxEXT(int target, int internalformat, bool sink);
        public delegate void glMultMatrixd(double* m);
        public delegate void glMultMatrixf(float* m);
        public delegate void glMultMatrixx(IntPtr* m);
        public delegate void glMultMatrixxOES(IntPtr* m);
        public delegate void glMultTransposeMatrixd(double* m);
        public delegate void glMultTransposeMatrixdARB(double* m);
        public delegate void glMultTransposeMatrixf(float* m);
        public delegate void glMultTransposeMatrixfARB(float* m);
        public delegate void glMultTransposeMatrixxOES(IntPtr* m);
        public delegate void glMultiDrawArrays(int mode, int* first, int* count, int drawcount);
        public delegate void glMultiDrawArraysEXT(int mode, int* first, int* count, int primcount);
        public delegate void glMultiDrawArraysIndirect(int mode, IntPtr indirect, int drawcount, int stride);
        public delegate void glMultiDrawArraysIndirectAMD(int mode, IntPtr indirect, int primcount, int stride);
        public delegate void glMultiDrawArraysIndirectBindlessCountNV(int mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        public delegate void glMultiDrawArraysIndirectBindlessNV(int mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount);
        public delegate void glMultiDrawArraysIndirectCount(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride);
        public delegate void glMultiDrawArraysIndirectCountARB(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride);
        public delegate void glMultiDrawArraysIndirectEXT(int mode, IntPtr indirect, int drawcount, int stride);
        public delegate void glMultiDrawElementArrayAPPLE(int mode, int* first, int* count, int primcount);
        public delegate void glMultiDrawElements(int mode, int* count, int type, IntPtr* indices, int drawcount);
        public delegate void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr* indices, int drawcount, int* basevertex);
        public delegate void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr* indices, int primcount, int* basevertex);
        public delegate void glMultiDrawElementsEXT(int mode, int* count, int type, IntPtr* indices, int primcount);
        public delegate void glMultiDrawElementsIndirect(int mode, int type, IntPtr indirect, int drawcount, int stride);
        public delegate void glMultiDrawElementsIndirectAMD(int mode, int type, IntPtr indirect, int primcount, int stride);
        public delegate void glMultiDrawElementsIndirectBindlessCountNV(int mode, int type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        public delegate void glMultiDrawElementsIndirectBindlessNV(int mode, int type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount);
        public delegate void glMultiDrawElementsIndirectCount(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride);
        public delegate void glMultiDrawElementsIndirectCountARB(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride);
        public delegate void glMultiDrawElementsIndirectEXT(int mode, int type, IntPtr indirect, int drawcount, int stride);
        public delegate void glMultiDrawMeshTasksIndirectNV(uint indirect, int drawcount, int stride);
        public delegate void glMultiDrawMeshTasksIndirectCountNV(uint indirect, uint drawcount, int maxdrawcount, int stride);
        public delegate void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int* first, int* count, int primcount);
        public delegate void glMultiModeDrawArraysIBM(uint* mode, int* first, int* count, int primcount, int modestride);
        public delegate void glMultiModeDrawElementsIBM(uint* mode, int* count, int type, IntPtr* indices, int primcount, int modestride);
        public delegate void glMultiTexBufferEXT(int texunit, int target, int internalformat, uint buffer);
        public delegate void glMultiTexCoord1bOES(int texture, sbyte s);
        public delegate void glMultiTexCoord1bvOES(int texture, sbyte* coords);
        public delegate void glMultiTexCoord1d(int target, double s);
        public delegate void glMultiTexCoord1dARB(int target, double s);
        public delegate void glMultiTexCoord1dv(int target, double* v);
        public delegate void glMultiTexCoord1dvARB(int target, double* v);
        public delegate void glMultiTexCoord1f(int target, float s);
        public delegate void glMultiTexCoord1fARB(int target, float s);
        public delegate void glMultiTexCoord1fv(int target, float* v);
        public delegate void glMultiTexCoord1fvARB(int target, float* v);
        public delegate void glMultiTexCoord1hNV(int target, short s);
        public delegate void glMultiTexCoord1hvNV(int target, short* v);
        public delegate void glMultiTexCoord1i(int target, int s);
        public delegate void glMultiTexCoord1iARB(int target, int s);
        public delegate void glMultiTexCoord1iv(int target, int* v);
        public delegate void glMultiTexCoord1ivARB(int target, int* v);
        public delegate void glMultiTexCoord1s(int target, short s);
        public delegate void glMultiTexCoord1sARB(int target, short s);
        public delegate void glMultiTexCoord1sv(int target, short* v);
        public delegate void glMultiTexCoord1svARB(int target, short* v);
        public delegate void glMultiTexCoord1xOES(int texture, IntPtr s);
        public delegate void glMultiTexCoord1xvOES(int texture, IntPtr* coords);
        public delegate void glMultiTexCoord2bOES(int texture, sbyte s, sbyte t);
        public delegate void glMultiTexCoord2bvOES(int texture, sbyte* coords);
        public delegate void glMultiTexCoord2d(int target, double s, double t);
        public delegate void glMultiTexCoord2dARB(int target, double s, double t);
        public delegate void glMultiTexCoord2dv(int target, double* v);
        public delegate void glMultiTexCoord2dvARB(int target, double* v);
        public delegate void glMultiTexCoord2f(int target, float s, float t);
        public delegate void glMultiTexCoord2fARB(int target, float s, float t);
        public delegate void glMultiTexCoord2fv(int target, float* v);
        public delegate void glMultiTexCoord2fvARB(int target, float* v);
        public delegate void glMultiTexCoord2hNV(int target, short s, short t);
        public delegate void glMultiTexCoord2hvNV(int target, short* v);
        public delegate void glMultiTexCoord2i(int target, int s, int t);
        public delegate void glMultiTexCoord2iARB(int target, int s, int t);
        public delegate void glMultiTexCoord2iv(int target, int* v);
        public delegate void glMultiTexCoord2ivARB(int target, int* v);
        public delegate void glMultiTexCoord2s(int target, short s, short t);
        public delegate void glMultiTexCoord2sARB(int target, short s, short t);
        public delegate void glMultiTexCoord2sv(int target, short* v);
        public delegate void glMultiTexCoord2svARB(int target, short* v);
        public delegate void glMultiTexCoord2xOES(int texture, IntPtr s, IntPtr t);
        public delegate void glMultiTexCoord2xvOES(int texture, IntPtr* coords);
        public delegate void glMultiTexCoord3bOES(int texture, sbyte s, sbyte t, sbyte r);
        public delegate void glMultiTexCoord3bvOES(int texture, sbyte* coords);
        public delegate void glMultiTexCoord3d(int target, double s, double t, double r);
        public delegate void glMultiTexCoord3dARB(int target, double s, double t, double r);
        public delegate void glMultiTexCoord3dv(int target, double* v);
        public delegate void glMultiTexCoord3dvARB(int target, double* v);
        public delegate void glMultiTexCoord3f(int target, float s, float t, float r);
        public delegate void glMultiTexCoord3fARB(int target, float s, float t, float r);
        public delegate void glMultiTexCoord3fv(int target, float* v);
        public delegate void glMultiTexCoord3fvARB(int target, float* v);
        public delegate void glMultiTexCoord3hNV(int target, short s, short t, short r);
        public delegate void glMultiTexCoord3hvNV(int target, short* v);
        public delegate void glMultiTexCoord3i(int target, int s, int t, int r);
        public delegate void glMultiTexCoord3iARB(int target, int s, int t, int r);
        public delegate void glMultiTexCoord3iv(int target, int* v);
        public delegate void glMultiTexCoord3ivARB(int target, int* v);
        public delegate void glMultiTexCoord3s(int target, short s, short t, short r);
        public delegate void glMultiTexCoord3sARB(int target, short s, short t, short r);
        public delegate void glMultiTexCoord3sv(int target, short* v);
        public delegate void glMultiTexCoord3svARB(int target, short* v);
        public delegate void glMultiTexCoord3xOES(int texture, IntPtr s, IntPtr t, IntPtr r);
        public delegate void glMultiTexCoord3xvOES(int texture, IntPtr* coords);
        public delegate void glMultiTexCoord4bOES(int texture, sbyte s, sbyte t, sbyte r, sbyte q);
        public delegate void glMultiTexCoord4bvOES(int texture, sbyte* coords);
        public delegate void glMultiTexCoord4d(int target, double s, double t, double r, double q);
        public delegate void glMultiTexCoord4dARB(int target, double s, double t, double r, double q);
        public delegate void glMultiTexCoord4dv(int target, double* v);
        public delegate void glMultiTexCoord4dvARB(int target, double* v);
        public delegate void glMultiTexCoord4f(int target, float s, float t, float r, float q);
        public delegate void glMultiTexCoord4fARB(int target, float s, float t, float r, float q);
        public delegate void glMultiTexCoord4fv(int target, float* v);
        public delegate void glMultiTexCoord4fvARB(int target, float* v);
        public delegate void glMultiTexCoord4hNV(int target, short s, short t, short r, short q);
        public delegate void glMultiTexCoord4hvNV(int target, short* v);
        public delegate void glMultiTexCoord4i(int target, int s, int t, int r, int q);
        public delegate void glMultiTexCoord4iARB(int target, int s, int t, int r, int q);
        public delegate void glMultiTexCoord4iv(int target, int* v);
        public delegate void glMultiTexCoord4ivARB(int target, int* v);
        public delegate void glMultiTexCoord4s(int target, short s, short t, short r, short q);
        public delegate void glMultiTexCoord4sARB(int target, short s, short t, short r, short q);
        public delegate void glMultiTexCoord4sv(int target, short* v);
        public delegate void glMultiTexCoord4svARB(int target, short* v);
        public delegate void glMultiTexCoord4x(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q);
        public delegate void glMultiTexCoord4xOES(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q);
        public delegate void glMultiTexCoord4xvOES(int texture, IntPtr* coords);
        public delegate void glMultiTexCoordP1ui(int texture, int type, uint coords);
        public delegate void glMultiTexCoordP1uiv(int texture, int type, uint* coords);
        public delegate void glMultiTexCoordP2ui(int texture, int type, uint coords);
        public delegate void glMultiTexCoordP2uiv(int texture, int type, uint* coords);
        public delegate void glMultiTexCoordP3ui(int texture, int type, uint coords);
        public delegate void glMultiTexCoordP3uiv(int texture, int type, uint* coords);
        public delegate void glMultiTexCoordP4ui(int texture, int type, uint coords);
        public delegate void glMultiTexCoordP4uiv(int texture, int type, uint* coords);
        public delegate void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, IntPtr pointer);
        public delegate void glMultiTexEnvfEXT(int texunit, int target, int pname, float param);
        public delegate void glMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params);
        public delegate void glMultiTexEnviEXT(int texunit, int target, int pname, int param);
        public delegate void glMultiTexEnvivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glMultiTexGendEXT(int texunit, int coord, int pname, double param);
        public delegate void glMultiTexGendvEXT(int texunit, int coord, int pname, double* _params);
        public delegate void glMultiTexGenfEXT(int texunit, int coord, int pname, float param);
        public delegate void glMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params);
        public delegate void glMultiTexGeniEXT(int texunit, int coord, int pname, int param);
        public delegate void glMultiTexGenivEXT(int texunit, int coord, int pname, int* _params);
        public delegate void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels);
        public delegate void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels);
        public delegate void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        public delegate void glMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params);
        public delegate void glMultiTexParameterfEXT(int texunit, int target, int pname, float param);
        public delegate void glMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params);
        public delegate void glMultiTexParameteriEXT(int texunit, int target, int pname, int param);
        public delegate void glMultiTexParameterivEXT(int texunit, int target, int pname, int* _params);
        public delegate void glMultiTexRenderbufferEXT(int texunit, int target, uint renderbuffer);
        public delegate void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);
        public delegate void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glMulticastBarrierNV();
        public delegate void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        public delegate void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size);
        public delegate void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        public delegate void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v);
        public delegate void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long* _params);
        public delegate void glMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int* _params);
        public delegate void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong* _params);
        public delegate void glMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint* _params);
        public delegate void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask);
        public delegate void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset);
        public delegate void glNamedBufferData(uint buffer, uint size, IntPtr data, int usage);
        public delegate void glNamedBufferDataEXT(uint buffer, uint size, IntPtr data, int usage);
        public delegate void glNamedBufferPageCommitmentARB(uint buffer, uint offset, uint size, bool commit);
        public delegate void glNamedBufferPageCommitmentEXT(uint buffer, uint offset, uint size, bool commit);
        public delegate void glNamedBufferStorage(uint buffer, uint size, IntPtr data, uint flags);
        public delegate void glNamedBufferStorageExternalEXT(uint buffer, uint offset, uint size, IntPtr clientBuffer, uint flags);
        public delegate void glNamedBufferStorageEXT(uint buffer, uint size, IntPtr data, uint flags);
        public delegate void glNamedBufferStorageMemEXT(uint buffer, uint size, uint memory, ulong offset);
        public delegate void glNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data);
        public delegate void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size);
        public delegate void glNamedFramebufferDrawBuffer(uint framebuffer, int buf);
        public delegate void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs);
        public delegate void glNamedFramebufferParameteri(uint framebuffer, int pname, int param);
        public delegate void glNamedFramebufferParameteriEXT(uint framebuffer, int pname, int param);
        public delegate void glNamedFramebufferReadBuffer(uint framebuffer, int src);
        public delegate void glNamedFramebufferRenderbuffer(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer);
        public delegate void glNamedFramebufferRenderbufferEXT(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer);
        public delegate void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v);
        public delegate void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v);
        public delegate void glNamedFramebufferTexture(uint framebuffer, int attachment, uint texture, int level);
        public delegate void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values);
        public delegate void glNamedFramebufferTexture1DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level);
        public delegate void glNamedFramebufferTexture2DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level);
        public delegate void glNamedFramebufferTexture3DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level, int zoffset);
        public delegate void glNamedFramebufferTextureEXT(uint framebuffer, int attachment, uint texture, int level);
        public delegate void glNamedFramebufferTextureFaceEXT(uint framebuffer, int attachment, uint texture, int level, int face);
        public delegate void glNamedFramebufferTextureLayer(uint framebuffer, int attachment, uint texture, int level, int layer);
        public delegate void glNamedFramebufferTextureLayerEXT(uint framebuffer, int attachment, uint texture, int level, int layer);
        public delegate void glNamedProgramLocalParameter4dEXT(uint program, int target, uint index, double x, double y, double z, double w);
        public delegate void glNamedProgramLocalParameter4dvEXT(uint program, int target, uint index, double* _params);
        public delegate void glNamedProgramLocalParameter4fEXT(uint program, int target, uint index, float x, float y, float z, float w);
        public delegate void glNamedProgramLocalParameter4fvEXT(uint program, int target, uint index, float* _params);
        public delegate void glNamedProgramLocalParameterI4iEXT(uint program, int target, uint index, int x, int y, int z, int w);
        public delegate void glNamedProgramLocalParameterI4ivEXT(uint program, int target, uint index, int* _params);
        public delegate void glNamedProgramLocalParameterI4uiEXT(uint program, int target, uint index, uint x, uint y, uint z, uint w);
        public delegate void glNamedProgramLocalParameterI4uivEXT(uint program, int target, uint index, uint* _params);
        public delegate void glNamedProgramLocalParameters4fvEXT(uint program, int target, uint index, int count, float* _params);
        public delegate void glNamedProgramLocalParametersI4ivEXT(uint program, int target, uint index, int count, int* _params);
        public delegate void glNamedProgramLocalParametersI4uivEXT(uint program, int target, uint index, int count, uint* _params);
        public delegate void glNamedProgramStringEXT(uint program, int target, int format, int len, IntPtr _string);
        public delegate void glNamedRenderbufferStorage(uint renderbuffer, int internalformat, int width, int height);
        public delegate void glNamedRenderbufferStorageEXT(uint renderbuffer, int internalformat, int width, int height);
        public delegate void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, int internalformat, int width, int height);
        public delegate void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, int internalformat, int width, int height);
        public delegate void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height);
        public delegate void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, int internalformat, int width, int height);
        public delegate void glNamedStringARB(int type, int namelen, string name, int stringlen, string _string);
        public delegate void glNewList(uint list, int mode);
        public delegate uint glNewObjectBufferATI(int size, IntPtr pointer, int usage);
        public delegate void glNormal3b(sbyte nx, sbyte ny, sbyte nz);
        public delegate void glNormal3bv(sbyte* v);
        public delegate void glNormal3d(double nx, double ny, double nz);
        public delegate void glNormal3dv(double* v);
        public delegate void glNormal3f(float nx, float ny, float nz);
        public delegate void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);
        public delegate void glNormal3fVertex3fvSUN(float* n, float* v);
        public delegate void glNormal3fv(float* v);
        public delegate void glNormal3hNV(short nx, short ny, short nz);
        public delegate void glNormal3hvNV(short* v);
        public delegate void glNormal3i(int nx, int ny, int nz);
        public delegate void glNormal3iv(int* v);
        public delegate void glNormal3s(short nx, short ny, short nz);
        public delegate void glNormal3sv(short* v);
        public delegate void glNormal3x(IntPtr nx, IntPtr ny, IntPtr nz);
        public delegate void glNormal3xOES(IntPtr nx, IntPtr ny, IntPtr nz);
        public delegate void glNormal3xvOES(IntPtr* coords);
        public delegate void glNormalFormatNV(int type, int stride);
        public delegate void glNormalP3ui(int type, uint coords);
        public delegate void glNormalP3uiv(int type, uint* coords);
        public delegate void glNormalPointer(int type, int stride, IntPtr pointer);
        public delegate void glNormalPointerEXT(int type, int stride, int count, IntPtr pointer);
        public delegate void glNormalPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glNormalPointervINTEL(int type, IntPtr* pointer);
        public delegate void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, sbyte nz);
        public delegate void glNormalStream3bvATI(int stream, sbyte* coords);
        public delegate void glNormalStream3dATI(int stream, double nx, double ny, double nz);
        public delegate void glNormalStream3dvATI(int stream, double* coords);
        public delegate void glNormalStream3fATI(int stream, float nx, float ny, float nz);
        public delegate void glNormalStream3fvATI(int stream, float* coords);
        public delegate void glNormalStream3iATI(int stream, int nx, int ny, int nz);
        public delegate void glNormalStream3ivATI(int stream, int* coords);
        public delegate void glNormalStream3sATI(int stream, short nx, short ny, short nz);
        public delegate void glNormalStream3svATI(int stream, short* coords);
        public delegate void glObjectLabel(int identifier, uint name, int length, string label);
        public delegate void glObjectLabelKHR(int identifier, uint name, int length, string label);
        public delegate void glObjectPtrLabel(IntPtr ptr, int length, string label);
        public delegate void glObjectPtrLabelKHR(IntPtr ptr, int length, string label);
        public delegate int glObjectPurgeableAPPLE(int objectType, uint name, int option);
        public delegate int glObjectUnpurgeableAPPLE(int objectType, uint name, int option);
        public delegate void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);
        public delegate void glOrthof(float l, float r, float b, float t, float n, float f);
        public delegate void glOrthofOES(float l, float r, float b, float t, float n, float f);
        public delegate void glOrthox(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f);
        public delegate void glOrthoxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f);
        public delegate void glPNTrianglesfATI(int pname, float param);
        public delegate void glPNTrianglesiATI(int pname, int param);
        public delegate void glPassTexCoordATI(uint dst, uint coord, int swizzle);
        public delegate void glPassThrough(float token);
        public delegate void glPassThroughxOES(IntPtr token);
        public delegate void glPatchParameterfv(int pname, float* values);
        public delegate void glPatchParameteri(int pname, int value);
        public delegate void glPatchParameteriEXT(int pname, int value);
        public delegate void glPatchParameteriOES(int pname, int value);
        public delegate void glPathColorGenNV(int color, int genMode, int colorFormat, float* coeffs);
        public delegate void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords);
        public delegate void glPathCoordsNV(uint path, int numCoords, int coordType, IntPtr coords);
        public delegate void glPathCoverDepthFuncNV(int func);
        public delegate void glPathDashArrayNV(uint path, int dashCount, float* dashArray);
        public delegate void glPathFogGenNV(int genMode);
        public delegate int glPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        public delegate int glPathGlyphIndexRangeNV(int fontTarget, IntPtr fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount);
        public delegate void glPathGlyphRangeNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        public delegate void glPathGlyphsNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, int type, IntPtr charcodes, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        public delegate int glPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        public delegate void glPathParameterfNV(uint path, int pname, float value);
        public delegate void glPathParameterfvNV(uint path, int pname, float* value);
        public delegate void glPathParameteriNV(uint path, int pname, int value);
        public delegate void glPathParameterivNV(uint path, int pname, int* value);
        public delegate void glPathStencilDepthOffsetNV(float factor, float units);
        public delegate void glPathStencilFuncNV(int func, int _ref, uint mask);
        public delegate void glPathStringNV(uint path, int format, int length, IntPtr pathString);
        public delegate void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords);
        public delegate void glPathSubCoordsNV(uint path, int coordStart, int numCoords, int coordType, IntPtr coords);
        public delegate void glPathTexGenNV(int texCoordSet, int genMode, int components, float* coeffs);
        public delegate void glPauseTransformFeedback();
        public delegate void glPauseTransformFeedbackNV();
        public delegate void glPixelDataRangeNV(int target, int length, IntPtr pointer);
        public delegate void glPixelMapfv(int map, int mapsize, float* values);
        public delegate void glPixelMapuiv(int map, int mapsize, uint* values);
        public delegate void glPixelMapusv(int map, int mapsize, ushort* values);
        public delegate void glPixelMapx(int map, int size, IntPtr* values);
        public delegate void glPixelStoref(int pname, float param);
        public delegate void glPixelStorei(int pname, int param);
        public delegate void glPixelStorex(int pname, IntPtr param);
        public delegate void glPixelTexGenParameterfSGIS(int pname, float param);
        public delegate void glPixelTexGenParameterfvSGIS(int pname, float* _params);
        public delegate void glPixelTexGenParameteriSGIS(int pname, int param);
        public delegate void glPixelTexGenParameterivSGIS(int pname, int* _params);
        public delegate void glPixelTexGenSGIX(int mode);
        public delegate void glPixelTransferf(int pname, float param);
        public delegate void glPixelTransferi(int pname, int param);
        public delegate void glPixelTransferxOES(int pname, IntPtr param);
        public delegate void glPixelTransformParameterfEXT(int target, int pname, float param);
        public delegate void glPixelTransformParameterfvEXT(int target, int pname, float* _params);
        public delegate void glPixelTransformParameteriEXT(int target, int pname, int param);
        public delegate void glPixelTransformParameterivEXT(int target, int pname, int* _params);
        public delegate void glPixelZoom(float xfactor, float yfactor);
        public delegate void glPixelZoomxOES(IntPtr xfactor, IntPtr yfactor);
        public delegate bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);
        public delegate void glPointParameterf(int pname, float param);
        public delegate void glPointParameterfARB(int pname, float param);
        public delegate void glPointParameterfEXT(int pname, float param);
        public delegate void glPointParameterfSGIS(int pname, float param);
        public delegate void glPointParameterfv(int pname, float* _params);
        public delegate void glPointParameterfvARB(int pname, float* _params);
        public delegate void glPointParameterfvEXT(int pname, float* _params);
        public delegate void glPointParameterfvSGIS(int pname, float* _params);
        public delegate void glPointParameteri(int pname, int param);
        public delegate void glPointParameteriNV(int pname, int param);
        public delegate void glPointParameteriv(int pname, int* _params);
        public delegate void glPointParameterivNV(int pname, int* _params);
        public delegate void glPointParameterx(int pname, IntPtr param);
        public delegate void glPointParameterxOES(int pname, IntPtr param);
        public delegate void glPointParameterxv(int pname, IntPtr* _params);
        public delegate void glPointParameterxvOES(int pname, IntPtr* _params);
        public delegate void glPointSize(float size);
        public delegate void glPointSizePointerOES(int type, int stride, IntPtr pointer);
        public delegate void glPointSizex(IntPtr size);
        public delegate void glPointSizexOES(IntPtr size);
        public delegate int glPollAsyncSGIX(uint* markerp);
        public delegate int glPollInstrumentsSGIX(int* marker_p);
        public delegate void glPolygonMode(int face, int mode);
        public delegate void glPolygonModeNV(int face, int mode);
        public delegate void glPolygonOffset(float factor, float units);
        public delegate void glPolygonOffsetClamp(float factor, float units, float clamp);
        public delegate void glPolygonOffsetClampEXT(float factor, float units, float clamp);
        public delegate void glPolygonOffsetEXT(float factor, float bias);
        public delegate void glPolygonOffsetx(IntPtr factor, IntPtr units);
        public delegate void glPolygonOffsetxOES(IntPtr factor, IntPtr units);
        public delegate void glPolygonStipple(byte* mask);
        public delegate void glPopAttrib();
        public delegate void glPopClientAttrib();
        public delegate void glPopDebugGroup();
        public delegate void glPopDebugGroupKHR();
        public delegate void glPopGroupMarkerEXT();
        public delegate void glPopMatrix();
        public delegate void glPopName();
        public delegate void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3);
        public delegate void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1);
        public delegate void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        public delegate void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        public delegate void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        public delegate void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        public delegate void glPrimitiveRestartIndex(uint index);
        public delegate void glPrimitiveRestartIndexNV(uint index);
        public delegate void glPrimitiveRestartNV();
        public delegate void glPrioritizeTextures(int n, uint* textures, float* priorities);
        public delegate void glPrioritizeTexturesEXT(int n, uint* textures, float* priorities);
        public delegate void glPrioritizeTexturesxOES(int n, uint* textures, IntPtr* priorities);
        public delegate void glProgramBinary(uint program, int binaryFormat, IntPtr binary, int length);
        public delegate void glProgramBinaryOES(uint program, int binaryFormat, IntPtr binary, int length);
        public delegate void glProgramBufferParametersIivNV(int target, uint bindingIndex, uint wordIndex, int count, int* _params);
        public delegate void glProgramBufferParametersIuivNV(int target, uint bindingIndex, uint wordIndex, int count, uint* _params);
        public delegate void glProgramBufferParametersfvNV(int target, uint bindingIndex, uint wordIndex, int count, float* _params);
        public delegate void glProgramEnvParameter4dARB(int target, uint index, double x, double y, double z, double w);
        public delegate void glProgramEnvParameter4dvARB(int target, uint index, double* _params);
        public delegate void glProgramEnvParameter4fARB(int target, uint index, float x, float y, float z, float w);
        public delegate void glProgramEnvParameter4fvARB(int target, uint index, float* _params);
        public delegate void glProgramEnvParameterI4iNV(int target, uint index, int x, int y, int z, int w);
        public delegate void glProgramEnvParameterI4ivNV(int target, uint index, int* _params);
        public delegate void glProgramEnvParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w);
        public delegate void glProgramEnvParameterI4uivNV(int target, uint index, uint* _params);
        public delegate void glProgramEnvParameters4fvEXT(int target, uint index, int count, float* _params);
        public delegate void glProgramEnvParametersI4ivNV(int target, uint index, int count, int* _params);
        public delegate void glProgramEnvParametersI4uivNV(int target, uint index, int count, uint* _params);
        public delegate void glProgramLocalParameter4dARB(int target, uint index, double x, double y, double z, double w);
        public delegate void glProgramLocalParameter4dvARB(int target, uint index, double* _params);
        public delegate void glProgramLocalParameter4fARB(int target, uint index, float x, float y, float z, float w);
        public delegate void glProgramLocalParameter4fvARB(int target, uint index, float* _params);
        public delegate void glProgramLocalParameterI4iNV(int target, uint index, int x, int y, int z, int w);
        public delegate void glProgramLocalParameterI4ivNV(int target, uint index, int* _params);
        public delegate void glProgramLocalParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w);
        public delegate void glProgramLocalParameterI4uivNV(int target, uint index, uint* _params);
        public delegate void glProgramLocalParameters4fvEXT(int target, uint index, int count, float* _params);
        public delegate void glProgramLocalParametersI4ivNV(int target, uint index, int count, int* _params);
        public delegate void glProgramLocalParametersI4uivNV(int target, uint index, int count, uint* _params);
        public delegate void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w);
        public delegate void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v);
        public delegate void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w);
        public delegate void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v);
        public delegate void glProgramParameter4dNV(int target, uint index, double x, double y, double z, double w);
        public delegate void glProgramParameter4dvNV(int target, uint index, double* v);
        public delegate void glProgramParameter4fNV(int target, uint index, float x, float y, float z, float w);
        public delegate void glProgramParameter4fvNV(int target, uint index, float* v);
        public delegate void glProgramParameteri(uint program, int pname, int value);
        public delegate void glProgramParameteriARB(uint program, int pname, int value);
        public delegate void glProgramParameteriEXT(uint program, int pname, int value);
        public delegate void glProgramParameters4dvNV(int target, uint index, int count, double* v);
        public delegate void glProgramParameters4fvNV(int target, uint index, int count, float* v);
        public delegate void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float* coeffs);
        public delegate void glProgramStringARB(int target, int format, int len, IntPtr _string);
        public delegate void glProgramSubroutineParametersuivNV(int target, int count, uint* _params);
        public delegate void glProgramUniform1d(uint program, int location, double v0);
        public delegate void glProgramUniform1dEXT(uint program, int location, double x);
        public delegate void glProgramUniform1dv(uint program, int location, int count, double* value);
        public delegate void glProgramUniform1dvEXT(uint program, int location, int count, double* value);
        public delegate void glProgramUniform1f(uint program, int location, float v0);
        public delegate void glProgramUniform1fEXT(uint program, int location, float v0);
        public delegate void glProgramUniform1fv(uint program, int location, int count, float* value);
        public delegate void glProgramUniform1fvEXT(uint program, int location, int count, float* value);
        public delegate void glProgramUniform1i(uint program, int location, int v0);
        public delegate void glProgramUniform1i64ARB(uint program, int location, long x);
        public delegate void glProgramUniform1i64NV(uint program, int location, long x);
        public delegate void glProgramUniform1i64vARB(uint program, int location, int count, long* value);
        public delegate void glProgramUniform1i64vNV(uint program, int location, int count, long* value);
        public delegate void glProgramUniform1iEXT(uint program, int location, int v0);
        public delegate void glProgramUniform1iv(uint program, int location, int count, int* value);
        public delegate void glProgramUniform1ivEXT(uint program, int location, int count, int* value);
        public delegate void glProgramUniform1ui(uint program, int location, uint v0);
        public delegate void glProgramUniform1ui64ARB(uint program, int location, ulong x);
        public delegate void glProgramUniform1ui64NV(uint program, int location, ulong x);
        public delegate void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform1uiEXT(uint program, int location, uint v0);
        public delegate void glProgramUniform1uiv(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform1uivEXT(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform2d(uint program, int location, double v0, double v1);
        public delegate void glProgramUniform2dEXT(uint program, int location, double x, double y);
        public delegate void glProgramUniform2dv(uint program, int location, int count, double* value);
        public delegate void glProgramUniform2dvEXT(uint program, int location, int count, double* value);
        public delegate void glProgramUniform2f(uint program, int location, float v0, float v1);
        public delegate void glProgramUniform2fEXT(uint program, int location, float v0, float v1);
        public delegate void glProgramUniform2fv(uint program, int location, int count, float* value);
        public delegate void glProgramUniform2fvEXT(uint program, int location, int count, float* value);
        public delegate void glProgramUniform2i(uint program, int location, int v0, int v1);
        public delegate void glProgramUniform2i64ARB(uint program, int location, long x, long y);
        public delegate void glProgramUniform2i64NV(uint program, int location, long x, long y);
        public delegate void glProgramUniform2i64vARB(uint program, int location, int count, long* value);
        public delegate void glProgramUniform2i64vNV(uint program, int location, int count, long* value);
        public delegate void glProgramUniform2iEXT(uint program, int location, int v0, int v1);
        public delegate void glProgramUniform2iv(uint program, int location, int count, int* value);
        public delegate void glProgramUniform2ivEXT(uint program, int location, int count, int* value);
        public delegate void glProgramUniform2ui(uint program, int location, uint v0, uint v1);
        public delegate void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y);
        public delegate void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);
        public delegate void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);
        public delegate void glProgramUniform2uiv(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform2uivEXT(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform3d(uint program, int location, double v0, double v1, double v2);
        public delegate void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);
        public delegate void glProgramUniform3dv(uint program, int location, int count, double* value);
        public delegate void glProgramUniform3dvEXT(uint program, int location, int count, double* value);
        public delegate void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);
        public delegate void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);
        public delegate void glProgramUniform3fv(uint program, int location, int count, float* value);
        public delegate void glProgramUniform3fvEXT(uint program, int location, int count, float* value);
        public delegate void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);
        public delegate void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z);
        public delegate void glProgramUniform3i64NV(uint program, int location, long x, long y, long z);
        public delegate void glProgramUniform3i64vARB(uint program, int location, int count, long* value);
        public delegate void glProgramUniform3i64vNV(uint program, int location, int count, long* value);
        public delegate void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);
        public delegate void glProgramUniform3iv(uint program, int location, int count, int* value);
        public delegate void glProgramUniform3ivEXT(uint program, int location, int count, int* value);
        public delegate void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
        public delegate void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z);
        public delegate void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);
        public delegate void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);
        public delegate void glProgramUniform3uiv(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform3uivEXT(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);
        public delegate void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);
        public delegate void glProgramUniform4dv(uint program, int location, int count, double* value);
        public delegate void glProgramUniform4dvEXT(uint program, int location, int count, double* value);
        public delegate void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
        public delegate void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);
        public delegate void glProgramUniform4fv(uint program, int location, int count, float* value);
        public delegate void glProgramUniform4fvEXT(uint program, int location, int count, float* value);
        public delegate void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
        public delegate void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w);
        public delegate void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);
        public delegate void glProgramUniform4i64vARB(uint program, int location, int count, long* value);
        public delegate void glProgramUniform4i64vNV(uint program, int location, int count, long* value);
        public delegate void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);
        public delegate void glProgramUniform4iv(uint program, int location, int count, int* value);
        public delegate void glProgramUniform4ivEXT(uint program, int location, int count, int* value);
        public delegate void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        public delegate void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        public delegate void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        public delegate void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value);
        public delegate void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        public delegate void glProgramUniform4uiv(uint program, int location, int count, uint* value);
        public delegate void glProgramUniform4uivEXT(uint program, int location, int count, uint* value);
        public delegate void glProgramUniformHandleui64ARB(uint program, int location, ulong value);
        public delegate void glProgramUniformHandleui64IMG(uint program, int location, ulong value);
        public delegate void glProgramUniformHandleui64NV(uint program, int location, ulong value);
        public delegate void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values);
        public delegate void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong* values);
        public delegate void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values);
        public delegate void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double* value);
        public delegate void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float* value);
        public delegate void glProgramUniformui64NV(uint program, int location, ulong value);
        public delegate void glProgramUniformui64vNV(uint program, int location, int count, ulong* value);
        public delegate void glProgramVertexLimitNV(int target, int limit);
        public delegate void glProvokingVertex(int mode);
        public delegate void glProvokingVertexEXT(int mode);
        public delegate void glPushAttrib(uint mask);
        public delegate void glPushClientAttrib(uint mask);
        public delegate void glPushClientAttribDefaultEXT(uint mask);
        public delegate void glPushDebugGroup(int source, uint id, int length, string message);
        public delegate void glPushDebugGroupKHR(int source, uint id, int length, string message);
        public delegate void glPushGroupMarkerEXT(int length, string marker);
        public delegate void glPushMatrix();
        public delegate void glPushName(uint name);
        public delegate void glQueryCounter(uint id, int target);
        public delegate void glQueryCounterEXT(uint id, int target);
        public delegate uint glQueryMatrixxOES(IntPtr* mantissa, int* exponent);
        public delegate void glQueryObjectParameteruiAMD(int target, uint id, int pname, uint param);
        public delegate int glQueryResourceNV(int queryType, int tagId, uint bufSize, int* buffer);
        public delegate void glQueryResourceTagNV(int tagId, string tagString);
        public delegate void glRasterPos2d(double x, double y);
        public delegate void glRasterPos2dv(double* v);
        public delegate void glRasterPos2f(float x, float y);
        public delegate void glRasterPos2fv(float* v);
        public delegate void glRasterPos2i(int x, int y);
        public delegate void glRasterPos2iv(int* v);
        public delegate void glRasterPos2s(short x, short y);
        public delegate void glRasterPos2sv(short* v);
        public delegate void glRasterPos2xOES(IntPtr x, IntPtr y);
        public delegate void glRasterPos2xvOES(IntPtr* coords);
        public delegate void glRasterPos3d(double x, double y, double z);
        public delegate void glRasterPos3dv(double* v);
        public delegate void glRasterPos3f(float x, float y, float z);
        public delegate void glRasterPos3fv(float* v);
        public delegate void glRasterPos3i(int x, int y, int z);
        public delegate void glRasterPos3iv(int* v);
        public delegate void glRasterPos3s(short x, short y, short z);
        public delegate void glRasterPos3sv(short* v);
        public delegate void glRasterPos3xOES(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glRasterPos3xvOES(IntPtr* coords);
        public delegate void glRasterPos4d(double x, double y, double z, double w);
        public delegate void glRasterPos4dv(double* v);
        public delegate void glRasterPos4f(float x, float y, float z, float w);
        public delegate void glRasterPos4fv(float* v);
        public delegate void glRasterPos4i(int x, int y, int z, int w);
        public delegate void glRasterPos4iv(int* v);
        public delegate void glRasterPos4s(short x, short y, short z, short w);
        public delegate void glRasterPos4sv(short* v);
        public delegate void glRasterPos4xOES(IntPtr x, IntPtr y, IntPtr z, IntPtr w);
        public delegate void glRasterPos4xvOES(IntPtr* coords);
        public delegate void glRasterSamplesEXT(uint samples, bool fixedsamplelocations);
        public delegate void glReadBuffer(int src);
        public delegate void glReadBufferIndexedEXT(int src, int index);
        public delegate void glReadBufferNV(int mode);
        public delegate void glReadInstrumentsSGIX(int marker);
        public delegate void glReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data);
        public delegate void glReadnPixelsARB(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data);
        public delegate void glReadnPixelsEXT(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data);
        public delegate void glReadnPixelsKHR(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data);
        public delegate bool glReleaseKeyedMutexWin32EXT(uint memory, ulong key);
        public delegate void glRectd(double x1, double y1, double x2, double y2);
        public delegate void glRectdv(double* v1, double* v2);
        public delegate void glRectf(float x1, float y1, float x2, float y2);
        public delegate void glRectfv(float* v1, float* v2);
        public delegate void glRecti(int x1, int y1, int x2, int y2);
        public delegate void glRectiv(int* v1, int* v2);
        public delegate void glRects(short x1, short y1, short x2, short y2);
        public delegate void glRectsv(short* v1, short* v2);
        public delegate void glRectxOES(IntPtr x1, IntPtr y1, IntPtr x2, IntPtr y2);
        public delegate void glRectxvOES(IntPtr* v1, IntPtr* v2);
        public delegate void glReferencePlaneSGIX(double* equation);
        public delegate void glReleaseShaderCompiler();
        public delegate void glRenderGpuMaskNV(uint mask);
        public delegate int glRenderMode(int mode);
        public delegate void glRenderbufferStorage(int target, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageEXT(int target, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleAdvancedAMD(int target, int samples, int storageSamples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageMultisampleNV(int target, int samples, int internalformat, int width, int height);
        public delegate void glRenderbufferStorageOES(int target, int internalformat, int width, int height);
        public delegate void glReplacementCodePointerSUN(int type, int stride, IntPtr* pointer);
        public delegate void glReplacementCodeubSUN(byte code);
        public delegate void glReplacementCodeubvSUN(byte* code);
        public delegate void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);
        public delegate void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v);
        public delegate void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v);
        public delegate void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);
        public delegate void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v);
        public delegate void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v);
        public delegate void glReplacementCodeuiSUN(uint code);
        public delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v);
        public delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v);
        public delegate void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);
        public delegate void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v);
        public delegate void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);
        public delegate void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v);
        public delegate void glReplacementCodeuivSUN(uint* code);
        public delegate void glReplacementCodeusSUN(ushort code);
        public delegate void glReplacementCodeusvSUN(ushort* code);
        public delegate void glRequestResidentProgramsNV(int n, uint* programs);
        public delegate void glResetHistogram(int target);
        public delegate void glResetHistogramEXT(int target);
        public delegate void glResetMemoryObjectParameterNV(uint memory, int pname);
        public delegate void glResetMinmax(int target);
        public delegate void glResetMinmaxEXT(int target);
        public delegate void glResizeBuffersMESA();
        public delegate void glResolveDepthValuesNV();
        public delegate void glResolveMultisampleFramebufferAPPLE();
        public delegate void glResumeTransformFeedback();
        public delegate void glResumeTransformFeedbackNV();
        public delegate void glRotated(double angle, double x, double y, double z);
        public delegate void glRotatef(float angle, float x, float y, float z);
        public delegate void glRotatex(IntPtr angle, IntPtr x, IntPtr y, IntPtr z);
        public delegate void glRotatexOES(IntPtr angle, IntPtr x, IntPtr y, IntPtr z);
        public delegate void glSampleCoverage(float value, bool invert);
        public delegate void glSampleCoverageARB(float value, bool invert);
        public delegate void glSampleCoveragex(int value, bool invert);
        public delegate void glSampleCoveragexOES(int value, bool invert);
        public delegate void glSampleMapATI(uint dst, uint interp, int swizzle);
        public delegate void glSampleMaskEXT(float value, bool invert);
        public delegate void glSampleMaskIndexedNV(uint index, uint mask);
        public delegate void glSampleMaskSGIS(float value, bool invert);
        public delegate void glSampleMaski(uint maskNumber, uint mask);
        public delegate void glSamplePatternEXT(int pattern);
        public delegate void glSamplePatternSGIS(int pattern);
        public delegate void glSamplerParameterIiv(uint sampler, int pname, int* param);
        public delegate void glSamplerParameterIivEXT(uint sampler, int pname, int* param);
        public delegate void glSamplerParameterIivOES(uint sampler, int pname, int* param);
        public delegate void glSamplerParameterIuiv(uint sampler, int pname, uint* param);
        public delegate void glSamplerParameterIuivEXT(uint sampler, int pname, uint* param);
        public delegate void glSamplerParameterIuivOES(uint sampler, int pname, uint* param);
        public delegate void glSamplerParameterf(uint sampler, int pname, float param);
        public delegate void glSamplerParameterfv(uint sampler, int pname, float* param);
        public delegate void glSamplerParameteri(uint sampler, int pname, int param);
        public delegate void glSamplerParameteriv(uint sampler, int pname, int* param);
        public delegate void glScaled(double x, double y, double z);
        public delegate void glScalef(float x, float y, float z);
        public delegate void glScalex(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glScalexOES(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glScissor(int x, int y, int width, int height);
        public delegate void glScissorArrayv(uint first, int count, int* v);
        public delegate void glScissorArrayvNV(uint first, int count, int* v);
        public delegate void glScissorArrayvOES(uint first, int count, int* v);
        public delegate void glScissorExclusiveArrayvNV(uint first, int count, int* v);
        public delegate void glScissorExclusiveNV(int x, int y, int width, int height);
        public delegate void glScissorIndexed(uint index, int left, int bottom, int width, int height);
        public delegate void glScissorIndexedNV(uint index, int left, int bottom, int width, int height);
        public delegate void glScissorIndexedOES(uint index, int left, int bottom, int width, int height);
        public delegate void glScissorIndexedv(uint index, int* v);
        public delegate void glScissorIndexedvNV(uint index, int* v);
        public delegate void glScissorIndexedvOES(uint index, int* v);
        public delegate void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue);
        public delegate void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue);
        public delegate void glSecondaryColor3bv(sbyte* v);
        public delegate void glSecondaryColor3bvEXT(sbyte* v);
        public delegate void glSecondaryColor3d(double red, double green, double blue);
        public delegate void glSecondaryColor3dEXT(double red, double green, double blue);
        public delegate void glSecondaryColor3dv(double* v);
        public delegate void glSecondaryColor3dvEXT(double* v);
        public delegate void glSecondaryColor3f(float red, float green, float blue);
        public delegate void glSecondaryColor3fEXT(float red, float green, float blue);
        public delegate void glSecondaryColor3fv(float* v);
        public delegate void glSecondaryColor3fvEXT(float* v);
        public delegate void glSecondaryColor3hNV(short red, short green, short blue);
        public delegate void glSecondaryColor3hvNV(short* v);
        public delegate void glSecondaryColor3i(int red, int green, int blue);
        public delegate void glSecondaryColor3iEXT(int red, int green, int blue);
        public delegate void glSecondaryColor3iv(int* v);
        public delegate void glSecondaryColor3ivEXT(int* v);
        public delegate void glSecondaryColor3s(short red, short green, short blue);
        public delegate void glSecondaryColor3sEXT(short red, short green, short blue);
        public delegate void glSecondaryColor3sv(short* v);
        public delegate void glSecondaryColor3svEXT(short* v);
        public delegate void glSecondaryColor3ub(byte red, byte green, byte blue);
        public delegate void glSecondaryColor3ubEXT(byte red, byte green, byte blue);
        public delegate void glSecondaryColor3ubv(byte* v);
        public delegate void glSecondaryColor3ubvEXT(byte* v);
        public delegate void glSecondaryColor3ui(uint red, uint green, uint blue);
        public delegate void glSecondaryColor3uiEXT(uint red, uint green, uint blue);
        public delegate void glSecondaryColor3uiv(uint* v);
        public delegate void glSecondaryColor3uivEXT(uint* v);
        public delegate void glSecondaryColor3us(ushort red, ushort green, ushort blue);
        public delegate void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue);
        public delegate void glSecondaryColor3usv(ushort* v);
        public delegate void glSecondaryColor3usvEXT(ushort* v);
        public delegate void glSecondaryColorFormatNV(int size, int type, int stride);
        public delegate void glSecondaryColorP3ui(int type, uint color);
        public delegate void glSecondaryColorP3uiv(int type, uint* color);
        public delegate void glSecondaryColorPointer(int size, int type, int stride, IntPtr pointer);
        public delegate void glSecondaryColorPointerEXT(int size, int type, int stride, IntPtr pointer);
        public delegate void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glSelectBuffer(int size, uint* buffer);
        public delegate void glSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint* counterList);
        public delegate void glSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params);
        public delegate void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column);
        public delegate void glSeparableFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column);
        public delegate void glSetFenceAPPLE(uint fence);
        public delegate void glSetFenceNV(uint fence, int condition);
        public delegate void glSetFragmentShaderConstantATI(uint dst, float* value);
        public delegate void glSetInvariantEXT(uint id, int type, IntPtr addr);
        public delegate void glSetLocalConstantEXT(uint id, int type, IntPtr addr);
        public delegate void glSetMultisamplefvAMD(int pname, uint index, float* val);
        public delegate void glShadeModel(int mode);
        public delegate void glShaderBinary(int count, uint* shaders, int binaryformat, IntPtr binary, int length);
        public delegate void glShaderOp1EXT(int op, uint res, uint arg1);
        public delegate void glShaderOp2EXT(int op, uint res, uint arg1, uint arg2);
        public delegate void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, uint arg3);
        public delegate void glShaderSource(uint shader, int count, byte** strings, int* length);
        public delegate void glShaderSourceARB(uint shaderObj, int count, string[] _string, int* length);
        public delegate void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
        public delegate void glShadingRateImageBarrierNV(bool synchronize);
        public delegate void glShadingRateImagePaletteNV(uint viewport, uint first, int count, uint* rates);
        public delegate void glShadingRateSampleOrderNV(int order);
        public delegate void glShadingRateSampleOrderCustomNV(int rate, uint samples, int* locations);
        public delegate void glSharpenTexFuncSGIS(int target, int n, float* points);
        public delegate void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts);
        public delegate void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
        public delegate void glSpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
        public delegate void glSpriteParameterfSGIX(int pname, float param);
        public delegate void glSpriteParameterfvSGIX(int pname, float* _params);
        public delegate void glSpriteParameteriSGIX(int pname, int param);
        public delegate void glSpriteParameterivSGIX(int pname, int* _params);
        public delegate void glStartInstrumentsSGIX();
        public delegate void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask);
        public delegate void glStateCaptureNV(uint state, int mode);
        public delegate void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag);
        public delegate void glStencilFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int transformType, float* transformValues);
        public delegate void glStencilFillPathNV(uint path, int fillMode, uint mask);
        public delegate void glStencilFunc(int func, int _ref, uint mask);
        public delegate void glStencilFuncSeparate(int face, int func, int _ref, uint mask);
        public delegate void glStencilFuncSeparateATI(int frontfunc, int backfunc, int _ref, uint mask);
        public delegate void glStencilMask(uint mask);
        public delegate void glStencilMaskSeparate(int face, uint mask);
        public delegate void glStencilOp(int fail, int zfail, int zpass);
        public delegate void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass);
        public delegate void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass);
        public delegate void glStencilOpValueAMD(int face, uint value);
        public delegate void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int transformType, float* transformValues);
        public delegate void glStencilStrokePathNV(uint path, int reference, uint mask);
        public delegate void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float* transformValues);
        public delegate void glStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode);
        public delegate void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float* transformValues);
        public delegate void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode);
        public delegate void glStopInstrumentsSGIX(int marker);
        public delegate void glStringMarkerGREMEDY(int len, IntPtr _string);
        public delegate void glSubpixelPrecisionBiasNV(uint xbits, uint ybits);
        public delegate void glSwizzleEXT(uint res, uint _in, int outX, int outY, int outZ, int outW);
        public delegate void glSyncTextureINTEL(uint texture);
        public delegate void glTagSampleBufferSGIX();
        public delegate void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz);
        public delegate void glTangent3bvEXT(sbyte* v);
        public delegate void glTangent3dEXT(double tx, double ty, double tz);
        public delegate void glTangent3dvEXT(double* v);
        public delegate void glTangent3fEXT(float tx, float ty, float tz);
        public delegate void glTangent3fvEXT(float* v);
        public delegate void glTangent3iEXT(int tx, int ty, int tz);
        public delegate void glTangent3ivEXT(int* v);
        public delegate void glTangent3sEXT(short tx, short ty, short tz);
        public delegate void glTangent3svEXT(short* v);
        public delegate void glTangentPointerEXT(int type, int stride, IntPtr pointer);
        public delegate void glTbufferMask3DFX(uint mask);
        public delegate void glTessellationFactorAMD(float factor);
        public delegate void glTessellationModeAMD(int mode);
        public delegate bool glTestFenceAPPLE(uint fence);
        public delegate bool glTestFenceNV(uint fence);
        public delegate bool glTestObjectAPPLE(int _object, uint name);
        public delegate void glTexAttachMemoryNV(int target, uint memory, ulong offset);
        public delegate void glTexBuffer(int target, int internalformat, uint buffer);
        public delegate void glTexBufferARB(int target, int internalformat, uint buffer);
        public delegate void glTexBufferEXT(int target, int internalformat, uint buffer);
        public delegate void glTexBufferOES(int target, int internalformat, uint buffer);
        public delegate void glTexBufferRange(int target, int internalformat, uint buffer, uint offset, uint size);
        public delegate void glTexBufferRangeEXT(int target, int internalformat, uint buffer, uint offset, uint size);
        public delegate void glTexBufferRangeOES(int target, int internalformat, uint buffer, uint offset, uint size);
        public delegate void glTexBumpParameterfvATI(int pname, float* param);
        public delegate void glTexBumpParameterivATI(int pname, int* param);
        public delegate void glTexCoord1bOES(sbyte s);
        public delegate void glTexCoord1bvOES(sbyte* coords);
        public delegate void glTexCoord1d(double s);
        public delegate void glTexCoord1dv(double* v);
        public delegate void glTexCoord1f(float s);
        public delegate void glTexCoord1fv(float* v);
        public delegate void glTexCoord1hNV(short s);
        public delegate void glTexCoord1hvNV(short* v);
        public delegate void glTexCoord1i(int s);
        public delegate void glTexCoord1iv(int* v);
        public delegate void glTexCoord1s(short s);
        public delegate void glTexCoord1sv(short* v);
        public delegate void glTexCoord1xOES(IntPtr s);
        public delegate void glTexCoord1xvOES(IntPtr* coords);
        public delegate void glTexCoord2bOES(sbyte s, sbyte t);
        public delegate void glTexCoord2bvOES(sbyte* coords);
        public delegate void glTexCoord2d(double s, double t);
        public delegate void glTexCoord2dv(double* v);
        public delegate void glTexCoord2f(float s, float t);
        public delegate void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);
        public delegate void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v);
        public delegate void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v);
        public delegate void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);
        public delegate void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v);
        public delegate void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);
        public delegate void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v);
        public delegate void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);
        public delegate void glTexCoord2fVertex3fvSUN(float* tc, float* v);
        public delegate void glTexCoord2fv(float* v);
        public delegate void glTexCoord2hNV(short s, short t);
        public delegate void glTexCoord2hvNV(short* v);
        public delegate void glTexCoord2i(int s, int t);
        public delegate void glTexCoord2iv(int* v);
        public delegate void glTexCoord2s(short s, short t);
        public delegate void glTexCoord2sv(short* v);
        public delegate void glTexCoord2xOES(IntPtr s, IntPtr t);
        public delegate void glTexCoord2xvOES(IntPtr* coords);
        public delegate void glTexCoord3bOES(sbyte s, sbyte t, sbyte r);
        public delegate void glTexCoord3bvOES(sbyte* coords);
        public delegate void glTexCoord3d(double s, double t, double r);
        public delegate void glTexCoord3dv(double* v);
        public delegate void glTexCoord3f(float s, float t, float r);
        public delegate void glTexCoord3fv(float* v);
        public delegate void glTexCoord3hNV(short s, short t, short r);
        public delegate void glTexCoord3hvNV(short* v);
        public delegate void glTexCoord3i(int s, int t, int r);
        public delegate void glTexCoord3iv(int* v);
        public delegate void glTexCoord3s(short s, short t, short r);
        public delegate void glTexCoord3sv(short* v);
        public delegate void glTexCoord3xOES(IntPtr s, IntPtr t, IntPtr r);
        public delegate void glTexCoord3xvOES(IntPtr* coords);
        public delegate void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q);
        public delegate void glTexCoord4bvOES(sbyte* coords);
        public delegate void glTexCoord4d(double s, double t, double r, double q);
        public delegate void glTexCoord4dv(double* v);
        public delegate void glTexCoord4f(float s, float t, float r, float q);
        public delegate void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
        public delegate void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v);
        public delegate void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);
        public delegate void glTexCoord4fVertex4fvSUN(float* tc, float* v);
        public delegate void glTexCoord4fv(float* v);
        public delegate void glTexCoord4hNV(short s, short t, short r, short q);
        public delegate void glTexCoord4hvNV(short* v);
        public delegate void glTexCoord4i(int s, int t, int r, int q);
        public delegate void glTexCoord4iv(int* v);
        public delegate void glTexCoord4s(short s, short t, short r, short q);
        public delegate void glTexCoord4sv(short* v);
        public delegate void glTexCoord4xOES(IntPtr s, IntPtr t, IntPtr r, IntPtr q);
        public delegate void glTexCoord4xvOES(IntPtr* coords);
        public delegate void glTexCoordFormatNV(int size, int type, int stride);
        public delegate void glTexCoordP1ui(int type, uint coords);
        public delegate void glTexCoordP1uiv(int type, uint* coords);
        public delegate void glTexCoordP2ui(int type, uint coords);
        public delegate void glTexCoordP2uiv(int type, uint* coords);
        public delegate void glTexCoordP3ui(int type, uint coords);
        public delegate void glTexCoordP3uiv(int type, uint* coords);
        public delegate void glTexCoordP4ui(int type, uint coords);
        public delegate void glTexCoordP4uiv(int type, uint* coords);
        public delegate void glTexCoordPointer(int size, int type, int stride, IntPtr pointer);
        public delegate void glTexCoordPointerEXT(int size, int type, int stride, int count, IntPtr pointer);
        public delegate void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glTexCoordPointervINTEL(int size, int type, IntPtr* pointer);
        public delegate void glTexEnvf(int target, int pname, float param);
        public delegate void glTexEnvfv(int target, int pname, float* _params);
        public delegate void glTexEnvi(int target, int pname, int param);
        public delegate void glTexEnviv(int target, int pname, int* _params);
        public delegate void glTexEnvx(int target, int pname, IntPtr param);
        public delegate void glTexEnvxOES(int target, int pname, IntPtr param);
        public delegate void glTexEnvxv(int target, int pname, IntPtr* _params);
        public delegate void glTexEnvxvOES(int target, int pname, IntPtr* _params);
        public delegate void glTexFilterFuncSGIS(int target, int filter, int n, float* weights);
        public delegate void glTexGend(int coord, int pname, double param);
        public delegate void glTexGendv(int coord, int pname, double* _params);
        public delegate void glTexGenf(int coord, int pname, float param);
        public delegate void glTexGenfOES(int coord, int pname, float param);
        public delegate void glTexGenfv(int coord, int pname, float* _params);
        public delegate void glTexGenfvOES(int coord, int pname, float* _params);
        public delegate void glTexGeni(int coord, int pname, int param);
        public delegate void glTexGeniOES(int coord, int pname, int param);
        public delegate void glTexGeniv(int coord, int pname, int* _params);
        public delegate void glTexGenivOES(int coord, int pname, int* _params);
        public delegate void glTexGenxOES(int coord, int pname, IntPtr param);
        public delegate void glTexGenxvOES(int coord, int pname, IntPtr* _params);
        public delegate void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels);
        public delegate void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels);
        public delegate void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations);
        public delegate void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);
        public delegate void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        public delegate void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        public delegate void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        public delegate void glTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        public delegate void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, IntPtr pixels);
        public delegate void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        public delegate void glTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        public delegate void glTexParameterIiv(int target, int pname, int* _params);
        public delegate void glTexParameterIivEXT(int target, int pname, int* _params);
        public delegate void glTexParameterIivOES(int target, int pname, int* _params);
        public delegate void glTexParameterIuiv(int target, int pname, uint* _params);
        public delegate void glTexParameterIuivEXT(int target, int pname, uint* _params);
        public delegate void glTexParameterIuivOES(int target, int pname, uint* _params);
        public delegate void glTexParameterf(int target, int pname, float param);
        public delegate void glTexParameterfv(int target, int pname, float* _params);
        public delegate void glTexParameteri(int target, int pname, int param);
        public delegate void glTexParameteriv(int target, int pname, int* _params);
        public delegate void glTexParameterx(int target, int pname, IntPtr param);
        public delegate void glTexParameterxOES(int target, int pname, IntPtr param);
        public delegate void glTexParameterxv(int target, int pname, IntPtr* _params);
        public delegate void glTexParameterxvOES(int target, int pname, IntPtr* _params);
        public delegate void glTexRenderbufferNV(int target, uint renderbuffer);
        public delegate void glTexStorage1D(int target, int levels, int internalformat, int width);
        public delegate void glTexStorage1DEXT(int target, int levels, int internalformat, int width);
        public delegate void glTexStorage2D(int target, int levels, int internalformat, int width, int height);
        public delegate void glTexStorage2DEXT(int target, int levels, int internalformat, int width, int height);
        public delegate void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations);
        public delegate void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth);
        public delegate void glTexStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth);
        public delegate void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glTexStorage3DMultisampleOES(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glTexStorageMem1DEXT(int target, int levels, int internalFormat, int width, uint memory, ulong offset);
        public delegate void glTexStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, uint memory, ulong offset);
        public delegate void glTexStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset);
        public delegate void glTexStorageMem3DEXT(int target, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset);
        public delegate void glTexStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset);
        public delegate void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, uint flags);
        public delegate void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, IntPtr pixels);
        public delegate void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset);
        public delegate void glTextureBarrier();
        public delegate void glTextureBarrierNV();
        public delegate void glTextureBuffer(uint texture, int internalformat, uint buffer);
        public delegate void glTextureBufferEXT(uint texture, int target, int internalformat, uint buffer);
        public delegate void glTextureBufferRange(uint texture, int internalformat, uint buffer, uint offset, uint size);
        public delegate void glTextureBufferRangeEXT(uint texture, int target, int internalformat, uint buffer, uint offset, uint size);
        public delegate void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha);
        public delegate void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
        public delegate void glTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels);
        public delegate void glTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels);
        public delegate void glTextureImage2DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);
        public delegate void glTextureImage2DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations);
        public delegate void glTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        public delegate void glTextureImage3DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        public delegate void glTextureImage3DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        public delegate void glTextureLightEXT(int pname);
        public delegate void glTextureMaterialEXT(int face, int mode);
        public delegate void glTextureNormalEXT(int mode);
        public delegate void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        public delegate void glTextureParameterIiv(uint texture, int pname, int* _params);
        public delegate void glTextureParameterIivEXT(uint texture, int target, int pname, int* _params);
        public delegate void glTextureParameterIuiv(uint texture, int pname, uint* _params);
        public delegate void glTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params);
        public delegate void glTextureParameterf(uint texture, int pname, float param);
        public delegate void glTextureParameterfEXT(uint texture, int target, int pname, float param);
        public delegate void glTextureParameterfv(uint texture, int pname, float* param);
        public delegate void glTextureParameterfvEXT(uint texture, int target, int pname, float* _params);
        public delegate void glTextureParameteri(uint texture, int pname, int param);
        public delegate void glTextureParameteriEXT(uint texture, int target, int pname, int param);
        public delegate void glTextureParameteriv(uint texture, int pname, int* param);
        public delegate void glTextureParameterivEXT(uint texture, int target, int pname, int* _params);
        public delegate void glTextureRangeAPPLE(int target, int length, IntPtr pointer);
        public delegate void glTextureRenderbufferEXT(uint texture, int target, uint renderbuffer);
        public delegate void glTextureStorage1D(uint texture, int levels, int internalformat, int width);
        public delegate void glTextureStorage1DEXT(uint texture, int target, int levels, int internalformat, int width);
        public delegate void glTextureStorage2D(uint texture, int levels, int internalformat, int width, int height);
        public delegate void glTextureStorage2DEXT(uint texture, int target, int levels, int internalformat, int width, int height);
        public delegate void glTextureStorage2DMultisample(uint texture, int samples, int internalformat, int width, int height, bool fixedsamplelocations);
        public delegate void glTextureStorage2DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations);
        public delegate void glTextureStorage3D(uint texture, int levels, int internalformat, int width, int height, int depth);
        public delegate void glTextureStorage3DEXT(uint texture, int target, int levels, int internalformat, int width, int height, int depth);
        public delegate void glTextureStorage3DMultisample(uint texture, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glTextureStorage3DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glTextureStorageMem1DEXT(uint texture, int levels, int internalFormat, int width, uint memory, ulong offset);
        public delegate void glTextureStorageMem2DEXT(uint texture, int levels, int internalFormat, int width, int height, uint memory, ulong offset);
        public delegate void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset);
        public delegate void glTextureStorageMem3DEXT(uint texture, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset);
        public delegate void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset);
        public delegate void glTextureStorageSparseAMD(uint texture, int target, int internalFormat, int width, int height, int depth, int layers, uint flags);
        public delegate void glTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int type, IntPtr pixels);
        public delegate void glTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);
        public delegate void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);
        public delegate void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        public delegate void glTextureView(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        public delegate void glTextureViewEXT(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        public delegate void glTextureViewOES(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        public delegate void glTrackMatrixNV(int target, uint address, int matrix, int transform);
        public delegate void glTransformFeedbackAttribsNV(int count, int* attribs, int bufferMode);
        public delegate void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);
        public delegate void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, uint offset, uint size);
        public delegate void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, int bufferMode);
        public delegate void glTransformFeedbackVaryings(uint program, int count, string[] varyings, int bufferMode);
        public delegate void glTransformFeedbackVaryingsEXT(uint program, int count, string[] varyings, int bufferMode);
        public delegate void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, int bufferMode);
        public delegate void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float* transformValues);
        public delegate void glTranslated(double x, double y, double z);
        public delegate void glTranslatef(float x, float y, float z);
        public delegate void glTranslatex(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glTranslatexOES(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glUniform1d(int location, double x);
        public delegate void glUniform1dv(int location, int count, double* value);
        public delegate void glUniform1f(int location, float v0);
        public delegate void glUniform1fARB(int location, float v0);
        public delegate void glUniform1fv(int location, int count, float* value);
        public delegate void glUniform1fvARB(int location, int count, float* value);
        public delegate void glUniform1i(int location, int v0);
        public delegate void glUniform1i64ARB(int location, long x);
        public delegate void glUniform1i64NV(int location, long x);
        public delegate void glUniform1i64vARB(int location, int count, long* value);
        public delegate void glUniform1i64vNV(int location, int count, long* value);
        public delegate void glUniform1iARB(int location, int v0);
        public delegate void glUniform1iv(int location, int count, int* value);
        public delegate void glUniform1ivARB(int location, int count, int* value);
        public delegate void glUniform1ui(int location, uint v0);
        public delegate void glUniform1ui64ARB(int location, ulong x);
        public delegate void glUniform1ui64NV(int location, ulong x);
        public delegate void glUniform1ui64vARB(int location, int count, ulong* value);
        public delegate void glUniform1ui64vNV(int location, int count, ulong* value);
        public delegate void glUniform1uiEXT(int location, uint v0);
        public delegate void glUniform1uiv(int location, int count, uint* value);
        public delegate void glUniform1uivEXT(int location, int count, uint* value);
        public delegate void glUniform2d(int location, double x, double y);
        public delegate void glUniform2dv(int location, int count, double* value);
        public delegate void glUniform2f(int location, float v0, float v1);
        public delegate void glUniform2fARB(int location, float v0, float v1);
        public delegate void glUniform2fv(int location, int count, float* value);
        public delegate void glUniform2fvARB(int location, int count, float* value);
        public delegate void glUniform2i(int location, int v0, int v1);
        public delegate void glUniform2i64ARB(int location, long x, long y);
        public delegate void glUniform2i64NV(int location, long x, long y);
        public delegate void glUniform2i64vARB(int location, int count, long* value);
        public delegate void glUniform2i64vNV(int location, int count, long* value);
        public delegate void glUniform2iARB(int location, int v0, int v1);
        public delegate void glUniform2iv(int location, int count, int* value);
        public delegate void glUniform2ivARB(int location, int count, int* value);
        public delegate void glUniform2ui(int location, uint v0, uint v1);
        public delegate void glUniform2ui64ARB(int location, ulong x, ulong y);
        public delegate void glUniform2ui64NV(int location, ulong x, ulong y);
        public delegate void glUniform2ui64vARB(int location, int count, ulong* value);
        public delegate void glUniform2ui64vNV(int location, int count, ulong* value);
        public delegate void glUniform2uiEXT(int location, uint v0, uint v1);
        public delegate void glUniform2uiv(int location, int count, uint* value);
        public delegate void glUniform2uivEXT(int location, int count, uint* value);
        public delegate void glUniform3d(int location, double x, double y, double z);
        public delegate void glUniform3dv(int location, int count, double* value);
        public delegate void glUniform3f(int location, float v0, float v1, float v2);
        public delegate void glUniform3fARB(int location, float v0, float v1, float v2);
        public delegate void glUniform3fv(int location, int count, float* value);
        public delegate void glUniform3fvARB(int location, int count, float* value);
        public delegate void glUniform3i(int location, int v0, int v1, int v2);
        public delegate void glUniform3i64ARB(int location, long x, long y, long z);
        public delegate void glUniform3i64NV(int location, long x, long y, long z);
        public delegate void glUniform3i64vARB(int location, int count, long* value);
        public delegate void glUniform3i64vNV(int location, int count, long* value);
        public delegate void glUniform3iARB(int location, int v0, int v1, int v2);
        public delegate void glUniform3iv(int location, int count, int* value);
        public delegate void glUniform3ivARB(int location, int count, int* value);
        public delegate void glUniform3ui(int location, uint v0, uint v1, uint v2);
        public delegate void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z);
        public delegate void glUniform3ui64NV(int location, ulong x, ulong y, ulong z);
        public delegate void glUniform3ui64vARB(int location, int count, ulong* value);
        public delegate void glUniform3ui64vNV(int location, int count, ulong* value);
        public delegate void glUniform3uiEXT(int location, uint v0, uint v1, uint v2);
        public delegate void glUniform3uiv(int location, int count, uint* value);
        public delegate void glUniform3uivEXT(int location, int count, uint* value);
        public delegate void glUniform4d(int location, double x, double y, double z, double w);
        public delegate void glUniform4dv(int location, int count, double* value);
        public delegate void glUniform4f(int location, float v0, float v1, float v2, float v3);
        public delegate void glUniform4fARB(int location, float v0, float v1, float v2, float v3);
        public delegate void glUniform4fv(int location, int count, float* value);
        public delegate void glUniform4fvARB(int location, int count, float* value);
        public delegate void glUniform4i(int location, int v0, int v1, int v2, int v3);
        public delegate void glUniform4i64ARB(int location, long x, long y, long z, long w);
        public delegate void glUniform4i64NV(int location, long x, long y, long z, long w);
        public delegate void glUniform4i64vARB(int location, int count, long* value);
        public delegate void glUniform4i64vNV(int location, int count, long* value);
        public delegate void glUniform4iARB(int location, int v0, int v1, int v2, int v3);
        public delegate void glUniform4iv(int location, int count, int* value);
        public delegate void glUniform4ivARB(int location, int count, int* value);
        public delegate void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        public delegate void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w);
        public delegate void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);
        public delegate void glUniform4ui64vARB(int location, int count, ulong* value);
        public delegate void glUniform4ui64vNV(int location, int count, ulong* value);
        public delegate void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);
        public delegate void glUniform4uiv(int location, int count, uint* value);
        public delegate void glUniform4uivEXT(int location, int count, uint* value);
        public delegate void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        public delegate void glUniformBufferEXT(uint program, int location, uint buffer);
        public delegate void glUniformHandleui64ARB(int location, ulong value);
        public delegate void glUniformHandleui64IMG(int location, ulong value);
        public delegate void glUniformHandleui64NV(int location, ulong value);
        public delegate void glUniformHandleui64vARB(int location, int count, ulong* value);
        public delegate void glUniformHandleui64vIMG(int location, int count, ulong* value);
        public delegate void glUniformHandleui64vNV(int location, int count, ulong* value);
        public delegate void glUniformMatrix2dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix2fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix2fvARB(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix2x3dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix2x3fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix2x3fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix2x4dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix2x4fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix2x4fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix3fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3fvARB(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3x2dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix3x2fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3x2fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3x4dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix3x4fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix3x4fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix4fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4fvARB(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4x2dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix4x2fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4x2fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4x3dv(int location, int count, bool transpose, double* value);
        public delegate void glUniformMatrix4x3fv(int location, int count, bool transpose, float* value);
        public delegate void glUniformMatrix4x3fvNV(int location, int count, bool transpose, float* value);
        public delegate void glUniformSubroutinesuiv(int shadertype, int count, uint* indices);
        public delegate void glUniformui64NV(int location, ulong value);
        public delegate void glUniformui64vNV(int location, int count, ulong* value);
        public delegate void glUnlockArraysEXT();
        public delegate bool glUnmapBuffer(int target);
        public delegate bool glUnmapBufferARB(int target);
        public delegate bool glUnmapBufferOES(int target);
        public delegate bool glUnmapNamedBuffer(uint buffer);
        public delegate bool glUnmapNamedBufferEXT(uint buffer);
        public delegate void glUnmapObjectBufferATI(uint buffer);
        public delegate void glUnmapTexture2DINTEL(uint texture, int level);
        public delegate void glUpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, int preserve);
        public delegate void glUseProgram(uint program);
        public delegate void glUseProgramObjectARB(uint programObj);
        public delegate void glUseProgramStages(uint pipeline, uint stages, uint program);
        public delegate void glUseProgramStagesEXT(uint pipeline, uint stages, uint program);
        public delegate void glUseShaderProgramEXT(int type, uint program);
        public delegate void glVDPAUFiniNV();
        public delegate void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int* length, int* values);
        public delegate void glVDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress);
        public delegate bool glVDPAUIsSurfaceNV(IntPtr surface);
        public delegate void glVDPAUMapSurfacesNV(int numSurfaces, IntPtr* surfaces);
        public delegate IntPtr glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames);
        public delegate IntPtr glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames);
        public delegate IntPtr glVDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames, bool isFrameStructure);
        public delegate void glVDPAUSurfaceAccessNV(IntPtr surface, int access);
        public delegate void glVDPAUUnmapSurfacesNV(int numSurface, IntPtr* surfaces);
        public delegate void glVDPAUUnregisterSurfaceNV(IntPtr surface);
        public delegate void glValidateProgram(uint program);
        public delegate void glValidateProgramARB(uint programObj);
        public delegate void glValidateProgramPipeline(uint pipeline);
        public delegate void glValidateProgramPipelineEXT(uint pipeline);
        public delegate void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, uint offset);
        public delegate void glVariantPointerEXT(uint id, int type, uint stride, IntPtr addr);
        public delegate void glVariantbvEXT(uint id, sbyte* addr);
        public delegate void glVariantdvEXT(uint id, double* addr);
        public delegate void glVariantfvEXT(uint id, float* addr);
        public delegate void glVariantivEXT(uint id, int* addr);
        public delegate void glVariantsvEXT(uint id, short* addr);
        public delegate void glVariantubvEXT(uint id, byte* addr);
        public delegate void glVariantuivEXT(uint id, uint* addr);
        public delegate void glVariantusvEXT(uint id, ushort* addr);
        public delegate void glVertex2bOES(sbyte x, sbyte y);
        public delegate void glVertex2bvOES(sbyte* coords);
        public delegate void glVertex2d(double x, double y);
        public delegate void glVertex2dv(double* v);
        public delegate void glVertex2f(float x, float y);
        public delegate void glVertex2fv(float* v);
        public delegate void glVertex2hNV(short x, short y);
        public delegate void glVertex2hvNV(short* v);
        public delegate void glVertex2i(int x, int y);
        public delegate void glVertex2iv(int* v);
        public delegate void glVertex2s(short x, short y);
        public delegate void glVertex2sv(short* v);
        public delegate void glVertex2xOES(IntPtr x);
        public delegate void glVertex2xvOES(IntPtr* coords);
        public delegate void glVertex3bOES(sbyte x, sbyte y, sbyte z);
        public delegate void glVertex3bvOES(sbyte* coords);
        public delegate void glVertex3d(double x, double y, double z);
        public delegate void glVertex3dv(double* v);
        public delegate void glVertex3f(float x, float y, float z);
        public delegate void glVertex3fv(float* v);
        public delegate void glVertex3hNV(short x, short y, short z);
        public delegate void glVertex3hvNV(short* v);
        public delegate void glVertex3i(int x, int y, int z);
        public delegate void glVertex3iv(int* v);
        public delegate void glVertex3s(short x, short y, short z);
        public delegate void glVertex3sv(short* v);
        public delegate void glVertex3xOES(IntPtr x, IntPtr y);
        public delegate void glVertex3xvOES(IntPtr* coords);
        public delegate void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w);
        public delegate void glVertex4bvOES(sbyte* coords);
        public delegate void glVertex4d(double x, double y, double z, double w);
        public delegate void glVertex4dv(double* v);
        public delegate void glVertex4f(float x, float y, float z, float w);
        public delegate void glVertex4fv(float* v);
        public delegate void glVertex4hNV(short x, short y, short z, short w);
        public delegate void glVertex4hvNV(short* v);
        public delegate void glVertex4i(int x, int y, int z, int w);
        public delegate void glVertex4iv(int* v);
        public delegate void glVertex4s(short x, short y, short z, short w);
        public delegate void glVertex4sv(short* v);
        public delegate void glVertex4xOES(IntPtr x, IntPtr y, IntPtr z);
        public delegate void glVertex4xvOES(IntPtr* coords);
        public delegate void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);
        public delegate void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset);
        public delegate void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride);
        public delegate void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);
        public delegate void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, uint offset);
        public delegate void glVertexArrayElementBuffer(uint vaobj, uint buffer);
        public delegate void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset);
        public delegate void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset);
        public delegate void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset);
        public delegate void glVertexArrayParameteriAPPLE(int pname, int param);
        public delegate void glVertexArrayRangeAPPLE(int length, IntPtr pointer);
        public delegate void glVertexArrayRangeNV(int length, IntPtr pointer);
        public delegate void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);
        public delegate void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);
        public delegate void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset);
        public delegate void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset);
        public delegate void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, bool normalized, int stride, uint offset);
        public delegate void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);
        public delegate void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride);
        public delegate void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint* offsets, int* strides);
        public delegate void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset);
        public delegate void glVertexAttrib1d(uint index, double x);
        public delegate void glVertexAttrib1dARB(uint index, double x);
        public delegate void glVertexAttrib1dNV(uint index, double x);
        public delegate void glVertexAttrib1dv(uint index, double* v);
        public delegate void glVertexAttrib1dvARB(uint index, double* v);
        public delegate void glVertexAttrib1dvNV(uint index, double* v);
        public delegate void glVertexAttrib1f(uint index, float x);
        public delegate void glVertexAttrib1fARB(uint index, float x);
        public delegate void glVertexAttrib1fNV(uint index, float x);
        public delegate void glVertexAttrib1fv(uint index, float* v);
        public delegate void glVertexAttrib1fvARB(uint index, float* v);
        public delegate void glVertexAttrib1fvNV(uint index, float* v);
        public delegate void glVertexAttrib1hNV(uint index, short x);
        public delegate void glVertexAttrib1hvNV(uint index, short* v);
        public delegate void glVertexAttrib1s(uint index, short x);
        public delegate void glVertexAttrib1sARB(uint index, short x);
        public delegate void glVertexAttrib1sNV(uint index, short x);
        public delegate void glVertexAttrib1sv(uint index, short* v);
        public delegate void glVertexAttrib1svARB(uint index, short* v);
        public delegate void glVertexAttrib1svNV(uint index, short* v);
        public delegate void glVertexAttrib2d(uint index, double x, double y);
        public delegate void glVertexAttrib2dARB(uint index, double x, double y);
        public delegate void glVertexAttrib2dNV(uint index, double x, double y);
        public delegate void glVertexAttrib2dv(uint index, double* v);
        public delegate void glVertexAttrib2dvARB(uint index, double* v);
        public delegate void glVertexAttrib2dvNV(uint index, double* v);
        public delegate void glVertexAttrib2f(uint index, float x, float y);
        public delegate void glVertexAttrib2fARB(uint index, float x, float y);
        public delegate void glVertexAttrib2fNV(uint index, float x, float y);
        public delegate void glVertexAttrib2fv(uint index, float* v);
        public delegate void glVertexAttrib2fvARB(uint index, float* v);
        public delegate void glVertexAttrib2fvNV(uint index, float* v);
        public delegate void glVertexAttrib2hNV(uint index, short x, short y);
        public delegate void glVertexAttrib2hvNV(uint index, short* v);
        public delegate void glVertexAttrib2s(uint index, short x, short y);
        public delegate void glVertexAttrib2sARB(uint index, short x, short y);
        public delegate void glVertexAttrib2sNV(uint index, short x, short y);
        public delegate void glVertexAttrib2sv(uint index, short* v);
        public delegate void glVertexAttrib2svARB(uint index, short* v);
        public delegate void glVertexAttrib2svNV(uint index, short* v);
        public delegate void glVertexAttrib3d(uint index, double x, double y, double z);
        public delegate void glVertexAttrib3dARB(uint index, double x, double y, double z);
        public delegate void glVertexAttrib3dNV(uint index, double x, double y, double z);
        public delegate void glVertexAttrib3dv(uint index, double* v);
        public delegate void glVertexAttrib3dvARB(uint index, double* v);
        public delegate void glVertexAttrib3dvNV(uint index, double* v);
        public delegate void glVertexAttrib3f(uint index, float x, float y, float z);
        public delegate void glVertexAttrib3fARB(uint index, float x, float y, float z);
        public delegate void glVertexAttrib3fNV(uint index, float x, float y, float z);
        public delegate void glVertexAttrib3fv(uint index, float* v);
        public delegate void glVertexAttrib3fvARB(uint index, float* v);
        public delegate void glVertexAttrib3fvNV(uint index, float* v);
        public delegate void glVertexAttrib3hNV(uint index, short x, short y, short z);
        public delegate void glVertexAttrib3hvNV(uint index, short* v);
        public delegate void glVertexAttrib3s(uint index, short x, short y, short z);
        public delegate void glVertexAttrib3sARB(uint index, short x, short y, short z);
        public delegate void glVertexAttrib3sNV(uint index, short x, short y, short z);
        public delegate void glVertexAttrib3sv(uint index, short* v);
        public delegate void glVertexAttrib3svARB(uint index, short* v);
        public delegate void glVertexAttrib3svNV(uint index, short* v);
        public delegate void glVertexAttrib4Nbv(uint index, sbyte* v);
        public delegate void glVertexAttrib4NbvARB(uint index, sbyte* v);
        public delegate void glVertexAttrib4Niv(uint index, int* v);
        public delegate void glVertexAttrib4NivARB(uint index, int* v);
        public delegate void glVertexAttrib4Nsv(uint index, short* v);
        public delegate void glVertexAttrib4NsvARB(uint index, short* v);
        public delegate void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
        public delegate void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w);
        public delegate void glVertexAttrib4Nubv(uint index, byte* v);
        public delegate void glVertexAttrib4NubvARB(uint index, byte* v);
        public delegate void glVertexAttrib4Nuiv(uint index, uint* v);
        public delegate void glVertexAttrib4NuivARB(uint index, uint* v);
        public delegate void glVertexAttrib4Nusv(uint index, ushort* v);
        public delegate void glVertexAttrib4NusvARB(uint index, ushort* v);
        public delegate void glVertexAttrib4bv(uint index, sbyte* v);
        public delegate void glVertexAttrib4bvARB(uint index, sbyte* v);
        public delegate void glVertexAttrib4d(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttrib4dARB(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttrib4dNV(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttrib4dv(uint index, double* v);
        public delegate void glVertexAttrib4dvARB(uint index, double* v);
        public delegate void glVertexAttrib4dvNV(uint index, double* v);
        public delegate void glVertexAttrib4f(uint index, float x, float y, float z, float w);
        public delegate void glVertexAttrib4fARB(uint index, float x, float y, float z, float w);
        public delegate void glVertexAttrib4fNV(uint index, float x, float y, float z, float w);
        public delegate void glVertexAttrib4fv(uint index, float* v);
        public delegate void glVertexAttrib4fvARB(uint index, float* v);
        public delegate void glVertexAttrib4fvNV(uint index, float* v);
        public delegate void glVertexAttrib4hNV(uint index, short x, short y, short z, short w);
        public delegate void glVertexAttrib4hvNV(uint index, short* v);
        public delegate void glVertexAttrib4iv(uint index, int* v);
        public delegate void glVertexAttrib4ivARB(uint index, int* v);
        public delegate void glVertexAttrib4s(uint index, short x, short y, short z, short w);
        public delegate void glVertexAttrib4sARB(uint index, short x, short y, short z, short w);
        public delegate void glVertexAttrib4sNV(uint index, short x, short y, short z, short w);
        public delegate void glVertexAttrib4sv(uint index, short* v);
        public delegate void glVertexAttrib4svARB(uint index, short* v);
        public delegate void glVertexAttrib4svNV(uint index, short* v);
        public delegate void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w);
        public delegate void glVertexAttrib4ubv(uint index, byte* v);
        public delegate void glVertexAttrib4ubvARB(uint index, byte* v);
        public delegate void glVertexAttrib4ubvNV(uint index, byte* v);
        public delegate void glVertexAttrib4uiv(uint index, uint* v);
        public delegate void glVertexAttrib4uivARB(uint index, uint* v);
        public delegate void glVertexAttrib4usv(uint index, ushort* v);
        public delegate void glVertexAttrib4usvARB(uint index, ushort* v);
        public delegate void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, uint buffer, uint offset);
        public delegate void glVertexAttribBinding(uint attribindex, uint bindingindex);
        public delegate void glVertexAttribDivisor(uint index, uint divisor);
        public delegate void glVertexAttribDivisorANGLE(uint index, uint divisor);
        public delegate void glVertexAttribDivisorARB(uint index, uint divisor);
        public delegate void glVertexAttribDivisorEXT(uint index, uint divisor);
        public delegate void glVertexAttribDivisorNV(uint index, uint divisor);
        public delegate void glVertexAttribFormat(uint attribindex, int size, int type, bool normalized, uint relativeoffset);
        public delegate void glVertexAttribFormatNV(uint index, int size, int type, bool normalized, int stride);
        public delegate void glVertexAttribI1i(uint index, int x);
        public delegate void glVertexAttribI1iEXT(uint index, int x);
        public delegate void glVertexAttribI1iv(uint index, int* v);
        public delegate void glVertexAttribI1ivEXT(uint index, int* v);
        public delegate void glVertexAttribI1ui(uint index, uint x);
        public delegate void glVertexAttribI1uiEXT(uint index, uint x);
        public delegate void glVertexAttribI1uiv(uint index, uint* v);
        public delegate void glVertexAttribI1uivEXT(uint index, uint* v);
        public delegate void glVertexAttribI2i(uint index, int x, int y);
        public delegate void glVertexAttribI2iEXT(uint index, int x, int y);
        public delegate void glVertexAttribI2iv(uint index, int* v);
        public delegate void glVertexAttribI2ivEXT(uint index, int* v);
        public delegate void glVertexAttribI2ui(uint index, uint x, uint y);
        public delegate void glVertexAttribI2uiEXT(uint index, uint x, uint y);
        public delegate void glVertexAttribI2uiv(uint index, uint* v);
        public delegate void glVertexAttribI2uivEXT(uint index, uint* v);
        public delegate void glVertexAttribI3i(uint index, int x, int y, int z);
        public delegate void glVertexAttribI3iEXT(uint index, int x, int y, int z);
        public delegate void glVertexAttribI3iv(uint index, int* v);
        public delegate void glVertexAttribI3ivEXT(uint index, int* v);
        public delegate void glVertexAttribI3ui(uint index, uint x, uint y, uint z);
        public delegate void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z);
        public delegate void glVertexAttribI3uiv(uint index, uint* v);
        public delegate void glVertexAttribI3uivEXT(uint index, uint* v);
        public delegate void glVertexAttribI4bv(uint index, sbyte* v);
        public delegate void glVertexAttribI4bvEXT(uint index, sbyte* v);
        public delegate void glVertexAttribI4i(uint index, int x, int y, int z, int w);
        public delegate void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w);
        public delegate void glVertexAttribI4iv(uint index, int* v);
        public delegate void glVertexAttribI4ivEXT(uint index, int* v);
        public delegate void glVertexAttribI4sv(uint index, short* v);
        public delegate void glVertexAttribI4svEXT(uint index, short* v);
        public delegate void glVertexAttribI4ubv(uint index, byte* v);
        public delegate void glVertexAttribI4ubvEXT(uint index, byte* v);
        public delegate void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        public delegate void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);
        public delegate void glVertexAttribI4uiv(uint index, uint* v);
        public delegate void glVertexAttribI4uivEXT(uint index, uint* v);
        public delegate void glVertexAttribI4usv(uint index, ushort* v);
        public delegate void glVertexAttribI4usvEXT(uint index, ushort* v);
        public delegate void glVertexAttribIFormat(uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexAttribIFormatNV(uint index, int size, int type, int stride);
        public delegate void glVertexAttribIPointer(uint index, int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexAttribIPointerEXT(uint index, int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexAttribL1d(uint index, double x);
        public delegate void glVertexAttribL1dEXT(uint index, double x);
        public delegate void glVertexAttribL1dv(uint index, double* v);
        public delegate void glVertexAttribL1dvEXT(uint index, double* v);
        public delegate void glVertexAttribL1i64NV(uint index, long x);
        public delegate void glVertexAttribL1i64vNV(uint index, long* v);
        public delegate void glVertexAttribL1ui64ARB(uint index, ulong x);
        public delegate void glVertexAttribL1ui64NV(uint index, ulong x);
        public delegate void glVertexAttribL1ui64vARB(uint index, ulong* v);
        public delegate void glVertexAttribL1ui64vNV(uint index, ulong* v);
        public delegate void glVertexAttribL2d(uint index, double x, double y);
        public delegate void glVertexAttribL2dEXT(uint index, double x, double y);
        public delegate void glVertexAttribL2dv(uint index, double* v);
        public delegate void glVertexAttribL2dvEXT(uint index, double* v);
        public delegate void glVertexAttribL2i64NV(uint index, long x, long y);
        public delegate void glVertexAttribL2i64vNV(uint index, long* v);
        public delegate void glVertexAttribL2ui64NV(uint index, ulong x, ulong y);
        public delegate void glVertexAttribL2ui64vNV(uint index, ulong* v);
        public delegate void glVertexAttribL3d(uint index, double x, double y, double z);
        public delegate void glVertexAttribL3dEXT(uint index, double x, double y, double z);
        public delegate void glVertexAttribL3dv(uint index, double* v);
        public delegate void glVertexAttribL3dvEXT(uint index, double* v);
        public delegate void glVertexAttribL3i64NV(uint index, long x, long y, long z);
        public delegate void glVertexAttribL3i64vNV(uint index, long* v);
        public delegate void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);
        public delegate void glVertexAttribL3ui64vNV(uint index, ulong* v);
        public delegate void glVertexAttribL4d(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttribL4dv(uint index, double* v);
        public delegate void glVertexAttribL4dvEXT(uint index, double* v);
        public delegate void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w);
        public delegate void glVertexAttribL4i64vNV(uint index, long* v);
        public delegate void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);
        public delegate void glVertexAttribL4ui64vNV(uint index, ulong* v);
        public delegate void glVertexAttribLFormat(uint attribindex, int size, int type, uint relativeoffset);
        public delegate void glVertexAttribLFormatNV(uint index, int size, int type, int stride);
        public delegate void glVertexAttribLPointer(uint index, int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexAttribLPointerEXT(uint index, int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexAttribP1ui(uint index, int type, bool normalized, uint value);
        public delegate void glVertexAttribP1uiv(uint index, int type, bool normalized, uint* value);
        public delegate void glVertexAttribP2ui(uint index, int type, bool normalized, uint value);
        public delegate void glVertexAttribP2uiv(uint index, int type, bool normalized, uint* value);
        public delegate void glVertexAttribP3ui(uint index, int type, bool normalized, uint value);
        public delegate void glVertexAttribP3uiv(uint index, int type, bool normalized, uint* value);
        public delegate void glVertexAttribP4ui(uint index, int type, bool normalized, uint value);
        public delegate void glVertexAttribP4uiv(uint index, int type, bool normalized, uint* value);
        public delegate void glVertexAttribParameteriAMD(uint index, int pname, int param);
        public delegate void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, void* pointer);
        public delegate void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, void* pointer);
        public delegate void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, IntPtr pointer);
        public delegate void glVertexAttribs1dvNV(uint index, int count, double* v);
        public delegate void glVertexAttribs1fvNV(uint index, int count, float* v);
        public delegate void glVertexAttribs1hvNV(uint index, int n, short* v);
        public delegate void glVertexAttribs1svNV(uint index, int count, short* v);
        public delegate void glVertexAttribs2dvNV(uint index, int count, double* v);
        public delegate void glVertexAttribs2fvNV(uint index, int count, float* v);
        public delegate void glVertexAttribs2hvNV(uint index, int n, short* v);
        public delegate void glVertexAttribs2svNV(uint index, int count, short* v);
        public delegate void glVertexAttribs3dvNV(uint index, int count, double* v);
        public delegate void glVertexAttribs3fvNV(uint index, int count, float* v);
        public delegate void glVertexAttribs3hvNV(uint index, int n, short* v);
        public delegate void glVertexAttribs3svNV(uint index, int count, short* v);
        public delegate void glVertexAttribs4dvNV(uint index, int count, double* v);
        public delegate void glVertexAttribs4fvNV(uint index, int count, float* v);
        public delegate void glVertexAttribs4hvNV(uint index, int n, short* v);
        public delegate void glVertexAttribs4svNV(uint index, int count, short* v);
        public delegate void glVertexAttribs4ubvNV(uint index, int count, byte* v);
        public delegate void glVertexBindingDivisor(uint bindingindex, uint divisor);
        public delegate void glVertexBlendARB(int count);
        public delegate void glVertexBlendEnvfATI(int pname, float param);
        public delegate void glVertexBlendEnviATI(int pname, int param);
        public delegate void glVertexFormatNV(int size, int type, int stride);
        public delegate void glVertexP2ui(int type, uint value);
        public delegate void glVertexP2uiv(int type, uint* value);
        public delegate void glVertexP3ui(int type, uint value);
        public delegate void glVertexP3uiv(int type, uint* value);
        public delegate void glVertexP4ui(int type, uint value);
        public delegate void glVertexP4uiv(int type, uint* value);
        public delegate void glVertexPointer(int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexPointerEXT(int size, int type, int stride, int count, IntPtr pointer);
        public delegate void glVertexPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);
        public delegate void glVertexPointervINTEL(int size, int type, IntPtr* pointer);
        public delegate void glVertexStream1dATI(int stream, double x);
        public delegate void glVertexStream1dvATI(int stream, double* coords);
        public delegate void glVertexStream1fATI(int stream, float x);
        public delegate void glVertexStream1fvATI(int stream, float* coords);
        public delegate void glVertexStream1iATI(int stream, int x);
        public delegate void glVertexStream1ivATI(int stream, int* coords);
        public delegate void glVertexStream1sATI(int stream, short x);
        public delegate void glVertexStream1svATI(int stream, short* coords);
        public delegate void glVertexStream2dATI(int stream, double x, double y);
        public delegate void glVertexStream2dvATI(int stream, double* coords);
        public delegate void glVertexStream2fATI(int stream, float x, float y);
        public delegate void glVertexStream2fvATI(int stream, float* coords);
        public delegate void glVertexStream2iATI(int stream, int x, int y);
        public delegate void glVertexStream2ivATI(int stream, int* coords);
        public delegate void glVertexStream2sATI(int stream, short x, short y);
        public delegate void glVertexStream2svATI(int stream, short* coords);
        public delegate void glVertexStream3dATI(int stream, double x, double y, double z);
        public delegate void glVertexStream3dvATI(int stream, double* coords);
        public delegate void glVertexStream3fATI(int stream, float x, float y, float z);
        public delegate void glVertexStream3fvATI(int stream, float* coords);
        public delegate void glVertexStream3iATI(int stream, int x, int y, int z);
        public delegate void glVertexStream3ivATI(int stream, int* coords);
        public delegate void glVertexStream3sATI(int stream, short x, short y, short z);
        public delegate void glVertexStream3svATI(int stream, short* coords);
        public delegate void glVertexStream4dATI(int stream, double x, double y, double z, double w);
        public delegate void glVertexStream4dvATI(int stream, double* coords);
        public delegate void glVertexStream4fATI(int stream, float x, float y, float z, float w);
        public delegate void glVertexStream4fvATI(int stream, float* coords);
        public delegate void glVertexStream4iATI(int stream, int x, int y, int z, int w);
        public delegate void glVertexStream4ivATI(int stream, int* coords);
        public delegate void glVertexStream4sATI(int stream, short x, short y, short z, short w);
        public delegate void glVertexStream4svATI(int stream, short* coords);
        public delegate void glVertexWeightPointerEXT(int size, int type, int stride, IntPtr pointer);
        public delegate void glVertexWeightfEXT(float weight);
        public delegate void glVertexWeightfvEXT(float* weight);
        public delegate void glVertexWeighthNV(short weight);
        public delegate void glVertexWeighthvNV(short* weight);
        public delegate int glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time);
        public delegate void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double* _params);
        public delegate void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float* _params);
        public delegate void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int* _params);
        public delegate void glViewport(int x, int y, int width, int height);
        public delegate void glViewportArrayv(uint first, int count, float* v);
        public delegate void glViewportArrayvNV(uint first, int count, float* v);
        public delegate void glViewportArrayvOES(uint first, int count, float* v);
        public delegate void glViewportIndexedf(uint index, float x, float y, float w, float h);
        public delegate void glViewportIndexedfOES(uint index, float x, float y, float w, float h);
        public delegate void glViewportIndexedfNV(uint index, float x, float y, float w, float h);
        public delegate void glViewportIndexedfv(uint index, float* v);
        public delegate void glViewportIndexedfvOES(uint index, float* v);
        public delegate void glViewportIndexedfvNV(uint index, float* v);
        public delegate void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);
        public delegate void glViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew);
        public delegate void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts);
        public delegate void glWaitSync(IntPtr sync, uint flags, ulong timeout);
        public delegate void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout);
        public delegate void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights);
        public delegate void glWeightPointerARB(int size, int type, int stride, IntPtr pointer);
        public delegate void glWeightPointerOES(int size, int type, int stride, IntPtr pointer);
        public delegate void glWeightbvARB(int size, sbyte* weights);
        public delegate void glWeightdvARB(int size, double* weights);
        public delegate void glWeightfvARB(int size, float* weights);
        public delegate void glWeightivARB(int size, int* weights);
        public delegate void glWeightsvARB(int size, short* weights);
        public delegate void glWeightubvARB(int size, byte* weights);
        public delegate void glWeightuivARB(int size, uint* weights);
        public delegate void glWeightusvARB(int size, ushort* weights);
        public delegate void glWindowPos2d(double x, double y);
        public delegate void glWindowPos2dARB(double x, double y);
        public delegate void glWindowPos2dMESA(double x, double y);
        public delegate void glWindowPos2dv(double* v);
        public delegate void glWindowPos2dvARB(double* v);
        public delegate void glWindowPos2dvMESA(double* v);
        public delegate void glWindowPos2f(float x, float y);
        public delegate void glWindowPos2fARB(float x, float y);
        public delegate void glWindowPos2fMESA(float x, float y);
        public delegate void glWindowPos2fv(float* v);
        public delegate void glWindowPos2fvARB(float* v);
        public delegate void glWindowPos2fvMESA(float* v);
        public delegate void glWindowPos2i(int x, int y);
        public delegate void glWindowPos2iARB(int x, int y);
        public delegate void glWindowPos2iMESA(int x, int y);
        public delegate void glWindowPos2iv(int* v);
        public delegate void glWindowPos2ivARB(int* v);
        public delegate void glWindowPos2ivMESA(int* v);
        public delegate void glWindowPos2s(short x, short y);
        public delegate void glWindowPos2sARB(short x, short y);
        public delegate void glWindowPos2sMESA(short x, short y);
        public delegate void glWindowPos2sv(short* v);
        public delegate void glWindowPos2svARB(short* v);
        public delegate void glWindowPos2svMESA(short* v);
        public delegate void glWindowPos3d(double x, double y, double z);
        public delegate void glWindowPos3dARB(double x, double y, double z);
        public delegate void glWindowPos3dMESA(double x, double y, double z);
        public delegate void glWindowPos3dv(double* v);
        public delegate void glWindowPos3dvARB(double* v);
        public delegate void glWindowPos3dvMESA(double* v);
        public delegate void glWindowPos3f(float x, float y, float z);
        public delegate void glWindowPos3fARB(float x, float y, float z);
        public delegate void glWindowPos3fMESA(float x, float y, float z);
        public delegate void glWindowPos3fv(float* v);
        public delegate void glWindowPos3fvARB(float* v);
        public delegate void glWindowPos3fvMESA(float* v);
        public delegate void glWindowPos3i(int x, int y, int z);
        public delegate void glWindowPos3iARB(int x, int y, int z);
        public delegate void glWindowPos3iMESA(int x, int y, int z);
        public delegate void glWindowPos3iv(int* v);
        public delegate void glWindowPos3ivARB(int* v);
        public delegate void glWindowPos3ivMESA(int* v);
        public delegate void glWindowPos3s(short x, short y, short z);
        public delegate void glWindowPos3sARB(short x, short y, short z);
        public delegate void glWindowPos3sMESA(short x, short y, short z);
        public delegate void glWindowPos3sv(short* v);
        public delegate void glWindowPos3svARB(short* v);
        public delegate void glWindowPos3svMESA(short* v);
        public delegate void glWindowPos4dMESA(double x, double y, double z, double w);
        public delegate void glWindowPos4dvMESA(double* v);
        public delegate void glWindowPos4fMESA(float x, float y, float z, float w);
        public delegate void glWindowPos4fvMESA(float* v);
        public delegate void glWindowPos4iMESA(int x, int y, int z, int w);
        public delegate void glWindowPos4ivMESA(int* v);
        public delegate void glWindowPos4sMESA(short x, short y, short z, short w);
        public delegate void glWindowPos4svMESA(short* v);
        public delegate void glWindowRectanglesEXT(int mode, int count, int* box);
        public delegate void glWriteMaskEXT(uint res, uint _in, int outX, int outY, int outZ, int outW);
        public delegate void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
        public delegate IntPtr glGetVkProcAddrNV(string name);
        public delegate void glWaitVkSemaphoreNV(ulong vkSemaphore);
        public delegate void glSignalVkSemaphoreNV(ulong vkSemaphore);
        public delegate void glSignalVkFenceNV(ulong vkFence);
    }
}
