#pragma warning disable IDE1006

using System;
using System.Runtime.CompilerServices;

using JankWorks.Platform;

namespace JankWorks.Drivers.OpenGL.Native
{
	// Now thats terror
	static unsafe class Functions
	{
		private static delegate* unmanaged<int, float, void> glAccumPtr;
		private static delegate* unmanaged<int, IntPtr, void> glAccumxOESPtr;
		private static delegate* unmanaged<uint, void> glActiveProgramEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glActiveShaderProgramPtr;
		private static delegate* unmanaged<uint, uint, void> glActiveShaderProgramEXTPtr;
		private static delegate* unmanaged<int, void> glActiveStencilFaceEXTPtr;
		private static delegate* unmanaged<int, void> glActiveTexturePtr;
		private static delegate* unmanaged<int, void> glActiveTextureARBPtr;
		private static delegate* unmanaged<uint, byte*, void> glActiveVaryingNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, void> glAlphaFragmentOp1ATIPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, void> glAlphaFragmentOp2ATIPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> glAlphaFragmentOp3ATIPtr;
		private static delegate* unmanaged<int, float, void> glAlphaFuncPtr;
		private static delegate* unmanaged<int, float, void> glAlphaFuncQCOMPtr;
		private static delegate* unmanaged<int, IntPtr, void> glAlphaFuncxPtr;
		private static delegate* unmanaged<int, IntPtr, void> glAlphaFuncxOESPtr;
		private static delegate* unmanaged<int, void> glAlphaToCoverageDitherControlNVPtr;
		private static delegate* unmanaged<void> glApplyFramebufferAttachmentCMAAINTELPtr;
		private static delegate* unmanaged<int, void> glApplyTextureEXTPtr;
		private static delegate* unmanaged<uint, ulong, uint, bool> glAcquireKeyedMutexWin32EXTPtr;
		private static delegate* unmanaged<int, uint*, bool*, bool> glAreProgramsResidentNVPtr;
		private static delegate* unmanaged<int, uint*, bool*, bool> glAreTexturesResidentPtr;
		private static delegate* unmanaged<int, uint*, bool*, bool> glAreTexturesResidentEXTPtr;
		private static delegate* unmanaged<int, void> glArrayElementPtr;
		private static delegate* unmanaged<int, void> glArrayElementEXTPtr;
		private static delegate* unmanaged<int, int, int, int, uint, uint, void> glArrayObjectATIPtr;
		private static delegate* unmanaged<uint, void> glAsyncMarkerSGIXPtr;
		private static delegate* unmanaged<uint, uint, void> glAttachObjectARBPtr;
		private static delegate* unmanaged<uint, uint, void> glAttachShaderPtr;
		private static delegate* unmanaged<int, void> glBeginPtr;
		private static delegate* unmanaged<uint, int, void> glBeginConditionalRenderPtr;
		private static delegate* unmanaged<uint, int, void> glBeginConditionalRenderNVPtr;
		private static delegate* unmanaged<uint, void> glBeginConditionalRenderNVXPtr;
		private static delegate* unmanaged<void> glBeginFragmentShaderATIPtr;
		private static delegate* unmanaged<uint, void> glBeginOcclusionQueryNVPtr;
		private static delegate* unmanaged<uint, void> glBeginPerfMonitorAMDPtr;
		private static delegate* unmanaged<uint, void> glBeginPerfQueryINTELPtr;
		private static delegate* unmanaged<int, uint, void> glBeginQueryPtr;
		private static delegate* unmanaged<int, uint, void> glBeginQueryARBPtr;
		private static delegate* unmanaged<int, uint, void> glBeginQueryEXTPtr;
		private static delegate* unmanaged<int, uint, uint, void> glBeginQueryIndexedPtr;
		private static delegate* unmanaged<int, void> glBeginTransformFeedbackPtr;
		private static delegate* unmanaged<int, void> glBeginTransformFeedbackEXTPtr;
		private static delegate* unmanaged<int, void> glBeginTransformFeedbackNVPtr;
		private static delegate* unmanaged<void> glBeginVertexShaderEXTPtr;
		private static delegate* unmanaged<uint, void> glBeginVideoCaptureNVPtr;
		private static delegate* unmanaged<uint, uint, byte*, void> glBindAttribLocationPtr;
		private static delegate* unmanaged<uint, uint, byte*, void> glBindAttribLocationARBPtr;
		private static delegate* unmanaged<int, uint, void> glBindBufferPtr;
		private static delegate* unmanaged<int, uint, void> glBindBufferARBPtr;
		private static delegate* unmanaged<int, uint, uint, void> glBindBufferBasePtr;
		private static delegate* unmanaged<int, uint, uint, void> glBindBufferBaseEXTPtr;
		private static delegate* unmanaged<int, uint, uint, void> glBindBufferBaseNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, void> glBindBufferOffsetEXTPtr;
		private static delegate* unmanaged<int, uint, uint, uint, void> glBindBufferOffsetNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glBindBufferRangePtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glBindBufferRangeEXTPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glBindBufferRangeNVPtr;
		private static delegate* unmanaged<int, uint, int, uint*, void> glBindBuffersBasePtr;
		private static delegate* unmanaged<int, uint, int, uint*, uint*, uint*, void> glBindBuffersRangePtr;
		private static delegate* unmanaged<uint, uint, byte*, void> glBindFragDataLocationPtr;
		private static delegate* unmanaged<uint, uint, byte*, void> glBindFragDataLocationEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, byte*, void> glBindFragDataLocationIndexedPtr;
		private static delegate* unmanaged<uint, uint, uint, byte*, void> glBindFragDataLocationIndexedEXTPtr;
		private static delegate* unmanaged<uint, void> glBindFragmentShaderATIPtr;
		private static delegate* unmanaged<int, uint, void> glBindFramebufferPtr;
		private static delegate* unmanaged<int, uint, void> glBindFramebufferEXTPtr;
		private static delegate* unmanaged<int, uint, void> glBindFramebufferOESPtr;
		private static delegate* unmanaged<uint, uint, int, bool, int, int, int, void> glBindImageTexturePtr;
		private static delegate* unmanaged<uint, uint, int, bool, int, int, int, void> glBindImageTextureEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glBindImageTexturesPtr;
		private static delegate* unmanaged<int, int, uint> glBindLightParameterEXTPtr;
		private static delegate* unmanaged<int, int, uint> glBindMaterialParameterEXTPtr;
		private static delegate* unmanaged<int, int, uint, void> glBindMultiTextureEXTPtr;
		private static delegate* unmanaged<int, uint> glBindParameterEXTPtr;
		private static delegate* unmanaged<int, uint, void> glBindProgramARBPtr;
		private static delegate* unmanaged<int, uint, void> glBindProgramNVPtr;
		private static delegate* unmanaged<uint, void> glBindProgramPipelinePtr;
		private static delegate* unmanaged<uint, void> glBindProgramPipelineEXTPtr;
		private static delegate* unmanaged<int, uint, void> glBindRenderbufferPtr;
		private static delegate* unmanaged<int, uint, void> glBindRenderbufferEXTPtr;
		private static delegate* unmanaged<int, uint, void> glBindRenderbufferOESPtr;
		private static delegate* unmanaged<uint, uint, void> glBindSamplerPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glBindSamplersPtr;
		private static delegate* unmanaged<uint, void> glBindShadingRateImageNVPtr;
		private static delegate* unmanaged<int, int, int, uint> glBindTexGenParameterEXTPtr;
		private static delegate* unmanaged<int, uint, void> glBindTexturePtr;
		private static delegate* unmanaged<int, uint, void> glBindTextureEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glBindTextureUnitPtr;
		private static delegate* unmanaged<int, int, uint> glBindTextureUnitParameterEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glBindTexturesPtr;
		private static delegate* unmanaged<int, uint, void> glBindTransformFeedbackPtr;
		private static delegate* unmanaged<int, uint, void> glBindTransformFeedbackNVPtr;
		private static delegate* unmanaged<uint, void> glBindVertexArrayPtr;
		private static delegate* unmanaged<uint, void> glBindVertexArrayAPPLEPtr;
		private static delegate* unmanaged<uint, void> glBindVertexArrayOESPtr;
		private static delegate* unmanaged<uint, uint, uint, int, void> glBindVertexBufferPtr;
		private static delegate* unmanaged<uint, int, uint*, uint*, int*, void> glBindVertexBuffersPtr;
		private static delegate* unmanaged<uint, void> glBindVertexShaderEXTPtr;
		private static delegate* unmanaged<uint, uint, int, IntPtr, void> glBindVideoCaptureStreamBufferNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glBindVideoCaptureStreamTextureNVPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glBinormal3bEXTPtr;
		private static delegate* unmanaged<sbyte*, void> glBinormal3bvEXTPtr;
		private static delegate* unmanaged<double, double, double, void> glBinormal3dEXTPtr;
		private static delegate* unmanaged<double*, void> glBinormal3dvEXTPtr;
		private static delegate* unmanaged<float, float, float, void> glBinormal3fEXTPtr;
		private static delegate* unmanaged<float*, void> glBinormal3fvEXTPtr;
		private static delegate* unmanaged<int, int, int, void> glBinormal3iEXTPtr;
		private static delegate* unmanaged<int*, void> glBinormal3ivEXTPtr;
		private static delegate* unmanaged<short, short, short, void> glBinormal3sEXTPtr;
		private static delegate* unmanaged<short*, void> glBinormal3svEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glBinormalPointerEXTPtr;
		private static delegate* unmanaged<int, int, float, float, float, float, byte*, void> glBitmapPtr;
		private static delegate* unmanaged<int, int, IntPtr, IntPtr, IntPtr, IntPtr, byte*, void> glBitmapxOESPtr;
		private static delegate* unmanaged<void> glBlendBarrierPtr;
		private static delegate* unmanaged<void> glBlendBarrierKHRPtr;
		private static delegate* unmanaged<void> glBlendBarrierNVPtr;
		private static delegate* unmanaged<float, float, float, float, void> glBlendColorPtr;
		private static delegate* unmanaged<float, float, float, float, void> glBlendColorEXTPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glBlendColorxOESPtr;
		private static delegate* unmanaged<int, void> glBlendEquationPtr;
		private static delegate* unmanaged<int, void> glBlendEquationEXTPtr;
		private static delegate* unmanaged<uint, int, void> glBlendEquationIndexedAMDPtr;
		private static delegate* unmanaged<int, void> glBlendEquationOESPtr;
		private static delegate* unmanaged<int, int, void> glBlendEquationSeparatePtr;
		private static delegate* unmanaged<int, int, void> glBlendEquationSeparateEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendEquationSeparateIndexedAMDPtr;
		private static delegate* unmanaged<int, int, void> glBlendEquationSeparateOESPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendEquationSeparateiPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendEquationSeparateiARBPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendEquationSeparateiEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendEquationSeparateiOESPtr;
		private static delegate* unmanaged<uint, int, void> glBlendEquationiPtr;
		private static delegate* unmanaged<uint, int, void> glBlendEquationiARBPtr;
		private static delegate* unmanaged<uint, int, void> glBlendEquationiEXTPtr;
		private static delegate* unmanaged<uint, int, void> glBlendEquationiOESPtr;
		private static delegate* unmanaged<int, int, void> glBlendFuncPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendFuncIndexedAMDPtr;
		private static delegate* unmanaged<int, int, int, int, void> glBlendFuncSeparatePtr;
		private static delegate* unmanaged<int, int, int, int, void> glBlendFuncSeparateEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glBlendFuncSeparateINGRPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glBlendFuncSeparateIndexedAMDPtr;
		private static delegate* unmanaged<int, int, int, int, void> glBlendFuncSeparateOESPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glBlendFuncSeparateiPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glBlendFuncSeparateiARBPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glBlendFuncSeparateiEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glBlendFuncSeparateiOESPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendFunciPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendFunciARBPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendFunciEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glBlendFunciOESPtr;
		private static delegate* unmanaged<int, int, void> glBlendParameteriNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void> glBlitFramebufferPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void> glBlitFramebufferANGLEPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void> glBlitFramebufferEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void> glBlitFramebufferNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, int, void> glBlitNamedFramebufferPtr;
		private static delegate* unmanaged<int, uint, ulong, uint, void> glBufferAddressRangeNVPtr;
		private static delegate* unmanaged<int, uint, ulong, void> glBufferAttachMemoryNVPtr;
		private static delegate* unmanaged<int, uint, void*, int, void> glBufferDataPtr;
		private static delegate* unmanaged<int, uint, void*, int, void> glBufferDataARBPtr;
		private static delegate* unmanaged<int, uint, uint, bool, void> glBufferPageCommitmentARBPtr;
		private static delegate* unmanaged<int, int, int, void> glBufferParameteriAPPLEPtr;
		private static delegate* unmanaged<int, uint, void*, uint, void> glBufferStoragePtr;
		private static delegate* unmanaged<int, uint, void*, uint, void> glBufferStorageEXTPtr;
		private static delegate* unmanaged<int, uint, uint, IntPtr, uint, void> glBufferStorageExternalEXTPtr;
		private static delegate* unmanaged<int, uint, uint, ulong, void> glBufferStorageMemEXTPtr;
		private static delegate* unmanaged<int, uint, uint, void*, void> glBufferSubDataPtr;
		private static delegate* unmanaged<int, IntPtr, uint, IntPtr, void> glBufferSubDataARBPtr;
		private static delegate* unmanaged<uint, void> glCallCommandListNVPtr;
		private static delegate* unmanaged<uint, void> glCallListPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glCallListsPtr;
		private static delegate* unmanaged<int, int> glCheckFramebufferStatusPtr;
		private static delegate* unmanaged<int, int> glCheckFramebufferStatusEXTPtr;
		private static delegate* unmanaged<int, int> glCheckFramebufferStatusOESPtr;
		private static delegate* unmanaged<uint, int, int> glCheckNamedFramebufferStatusPtr;
		private static delegate* unmanaged<uint, int, int> glCheckNamedFramebufferStatusEXTPtr;
		private static delegate* unmanaged<int, int, void> glClampColorPtr;
		private static delegate* unmanaged<int, int, void> glClampColorARBPtr;
		private static delegate* unmanaged<uint, void> glClearPtr;
		private static delegate* unmanaged<float, float, float, float, void> glClearAccumPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glClearAccumxOESPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glClearBufferDataPtr;
		private static delegate* unmanaged<int, int, uint, uint, int, int, IntPtr, void> glClearBufferSubDataPtr;
		private static delegate* unmanaged<int, int, float, int, void> glClearBufferfiPtr;
		private static delegate* unmanaged<int, int, float*, void> glClearBufferfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glClearBufferivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glClearBufferuivPtr;
		private static delegate* unmanaged<float, float, float, float, void> glClearColorPtr;
		private static delegate* unmanaged<int, int, int, int, void> glClearColorIiEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, void> glClearColorIuiEXTPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glClearColorxPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glClearColorxOESPtr;
		private static delegate* unmanaged<double, void> glClearDepthPtr;
		private static delegate* unmanaged<double, void> glClearDepthdNVPtr;
		private static delegate* unmanaged<float, void> glClearDepthfPtr;
		private static delegate* unmanaged<float, void> glClearDepthfOESPtr;
		private static delegate* unmanaged<IntPtr, void> glClearDepthxPtr;
		private static delegate* unmanaged<IntPtr, void> glClearDepthxOESPtr;
		private static delegate* unmanaged<float, void> glClearIndexPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glClearNamedBufferDataPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glClearNamedBufferDataEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, int, int, IntPtr, void> glClearNamedBufferSubDataPtr;
		private static delegate* unmanaged<uint, int, uint, uint, int, int, IntPtr, void> glClearNamedBufferSubDataEXTPtr;
		private static delegate* unmanaged<uint, int, int, float, int, void> glClearNamedFramebufferfiPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glClearNamedFramebufferfvPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glClearNamedFramebufferivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glClearNamedFramebufferuivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glClearPixelLocalStorageuiEXTPtr;
		private static delegate* unmanaged<int, void> glClearStencilPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glClearTexImagePtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glClearTexImageEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void> glClearTexSubImagePtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void> glClearTexSubImageEXTPtr;
		private static delegate* unmanaged<int, void> glClientActiveTexturePtr;
		private static delegate* unmanaged<int, void> glClientActiveTextureARBPtr;
		private static delegate* unmanaged<int, void> glClientActiveVertexStreamATIPtr;
		private static delegate* unmanaged<uint, void> glClientAttribDefaultEXTPtr;
		private static delegate* unmanaged<IntPtr, uint, ulong, int> glClientWaitSyncPtr;
		private static delegate* unmanaged<IntPtr, uint, ulong, int> glClientWaitSyncAPPLEPtr;
		private static delegate* unmanaged<int, int, void> glClipControlPtr;
		private static delegate* unmanaged<int, int, void> glClipControlEXTPtr;
		private static delegate* unmanaged<int, double*, void> glClipPlanePtr;
		private static delegate* unmanaged<int, float*, void> glClipPlanefPtr;
		private static delegate* unmanaged<int, float*, void> glClipPlanefIMGPtr;
		private static delegate* unmanaged<int, float*, void> glClipPlanefOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glClipPlanexPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glClipPlanexIMGPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glClipPlanexOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glColor3bPtr;
		private static delegate* unmanaged<sbyte*, void> glColor3bvPtr;
		private static delegate* unmanaged<double, double, double, void> glColor3dPtr;
		private static delegate* unmanaged<double*, void> glColor3dvPtr;
		private static delegate* unmanaged<float, float, float, void> glColor3fPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glColor3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, void> glColor3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float*, void> glColor3fvPtr;
		private static delegate* unmanaged<short, short, short, void> glColor3hNVPtr;
		private static delegate* unmanaged<short*, void> glColor3hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glColor3iPtr;
		private static delegate* unmanaged<int*, void> glColor3ivPtr;
		private static delegate* unmanaged<short, short, short, void> glColor3sPtr;
		private static delegate* unmanaged<short*, void> glColor3svPtr;
		private static delegate* unmanaged<byte, byte, byte, void> glColor3ubPtr;
		private static delegate* unmanaged<byte*, void> glColor3ubvPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glColor3uiPtr;
		private static delegate* unmanaged<uint*, void> glColor3uivPtr;
		private static delegate* unmanaged<ushort, ushort, ushort, void> glColor3usPtr;
		private static delegate* unmanaged<ushort*, void> glColor3usvPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glColor3xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glColor3xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> glColor4bPtr;
		private static delegate* unmanaged<sbyte*, void> glColor4bvPtr;
		private static delegate* unmanaged<double, double, double, double, void> glColor4dPtr;
		private static delegate* unmanaged<double*, void> glColor4dvPtr;
		private static delegate* unmanaged<float, float, float, float, void> glColor4fPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void> glColor4fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, float*, void> glColor4fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float*, void> glColor4fvPtr;
		private static delegate* unmanaged<short, short, short, short, void> glColor4hNVPtr;
		private static delegate* unmanaged<short*, void> glColor4hvNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glColor4iPtr;
		private static delegate* unmanaged<int*, void> glColor4ivPtr;
		private static delegate* unmanaged<short, short, short, short, void> glColor4sPtr;
		private static delegate* unmanaged<short*, void> glColor4svPtr;
		private static delegate* unmanaged<byte, byte, byte, byte, void> glColor4ubPtr;
		private static delegate* unmanaged<byte, byte, byte, byte, float, float, void> glColor4ubVertex2fSUNPtr;
		private static delegate* unmanaged<byte*, float*, void> glColor4ubVertex2fvSUNPtr;
		private static delegate* unmanaged<byte, byte, byte, byte, float, float, float, void> glColor4ubVertex3fSUNPtr;
		private static delegate* unmanaged<byte*, float*, void> glColor4ubVertex3fvSUNPtr;
		private static delegate* unmanaged<byte*, void> glColor4ubvPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, void> glColor4uiPtr;
		private static delegate* unmanaged<uint*, void> glColor4uivPtr;
		private static delegate* unmanaged<ushort, ushort, ushort, ushort, void> glColor4usPtr;
		private static delegate* unmanaged<ushort*, void> glColor4usvPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glColor4xPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glColor4xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glColor4xvOESPtr;
		private static delegate* unmanaged<int, int, int, void> glColorFormatNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void> glColorFragmentOp1ATIPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> glColorFragmentOp2ATIPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> glColorFragmentOp3ATIPtr;
		private static delegate* unmanaged<bool, bool, bool, bool, void> glColorMaskPtr;
		private static delegate* unmanaged<uint, bool, bool, bool, bool, void> glColorMaskIndexedEXTPtr;
		private static delegate* unmanaged<uint, bool, bool, bool, bool, void> glColorMaskiPtr;
		private static delegate* unmanaged<uint, bool, bool, bool, bool, void> glColorMaskiEXTPtr;
		private static delegate* unmanaged<uint, bool, bool, bool, bool, void> glColorMaskiOESPtr;
		private static delegate* unmanaged<int, int, void> glColorMaterialPtr;
		private static delegate* unmanaged<int, uint, void> glColorP3uiPtr;
		private static delegate* unmanaged<int, uint*, void> glColorP3uivPtr;
		private static delegate* unmanaged<int, uint, void> glColorP4uiPtr;
		private static delegate* unmanaged<int, uint*, void> glColorP4uivPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glColorPointerPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glColorPointerEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr*, int, void> glColorPointerListIBMPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glColorPointervINTELPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glColorSubTablePtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glColorSubTableEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glColorTablePtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glColorTableEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glColorTableParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glColorTableParameterfvSGIPtr;
		private static delegate* unmanaged<int, int, int*, void> glColorTableParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glColorTableParameterivSGIPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glColorTableSGIPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glCombinerInputNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, bool, bool, bool, void> glCombinerOutputNVPtr;
		private static delegate* unmanaged<int, float, void> glCombinerParameterfNVPtr;
		private static delegate* unmanaged<int, float*, void> glCombinerParameterfvNVPtr;
		private static delegate* unmanaged<int, int, void> glCombinerParameteriNVPtr;
		private static delegate* unmanaged<int, int*, void> glCombinerParameterivNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glCombinerStageParameterfvNVPtr;
		private static delegate* unmanaged<uint, uint, void> glCommandListSegmentsNVPtr;
		private static delegate* unmanaged<uint, void> glCompileCommandListNVPtr;
		private static delegate* unmanaged<uint, void> glCompileShaderPtr;
		private static delegate* unmanaged<uint, void> glCompileShaderARBPtr;
		private static delegate* unmanaged<uint, int, byte**, int*, void> glCompileShaderIncludeARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexSubImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexSubImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedMultiTexSubImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glCompressedTexImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glCompressedTexImage1DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glCompressedTexImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glCompressedTexImage2DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexImage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexImage3DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexImage3DOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage1DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage2DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage3DARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTexSubImage3DOESPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void> glCompressedTextureImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureImage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureImage3DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage1DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage2DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage3DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glCompressedTextureSubImage3DEXTPtr;
		private static delegate* unmanaged<int, float, void> glConservativeRasterParameterfNVPtr;
		private static delegate* unmanaged<int, int, void> glConservativeRasterParameteriNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glConvolutionFilter1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glConvolutionFilter1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glConvolutionFilter2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glConvolutionFilter2DEXTPtr;
		private static delegate* unmanaged<int, int, float, void> glConvolutionParameterfPtr;
		private static delegate* unmanaged<int, int, float, void> glConvolutionParameterfEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glConvolutionParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glConvolutionParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int, void> glConvolutionParameteriPtr;
		private static delegate* unmanaged<int, int, int, void> glConvolutionParameteriEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glConvolutionParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glConvolutionParameterivEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glConvolutionParameterxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glConvolutionParameterxvOESPtr;
		private static delegate* unmanaged<int, int, uint, uint, uint, void> glCopyBufferSubDataPtr;
		private static delegate* unmanaged<int, int, uint, uint, uint, void> glCopyBufferSubDataNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyColorSubTablePtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyColorSubTableEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyColorTablePtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyColorTableSGIPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyConvolutionFilter1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyConvolutionFilter1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glCopyConvolutionFilter2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glCopyConvolutionFilter2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glCopyImageSubDataPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glCopyImageSubDataEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glCopyImageSubDataNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glCopyImageSubDataOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, void> glCopyMultiTexImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> glCopyMultiTexImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, void> glCopyMultiTexSubImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> glCopyMultiTexSubImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, void> glCopyMultiTexSubImage3DEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glCopyNamedBufferSubDataPtr;
		private static delegate* unmanaged<uint, uint, void> glCopyPathNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glCopyPixelsPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, void> glCopyTexImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, void> glCopyTexImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, void> glCopyTexImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, void> glCopyTexImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glCopyTexSubImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glCopyTexSubImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, void> glCopyTexSubImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, void> glCopyTexSubImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> glCopyTexSubImage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> glCopyTexSubImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> glCopyTexSubImage3DOESPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> glCopyTextureImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> glCopyTextureImage2DEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, void> glCopyTextureLevelsAPPLEPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glCopyTextureSubImage1DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, void> glCopyTextureSubImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> glCopyTextureSubImage2DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> glCopyTextureSubImage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> glCopyTextureSubImage3DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void> glCopyTextureSubImage3DEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, int, float*, void> glCoverFillPathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, void> glCoverFillPathNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, int, float*, void> glCoverStrokePathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, void> glCoverStrokePathNVPtr;
		private static delegate* unmanaged<bool, void> glCoverageMaskNVPtr;
		private static delegate* unmanaged<int, void> glCoverageModulationNVPtr;
		private static delegate* unmanaged<int, float*, void> glCoverageModulationTableNVPtr;
		private static delegate* unmanaged<int, void> glCoverageOperationNVPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateBuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateCommandListsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateFramebuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateMemoryObjectsEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glCreatePerfQueryINTELPtr;
		private static delegate* unmanaged<uint> glCreateProgramPtr;
		private static delegate* unmanaged<uint> glCreateProgramObjectARBPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateProgramPipelinesPtr;
		private static delegate* unmanaged<int, int, uint*, void> glCreateQueriesPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateRenderbuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateSamplersPtr;
		private static delegate* unmanaged<int, uint> glCreateShaderPtr;
		private static delegate* unmanaged<int, uint> glCreateShaderObjectARBPtr;
		private static delegate* unmanaged<int, byte*, uint> glCreateShaderProgramEXTPtr;
		private static delegate* unmanaged<int, int, byte**, uint> glCreateShaderProgramvPtr;
		private static delegate* unmanaged<int, int, byte**, uint> glCreateShaderProgramvEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateStatesNVPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, uint, IntPtr> glCreateSyncFromCLeventARBPtr;
		private static delegate* unmanaged<int, int, uint*, void> glCreateTexturesPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateTransformFeedbacksPtr;
		private static delegate* unmanaged<int, uint*, void> glCreateVertexArraysPtr;
		private static delegate* unmanaged<int, void> glCullFacePtr;
		private static delegate* unmanaged<int, double*, void> glCullParameterdvEXTPtr;
		private static delegate* unmanaged<int, float*, void> glCullParameterfvEXTPtr;
		private static delegate* unmanaged<int, void> glCurrentPaletteMatrixARBPtr;
		private static delegate* unmanaged<uint, void> glCurrentPaletteMatrixOESPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDebugMessageCallbackPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDebugMessageCallbackAMDPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDebugMessageCallbackARBPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDebugMessageCallbackKHRPtr;
		private static delegate* unmanaged<int, int, int, int, uint*, bool, void> glDebugMessageControlPtr;
		private static delegate* unmanaged<int, int, int, int, uint*, bool, void> glDebugMessageControlARBPtr;
		private static delegate* unmanaged<int, int, int, int, uint*, bool, void> glDebugMessageControlKHRPtr;
		private static delegate* unmanaged<int, int, int, uint*, bool, void> glDebugMessageEnableAMDPtr;
		private static delegate* unmanaged<int, int, uint, int, int, byte*, void> glDebugMessageInsertPtr;
		private static delegate* unmanaged<int, int, uint, int, byte*, void> glDebugMessageInsertAMDPtr;
		private static delegate* unmanaged<int, int, uint, int, int, byte*, void> glDebugMessageInsertARBPtr;
		private static delegate* unmanaged<int, int, uint, int, int, byte*, void> glDebugMessageInsertKHRPtr;
		private static delegate* unmanaged<uint, void> glDeformSGIXPtr;
		private static delegate* unmanaged<int, double, double, int, int, double, double, int, int, double, double, int, int, double*, void> glDeformationMap3dSGIXPtr;
		private static delegate* unmanaged<int, float, float, int, int, float, float, int, int, float, float, int, int, float*, void> glDeformationMap3fSGIXPtr;
		private static delegate* unmanaged<uint, int, void> glDeleteAsyncMarkersSGIXPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteBuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteBuffersARBPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteCommandListsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteFencesAPPLEPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteFencesNVPtr;
		private static delegate* unmanaged<uint, void> glDeleteFragmentShaderATIPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteFramebuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteFramebuffersEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteFramebuffersOESPtr;
		private static delegate* unmanaged<uint, int, void> glDeleteListsPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteMemoryObjectsEXTPtr;
		private static delegate* unmanaged<int, byte*, void> glDeleteNamedStringARBPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glDeleteNamesAMDPtr;
		private static delegate* unmanaged<uint, void> glDeleteObjectARBPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteOcclusionQueriesNVPtr;
		private static delegate* unmanaged<uint, int, void> glDeletePathsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glDeletePerfMonitorsAMDPtr;
		private static delegate* unmanaged<uint, void> glDeletePerfQueryINTELPtr;
		private static delegate* unmanaged<uint, void> glDeleteProgramPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteProgramPipelinesPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteProgramPipelinesEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteProgramsARBPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteProgramsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteQueriesPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteQueriesARBPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteQueriesEXTPtr;
		private static delegate* unmanaged<int, int*, void> glDeleteQueryResourceTagNVPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteRenderbuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteRenderbuffersEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteRenderbuffersOESPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteSamplersPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteSemaphoresEXTPtr;
		private static delegate* unmanaged<uint, void> glDeleteShaderPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteStatesNVPtr;
		private static delegate* unmanaged<IntPtr, void> glDeleteSyncPtr;
		private static delegate* unmanaged<IntPtr, void> glDeleteSyncAPPLEPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteTexturesPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteTexturesEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteTransformFeedbacksPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteTransformFeedbacksNVPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteVertexArraysPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteVertexArraysAPPLEPtr;
		private static delegate* unmanaged<int, uint*, void> glDeleteVertexArraysOESPtr;
		private static delegate* unmanaged<uint, void> glDeleteVertexShaderEXTPtr;
		private static delegate* unmanaged<double, double, void> glDepthBoundsEXTPtr;
		private static delegate* unmanaged<double, double, void> glDepthBoundsdNVPtr;
		private static delegate* unmanaged<int, void> glDepthFuncPtr;
		private static delegate* unmanaged<bool, void> glDepthMaskPtr;
		private static delegate* unmanaged<double, double, void> glDepthRangePtr;
		private static delegate* unmanaged<uint, int, float*, void> glDepthRangeArrayfvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glDepthRangeArrayfvOESPtr;
		private static delegate* unmanaged<uint, int, double*, void> glDepthRangeArrayvPtr;
		private static delegate* unmanaged<uint, double, double, void> glDepthRangeIndexedPtr;
		private static delegate* unmanaged<uint, float, float, void> glDepthRangeIndexedfNVPtr;
		private static delegate* unmanaged<uint, float, float, void> glDepthRangeIndexedfOESPtr;
		private static delegate* unmanaged<double, double, void> glDepthRangedNVPtr;
		private static delegate* unmanaged<float, float, void> glDepthRangefPtr;
		private static delegate* unmanaged<float, float, void> glDepthRangefOESPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDepthRangexPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glDepthRangexOESPtr;
		private static delegate* unmanaged<uint, uint, void> glDetachObjectARBPtr;
		private static delegate* unmanaged<uint, uint, void> glDetachShaderPtr;
		private static delegate* unmanaged<int, int, float*, void> glDetailTexFuncSGISPtr;
		private static delegate* unmanaged<int, void> glDisablePtr;
		private static delegate* unmanaged<int, void> glDisableClientStatePtr;
		private static delegate* unmanaged<int, uint, void> glDisableClientStateIndexedEXTPtr;
		private static delegate* unmanaged<int, uint, void> glDisableClientStateiEXTPtr;
		private static delegate* unmanaged<uint, void> glDisableDriverControlQCOMPtr;
		private static delegate* unmanaged<int, uint, void> glDisableIndexedEXTPtr;
		private static delegate* unmanaged<uint, void> glDisableVariantClientStateEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glDisableVertexArrayAttribPtr;
		private static delegate* unmanaged<uint, uint, void> glDisableVertexArrayAttribEXTPtr;
		private static delegate* unmanaged<uint, int, void> glDisableVertexArrayEXTPtr;
		private static delegate* unmanaged<uint, int, void> glDisableVertexAttribAPPLEPtr;
		private static delegate* unmanaged<uint, void> glDisableVertexAttribArrayPtr;
		private static delegate* unmanaged<uint, void> glDisableVertexAttribArrayARBPtr;
		private static delegate* unmanaged<int, uint, void> glDisableiPtr;
		private static delegate* unmanaged<int, uint, void> glDisableiEXTPtr;
		private static delegate* unmanaged<int, uint, void> glDisableiNVPtr;
		private static delegate* unmanaged<int, uint, void> glDisableiOESPtr;
		private static delegate* unmanaged<int, int, uint*, void> glDiscardFramebufferEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glDispatchComputePtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> glDispatchComputeGroupSizeARBPtr;
		private static delegate* unmanaged<uint, void> glDispatchComputeIndirectPtr;
		private static delegate* unmanaged<int, int, int, void> glDrawArraysPtr;
		private static delegate* unmanaged<int, int, int, void> glDrawArraysEXTPtr;
		private static delegate* unmanaged<int, IntPtr, void> glDrawArraysIndirectPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawArraysInstancedPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawArraysInstancedANGLEPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawArraysInstancedARBPtr;
		private static delegate* unmanaged<int, int, int, int, uint, void> glDrawArraysInstancedBaseInstancePtr;
		private static delegate* unmanaged<int, int, int, int, uint, void> glDrawArraysInstancedBaseInstanceEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawArraysInstancedEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawArraysInstancedNVPtr;
		private static delegate* unmanaged<int, void> glDrawBufferPtr;
		private static delegate* unmanaged<int, uint*, void> glDrawBuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glDrawBuffersARBPtr;
		private static delegate* unmanaged<int, uint*, void> glDrawBuffersATIPtr;
		private static delegate* unmanaged<int, uint*, void> glDrawBuffersEXTPtr;
		private static delegate* unmanaged<int, uint*, int*, void> glDrawBuffersIndexedEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glDrawBuffersNVPtr;
		private static delegate* unmanaged<int, ulong*, int*, uint, void> glDrawCommandsAddressNVPtr;
		private static delegate* unmanaged<int, uint, uint*, int*, uint, void> glDrawCommandsNVPtr;
		private static delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void> glDrawCommandsStatesAddressNVPtr;
		private static delegate* unmanaged<uint, uint*, int*, uint*, uint*, uint, void> glDrawCommandsStatesNVPtr;
		private static delegate* unmanaged<int, int, int, void> glDrawElementArrayAPPLEPtr;
		private static delegate* unmanaged<int, int, void> glDrawElementArrayATIPtr;
		private static delegate* unmanaged<int, int, int, void*, void> glDrawElementsPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsBaseVertexPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsBaseVertexEXTPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsBaseVertexOESPtr;
		private static delegate* unmanaged<int, int, void*, void> glDrawElementsIndirectPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsInstancedPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsInstancedANGLEPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsInstancedARBPtr;
		private static delegate* unmanaged<int, int, int, void*, int, uint, void> glDrawElementsInstancedBaseInstancePtr;
		private static delegate* unmanaged<int, int, int, void*, int, uint, void> glDrawElementsInstancedBaseInstanceEXTPtr;
		private static delegate* unmanaged<int, int, int, void*, int, int, void> glDrawElementsInstancedBaseVertexPtr;
		private static delegate* unmanaged<int, int, int, void*, int, int, uint, void> glDrawElementsInstancedBaseVertexBaseInstancePtr;
		private static delegate* unmanaged<int, int, int, void*, int, int, uint, void> glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr;
		private static delegate* unmanaged<int, int, int, void*, int, int, void> glDrawElementsInstancedBaseVertexEXTPtr;
		private static delegate* unmanaged<int, int, int, void*, int, int, void> glDrawElementsInstancedBaseVertexOESPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsInstancedEXTPtr;
		private static delegate* unmanaged<int, int, int, void*, int, void> glDrawElementsInstancedNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glDrawMeshArraysSUNPtr;
		private static delegate* unmanaged<uint, uint, void> glDrawMeshTasksNVPtr;
		private static delegate* unmanaged<uint, void> glDrawMeshTasksIndirectNVPtr;
		private static delegate* unmanaged<int, int, int, int, void*, void> glDrawPixelsPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void> glDrawRangeElementArrayAPPLEPtr;
		private static delegate* unmanaged<int, uint, uint, int, void> glDrawRangeElementArrayATIPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void*, void> glDrawRangeElementsPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void*, int, void> glDrawRangeElementsBaseVertexPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void*, int, void> glDrawRangeElementsBaseVertexEXTPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void*, int, void> glDrawRangeElementsBaseVertexOESPtr;
		private static delegate* unmanaged<int, uint, uint, int, int, void*, void> glDrawRangeElementsEXTPtr;
		private static delegate* unmanaged<float, float, float, float, float, void> glDrawTexfOESPtr;
		private static delegate* unmanaged<float*, void> glDrawTexfvOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glDrawTexiOESPtr;
		private static delegate* unmanaged<int*, void> glDrawTexivOESPtr;
		private static delegate* unmanaged<short, short, short, short, short, void> glDrawTexsOESPtr;
		private static delegate* unmanaged<short*, void> glDrawTexsvOESPtr;
		private static delegate* unmanaged<uint, uint, float, float, float, float, float, float, float, float, float, void> glDrawTextureNVPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> glDrawTexxOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glDrawTexxvOESPtr;
		private static delegate* unmanaged<int, uint, void> glDrawTransformFeedbackPtr;
		private static delegate* unmanaged<int, uint, void> glDrawTransformFeedbackEXTPtr;
		private static delegate* unmanaged<int, uint, int, void> glDrawTransformFeedbackInstancedPtr;
		private static delegate* unmanaged<int, uint, int, void> glDrawTransformFeedbackInstancedEXTPtr;
		private static delegate* unmanaged<int, uint, void> glDrawTransformFeedbackNVPtr;
		private static delegate* unmanaged<int, uint, uint, void> glDrawTransformFeedbackStreamPtr;
		private static delegate* unmanaged<int, uint, uint, int, void> glDrawTransformFeedbackStreamInstancedPtr;
		private static delegate* unmanaged<int, IntPtr, void> glEGLImageTargetRenderbufferStorageOESPtr;
		private static delegate* unmanaged<int, IntPtr, int*, void> glEGLImageTargetTexStorageEXTPtr;
		private static delegate* unmanaged<int, IntPtr, void> glEGLImageTargetTexture2DOESPtr;
		private static delegate* unmanaged<uint, IntPtr, int*, void> glEGLImageTargetTextureStorageEXTPtr;
		private static delegate* unmanaged<bool, void> glEdgeFlagPtr;
		private static delegate* unmanaged<int, void> glEdgeFlagFormatNVPtr;
		private static delegate* unmanaged<int, IntPtr, void> glEdgeFlagPointerPtr;
		private static delegate* unmanaged<int, int, bool*, void> glEdgeFlagPointerEXTPtr;
		private static delegate* unmanaged<int, bool*, int, void> glEdgeFlagPointerListIBMPtr;
		private static delegate* unmanaged<bool*, void> glEdgeFlagvPtr;
		private static delegate* unmanaged<int, IntPtr, void> glElementPointerAPPLEPtr;
		private static delegate* unmanaged<int, IntPtr, void> glElementPointerATIPtr;
		private static delegate* unmanaged<int, void> glEnablePtr;
		private static delegate* unmanaged<int, void> glEnableClientStatePtr;
		private static delegate* unmanaged<int, uint, void> glEnableClientStateIndexedEXTPtr;
		private static delegate* unmanaged<int, uint, void> glEnableClientStateiEXTPtr;
		private static delegate* unmanaged<uint, void> glEnableDriverControlQCOMPtr;
		private static delegate* unmanaged<int, uint, void> glEnableIndexedEXTPtr;
		private static delegate* unmanaged<uint, void> glEnableVariantClientStateEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glEnableVertexArrayAttribPtr;
		private static delegate* unmanaged<uint, uint, void> glEnableVertexArrayAttribEXTPtr;
		private static delegate* unmanaged<uint, int, void> glEnableVertexArrayEXTPtr;
		private static delegate* unmanaged<uint, int, void> glEnableVertexAttribAPPLEPtr;
		private static delegate* unmanaged<uint, void> glEnableVertexAttribArrayPtr;
		private static delegate* unmanaged<uint, void> glEnableVertexAttribArrayARBPtr;
		private static delegate* unmanaged<int, uint, void> glEnableiPtr;
		private static delegate* unmanaged<int, uint, void> glEnableiEXTPtr;
		private static delegate* unmanaged<int, uint, void> glEnableiNVPtr;
		private static delegate* unmanaged<int, uint, void> glEnableiOESPtr;
		private static delegate* unmanaged<void> glEndPtr;
		private static delegate* unmanaged<void> glEndConditionalRenderPtr;
		private static delegate* unmanaged<void> glEndConditionalRenderNVPtr;
		private static delegate* unmanaged<void> glEndConditionalRenderNVXPtr;
		private static delegate* unmanaged<void> glEndFragmentShaderATIPtr;
		private static delegate* unmanaged<void> glEndListPtr;
		private static delegate* unmanaged<void> glEndOcclusionQueryNVPtr;
		private static delegate* unmanaged<uint, void> glEndPerfMonitorAMDPtr;
		private static delegate* unmanaged<uint, void> glEndPerfQueryINTELPtr;
		private static delegate* unmanaged<int, void> glEndQueryPtr;
		private static delegate* unmanaged<int, void> glEndQueryARBPtr;
		private static delegate* unmanaged<int, void> glEndQueryEXTPtr;
		private static delegate* unmanaged<int, uint, void> glEndQueryIndexedPtr;
		private static delegate* unmanaged<uint, void> glEndTilingQCOMPtr;
		private static delegate* unmanaged<void> glEndTransformFeedbackPtr;
		private static delegate* unmanaged<void> glEndTransformFeedbackEXTPtr;
		private static delegate* unmanaged<void> glEndTransformFeedbackNVPtr;
		private static delegate* unmanaged<void> glEndVertexShaderEXTPtr;
		private static delegate* unmanaged<uint, void> glEndVideoCaptureNVPtr;
		private static delegate* unmanaged<double, void> glEvalCoord1dPtr;
		private static delegate* unmanaged<double*, void> glEvalCoord1dvPtr;
		private static delegate* unmanaged<float, void> glEvalCoord1fPtr;
		private static delegate* unmanaged<float*, void> glEvalCoord1fvPtr;
		private static delegate* unmanaged<IntPtr, void> glEvalCoord1xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glEvalCoord1xvOESPtr;
		private static delegate* unmanaged<double, double, void> glEvalCoord2dPtr;
		private static delegate* unmanaged<double*, void> glEvalCoord2dvPtr;
		private static delegate* unmanaged<float, float, void> glEvalCoord2fPtr;
		private static delegate* unmanaged<float*, void> glEvalCoord2fvPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glEvalCoord2xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glEvalCoord2xvOESPtr;
		private static delegate* unmanaged<int, int, void> glEvalMapsNVPtr;
		private static delegate* unmanaged<int, int, int, void> glEvalMesh1Ptr;
		private static delegate* unmanaged<int, int, int, int, int, void> glEvalMesh2Ptr;
		private static delegate* unmanaged<int, void> glEvalPoint1Ptr;
		private static delegate* unmanaged<int, int, void> glEvalPoint2Ptr;
		private static delegate* unmanaged<void> glEvaluateDepthValuesARBPtr;
		private static delegate* unmanaged<int, uint, float*, void> glExecuteProgramNVPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glExtGetBufferPointervQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetBuffersQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetFramebuffersQCOMPtr;
		private static delegate* unmanaged<uint, int, byte*, int*, void> glExtGetProgramBinarySourceQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetProgramsQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetRenderbuffersQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetShadersQCOMPtr;
		private static delegate* unmanaged<uint, int, int, int, int*, void> glExtGetTexLevelParameterivQCOMPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glExtGetTexSubImageQCOMPtr;
		private static delegate* unmanaged<uint*, int, int*, void> glExtGetTexturesQCOMPtr;
		private static delegate* unmanaged<uint, bool> glExtIsProgramBinaryQCOMPtr;
		private static delegate* unmanaged<int, int, int, void> glExtTexObjectStateOverrideiQCOMPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glExtractComponentEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glFeedbackBufferPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glFeedbackBufferxOESPtr;
		private static delegate* unmanaged<int, uint, IntPtr> glFenceSyncPtr;
		private static delegate* unmanaged<int, uint, IntPtr> glFenceSyncAPPLEPtr;
		private static delegate* unmanaged<int, int, int, int, void> glFinalCombinerInputNVPtr;
		private static delegate* unmanaged<void> glFinishPtr;
		private static delegate* unmanaged<uint*, int> glFinishAsyncSGIXPtr;
		private static delegate* unmanaged<uint, void> glFinishFenceAPPLEPtr;
		private static delegate* unmanaged<uint, void> glFinishFenceNVPtr;
		private static delegate* unmanaged<int, int, void> glFinishObjectAPPLEPtr;
		private static delegate* unmanaged<void> glFinishTextureSUNXPtr;
		private static delegate* unmanaged<void> glFlushPtr;
		private static delegate* unmanaged<int, uint, uint, void> glFlushMappedBufferRangePtr;
		private static delegate* unmanaged<int, uint, uint, void> glFlushMappedBufferRangeAPPLEPtr;
		private static delegate* unmanaged<int, uint, uint, void> glFlushMappedBufferRangeEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glFlushMappedNamedBufferRangePtr;
		private static delegate* unmanaged<uint, uint, uint, void> glFlushMappedNamedBufferRangeEXTPtr;
		private static delegate* unmanaged<int, void> glFlushPixelDataRangeNVPtr;
		private static delegate* unmanaged<void> glFlushRasterSGIXPtr;
		private static delegate* unmanaged<int, void> glFlushStaticDataIBMPtr;
		private static delegate* unmanaged<int, IntPtr, void> glFlushVertexArrayRangeAPPLEPtr;
		private static delegate* unmanaged<void> glFlushVertexArrayRangeNVPtr;
		private static delegate* unmanaged<int, int, void> glFogCoordFormatNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glFogCoordPointerPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glFogCoordPointerEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr*, int, void> glFogCoordPointerListIBMPtr;
		private static delegate* unmanaged<double, void> glFogCoorddPtr;
		private static delegate* unmanaged<double, void> glFogCoorddEXTPtr;
		private static delegate* unmanaged<double*, void> glFogCoorddvPtr;
		private static delegate* unmanaged<double*, void> glFogCoorddvEXTPtr;
		private static delegate* unmanaged<float, void> glFogCoordfPtr;
		private static delegate* unmanaged<float, void> glFogCoordfEXTPtr;
		private static delegate* unmanaged<float*, void> glFogCoordfvPtr;
		private static delegate* unmanaged<float*, void> glFogCoordfvEXTPtr;
		private static delegate* unmanaged<short, void> glFogCoordhNVPtr;
		private static delegate* unmanaged<short*, void> glFogCoordhvNVPtr;
		private static delegate* unmanaged<int, float*, void> glFogFuncSGISPtr;
		private static delegate* unmanaged<int, float, void> glFogfPtr;
		private static delegate* unmanaged<int, float*, void> glFogfvPtr;
		private static delegate* unmanaged<int, int, void> glFogiPtr;
		private static delegate* unmanaged<int, int*, void> glFogivPtr;
		private static delegate* unmanaged<int, IntPtr, void> glFogxPtr;
		private static delegate* unmanaged<int, IntPtr, void> glFogxOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glFogxvPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glFogxvOESPtr;
		private static delegate* unmanaged<int, int, void> glFragmentColorMaterialSGIXPtr;
		private static delegate* unmanaged<uint, void> glFragmentCoverageColorNVPtr;
		private static delegate* unmanaged<int, float, void> glFragmentLightModelfSGIXPtr;
		private static delegate* unmanaged<int, float*, void> glFragmentLightModelfvSGIXPtr;
		private static delegate* unmanaged<int, int, void> glFragmentLightModeliSGIXPtr;
		private static delegate* unmanaged<int, int*, void> glFragmentLightModelivSGIXPtr;
		private static delegate* unmanaged<int, int, float, void> glFragmentLightfSGIXPtr;
		private static delegate* unmanaged<int, int, float*, void> glFragmentLightfvSGIXPtr;
		private static delegate* unmanaged<int, int, int, void> glFragmentLightiSGIXPtr;
		private static delegate* unmanaged<int, int, int*, void> glFragmentLightivSGIXPtr;
		private static delegate* unmanaged<int, int, float, void> glFragmentMaterialfSGIXPtr;
		private static delegate* unmanaged<int, int, float*, void> glFragmentMaterialfvSGIXPtr;
		private static delegate* unmanaged<int, int, int, void> glFragmentMaterialiSGIXPtr;
		private static delegate* unmanaged<int, int, int*, void> glFragmentMaterialivSGIXPtr;
		private static delegate* unmanaged<void> glFrameTerminatorGREMEDYPtr;
		private static delegate* unmanaged<int, void> glFrameZoomSGIXPtr;
		private static delegate* unmanaged<uint, int, void> glFramebufferDrawBufferEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glFramebufferDrawBuffersEXTPtr;
		private static delegate* unmanaged<void> glFramebufferFetchBarrierEXTPtr;
		private static delegate* unmanaged<void> glFramebufferFetchBarrierQCOMPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint*, void> glFramebufferFoveationConfigQCOMPtr;
		private static delegate* unmanaged<uint, uint, uint, float, float, float, float, float, void> glFramebufferFoveationParametersQCOMPtr;
		private static delegate* unmanaged<int, int, int, void> glFramebufferParameteriPtr;
		private static delegate* unmanaged<uint, int, void> glFramebufferPixelLocalStorageSizeEXTPtr;
		private static delegate* unmanaged<uint, int, void> glFramebufferReadBufferEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, void> glFramebufferRenderbufferPtr;
		private static delegate* unmanaged<int, int, int, uint, void> glFramebufferRenderbufferEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, void> glFramebufferRenderbufferOESPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glFramebufferSampleLocationsfvARBPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glFramebufferSampleLocationsfvNVPtr;
		private static delegate* unmanaged<int, uint, uint, float*, void> glFramebufferSamplePositionsfvAMDPtr;
		private static delegate* unmanaged<int, int, uint, int, void> glFramebufferTexturePtr;
		private static delegate* unmanaged<int, int, int, uint, int, void> glFramebufferTexture1DPtr;
		private static delegate* unmanaged<int, int, int, uint, int, void> glFramebufferTexture1DEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, int, void> glFramebufferTexture2DPtr;
		private static delegate* unmanaged<int, int, int, uint, int, void> glFramebufferTexture2DEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, int, void> glFramebufferTexture2DDownsampleIMGPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, void> glFramebufferTexture2DMultisampleEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, void> glFramebufferTexture2DMultisampleIMGPtr;
		private static delegate* unmanaged<int, int, int, uint, int, void> glFramebufferTexture2DOESPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, void> glFramebufferTexture3DPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, void> glFramebufferTexture3DEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, int, int, void> glFramebufferTexture3DOESPtr;
		private static delegate* unmanaged<int, int, uint, int, void> glFramebufferTextureARBPtr;
		private static delegate* unmanaged<int, int, uint, int, void> glFramebufferTextureEXTPtr;
		private static delegate* unmanaged<int, int, uint, int, int, void> glFramebufferTextureFaceARBPtr;
		private static delegate* unmanaged<int, int, uint, int, int, void> glFramebufferTextureFaceEXTPtr;
		private static delegate* unmanaged<int, int, uint, int, int, void> glFramebufferTextureLayerPtr;
		private static delegate* unmanaged<int, int, uint, int, int, void> glFramebufferTextureLayerARBPtr;
		private static delegate* unmanaged<int, int, uint, int, int, void> glFramebufferTextureLayerEXTPtr;
		private static delegate* unmanaged<int, int, uint, int, int, int, int, void> glFramebufferTextureLayerDownsampleIMGPtr;
		private static delegate* unmanaged<int, int, uint, int, int, int, int, void> glFramebufferTextureMultisampleMultiviewOVRPtr;
		private static delegate* unmanaged<int, int, uint, int, int, int, void> glFramebufferTextureMultiviewOVRPtr;
		private static delegate* unmanaged<int, int, uint, int, void> glFramebufferTextureOESPtr;
		private static delegate* unmanaged<uint, void> glFreeObjectBufferATIPtr;
		private static delegate* unmanaged<int, void> glFrontFacePtr;
		private static delegate* unmanaged<double, double, double, double, double, double, void> glFrustumPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glFrustumfPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glFrustumfOESPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> glFrustumxPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> glFrustumxOESPtr;
		private static delegate* unmanaged<int, uint> glGenAsyncMarkersSGIXPtr;
		private static delegate* unmanaged<int, uint*, void> glGenBuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glGenBuffersARBPtr;
		private static delegate* unmanaged<int, uint*, void> glGenFencesAPPLEPtr;
		private static delegate* unmanaged<int, uint*, void> glGenFencesNVPtr;
		private static delegate* unmanaged<uint, uint> glGenFragmentShadersATIPtr;
		private static delegate* unmanaged<int, uint*, void> glGenFramebuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glGenFramebuffersEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glGenFramebuffersOESPtr;
		private static delegate* unmanaged<int, uint> glGenListsPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glGenNamesAMDPtr;
		private static delegate* unmanaged<int, uint*, void> glGenOcclusionQueriesNVPtr;
		private static delegate* unmanaged<int, uint> glGenPathsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glGenPerfMonitorsAMDPtr;
		private static delegate* unmanaged<int, uint*, void> glGenProgramPipelinesPtr;
		private static delegate* unmanaged<int, uint*, void> glGenProgramPipelinesEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glGenProgramsARBPtr;
		private static delegate* unmanaged<int, uint*, void> glGenProgramsNVPtr;
		private static delegate* unmanaged<int, uint*, void> glGenQueriesPtr;
		private static delegate* unmanaged<int, uint*, void> glGenQueriesARBPtr;
		private static delegate* unmanaged<int, uint*, void> glGenQueriesEXTPtr;
		private static delegate* unmanaged<int, int*, void> glGenQueryResourceTagNVPtr;
		private static delegate* unmanaged<int, uint*, void> glGenRenderbuffersPtr;
		private static delegate* unmanaged<int, uint*, void> glGenRenderbuffersEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glGenRenderbuffersOESPtr;
		private static delegate* unmanaged<int, uint*, void> glGenSamplersPtr;
		private static delegate* unmanaged<int, uint*, void> glGenSemaphoresEXTPtr;
		private static delegate* unmanaged<int, int, int, uint, uint> glGenSymbolsEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glGenTexturesPtr;
		private static delegate* unmanaged<int, uint*, void> glGenTexturesEXTPtr;
		private static delegate* unmanaged<int, uint*, void> glGenTransformFeedbacksPtr;
		private static delegate* unmanaged<int, uint*, void> glGenTransformFeedbacksNVPtr;
		private static delegate* unmanaged<int, uint*, void> glGenVertexArraysPtr;
		private static delegate* unmanaged<int, uint*, void> glGenVertexArraysAPPLEPtr;
		private static delegate* unmanaged<int, uint*, void> glGenVertexArraysOESPtr;
		private static delegate* unmanaged<uint, uint> glGenVertexShadersEXTPtr;
		private static delegate* unmanaged<int, void> glGenerateMipmapPtr;
		private static delegate* unmanaged<int, void> glGenerateMipmapEXTPtr;
		private static delegate* unmanaged<int, void> glGenerateMipmapOESPtr;
		private static delegate* unmanaged<int, int, void> glGenerateMultiTexMipmapEXTPtr;
		private static delegate* unmanaged<uint, void> glGenerateTextureMipmapPtr;
		private static delegate* unmanaged<uint, int, void> glGenerateTextureMipmapEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glGetActiveAtomicCounterBufferivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetActiveAttribPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetActiveAttribARBPtr;
		private static delegate* unmanaged<uint, int, uint, int, int*, byte*, void> glGetActiveSubroutineNamePtr;
		private static delegate* unmanaged<uint, int, uint, int, int*, byte*, void> glGetActiveSubroutineUniformNamePtr;
		private static delegate* unmanaged<uint, int, uint, int, int*, void> glGetActiveSubroutineUniformivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetActiveUniformPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetActiveUniformARBPtr;
		private static delegate* unmanaged<uint, uint, int, int*, byte*, void> glGetActiveUniformBlockNamePtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glGetActiveUniformBlockivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, byte*, void> glGetActiveUniformNamePtr;
		private static delegate* unmanaged<uint, int, uint*, int, int*, void> glGetActiveUniformsivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetActiveVaryingNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetArrayObjectfvATIPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetArrayObjectivATIPtr;
		private static delegate* unmanaged<uint, int, int*, uint*, void> glGetAttachedObjectsARBPtr;
		private static delegate* unmanaged<uint, int, int*, uint*, void> glGetAttachedShadersPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetAttribLocationPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetAttribLocationARBPtr;
		private static delegate* unmanaged<int, uint, bool*, void> glGetBooleanIndexedvEXTPtr;
		private static delegate* unmanaged<int, uint, bool*, void> glGetBooleani_vPtr;
		private static delegate* unmanaged<int, bool*, void> glGetBooleanvPtr;
		private static delegate* unmanaged<int, int, long*, void> glGetBufferParameteri64vPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetBufferParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetBufferParameterivARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glGetBufferParameterui64vNVPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetBufferPointervPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetBufferPointervARBPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetBufferPointervOESPtr;
		private static delegate* unmanaged<int, uint, uint, IntPtr, void> glGetBufferSubDataPtr;
		private static delegate* unmanaged<int, IntPtr, uint, IntPtr, void> glGetBufferSubDataARBPtr;
		private static delegate* unmanaged<int, double*, void> glGetClipPlanePtr;
		private static delegate* unmanaged<int, float*, void> glGetClipPlanefPtr;
		private static delegate* unmanaged<int, float*, void> glGetClipPlanefOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetClipPlanexPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetClipPlanexOESPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetColorTablePtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetColorTableEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetColorTableParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetColorTableParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetColorTableParameterfvSGIPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetColorTableParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetColorTableParameterivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetColorTableParameterivSGIPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetColorTableSGIPtr;
		private static delegate* unmanaged<int, int, int, int, float*, void> glGetCombinerInputParameterfvNVPtr;
		private static delegate* unmanaged<int, int, int, int, int*, void> glGetCombinerInputParameterivNVPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetCombinerOutputParameterfvNVPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetCombinerOutputParameterivNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetCombinerStageParameterfvNVPtr;
		private static delegate* unmanaged<int, uint, uint> glGetCommandHeaderNVPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetCompressedMultiTexImageEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glGetCompressedTexImagePtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glGetCompressedTexImageARBPtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, void> glGetCompressedTextureImagePtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, void> glGetCompressedTextureImageEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void> glGetCompressedTextureSubImagePtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetConvolutionFilterPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetConvolutionFilterEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetConvolutionParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetConvolutionParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetConvolutionParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetConvolutionParameterivEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetConvolutionParameterxvOESPtr;
		private static delegate* unmanaged<int, float*, void> glGetCoverageModulationTableNVPtr;
		private static delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint> glGetDebugMessageLogPtr;
		private static delegate* unmanaged<uint, int, int*, uint*, uint*, int*, byte*, uint> glGetDebugMessageLogAMDPtr;
		private static delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint> glGetDebugMessageLogARBPtr;
		private static delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint> glGetDebugMessageLogKHRPtr;
		private static delegate* unmanaged<int, float*, void> glGetDetailTexFuncSGISPtr;
		private static delegate* unmanaged<int, uint, double*, void> glGetDoubleIndexedvEXTPtr;
		private static delegate* unmanaged<int, uint, double*, void> glGetDoublei_vPtr;
		private static delegate* unmanaged<int, uint, double*, void> glGetDoublei_vEXTPtr;
		private static delegate* unmanaged<int, double*, void> glGetDoublevPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetDriverControlStringQCOMPtr;
		private static delegate* unmanaged<int*, int, uint*, void> glGetDriverControlsQCOMPtr;
		private static delegate* unmanaged<int> glGetErrorPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetFenceivNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetFinalCombinerInputParameterfvNVPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetFinalCombinerInputParameterivNVPtr;
		private static delegate* unmanaged<uint*, void> glGetFirstPerfQueryIdINTELPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetFixedvPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetFixedvOESPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetFloatIndexedvEXTPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetFloati_vPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetFloati_vEXTPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetFloati_vNVPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetFloati_vOESPtr;
		private static delegate* unmanaged<int, float*, void> glGetFloatvPtr;
		private static delegate* unmanaged<float*, void> glGetFogFuncSGISPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetFragDataIndexPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetFragDataIndexEXTPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetFragDataLocationPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetFragDataLocationEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetFragmentLightfvSGIXPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetFragmentLightivSGIXPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetFragmentMaterialfvSGIXPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetFragmentMaterialivSGIXPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetFramebufferAttachmentParameterivPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetFramebufferAttachmentParameterivEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetFramebufferAttachmentParameterivOESPtr;
		private static delegate* unmanaged<int, int, uint, uint, int, float*, void> glGetFramebufferParameterfvAMDPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetFramebufferParameterivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetFramebufferParameterivEXTPtr;
		private static delegate* unmanaged<uint, int> glGetFramebufferPixelLocalStorageSizeEXTPtr;
		private static delegate* unmanaged<int> glGetGraphicsResetStatusPtr;
		private static delegate* unmanaged<int> glGetGraphicsResetStatusARBPtr;
		private static delegate* unmanaged<int> glGetGraphicsResetStatusEXTPtr;
		private static delegate* unmanaged<int> glGetGraphicsResetStatusKHRPtr;
		private static delegate* unmanaged<int, uint> glGetHandleARBPtr;
		private static delegate* unmanaged<int, bool, int, int, IntPtr, void> glGetHistogramPtr;
		private static delegate* unmanaged<int, bool, int, int, IntPtr, void> glGetHistogramEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetHistogramParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetHistogramParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetHistogramParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetHistogramParameterivEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetHistogramParameterxvOESPtr;
		private static delegate* unmanaged<uint, int, bool, int, int, ulong> glGetImageHandleARBPtr;
		private static delegate* unmanaged<uint, int, bool, int, int, ulong> glGetImageHandleNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetImageTransformParameterfvHPPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetImageTransformParameterivHPPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetInfoLogARBPtr;
		private static delegate* unmanaged<int> glGetInstrumentsSGIXPtr;
		private static delegate* unmanaged<int, uint, long*, void> glGetInteger64i_vPtr;
		private static delegate* unmanaged<int, long*, void> glGetInteger64vPtr;
		private static delegate* unmanaged<int, long*, void> glGetInteger64vAPPLEPtr;
		private static delegate* unmanaged<int, uint, int*, void> glGetIntegerIndexedvEXTPtr;
		private static delegate* unmanaged<int, uint, int*, void> glGetIntegeri_vPtr;
		private static delegate* unmanaged<int, uint, int*, void> glGetIntegeri_vEXTPtr;
		private static delegate* unmanaged<int, uint, ulong*, void> glGetIntegerui64i_vNVPtr;
		private static delegate* unmanaged<int, ulong*, void> glGetIntegerui64vNVPtr;
		private static delegate* unmanaged<int, int*, void> glGetIntegervPtr;
		private static delegate* unmanaged<int, int, int, int, int, int*, void> glGetInternalformatSampleivNVPtr;
		private static delegate* unmanaged<int, int, int, int, long*, void> glGetInternalformati64vPtr;
		private static delegate* unmanaged<int, int, int, int, int*, void> glGetInternalformativPtr;
		private static delegate* unmanaged<uint, int, bool*, void> glGetInvariantBooleanvEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetInvariantFloatvEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetInvariantIntegervEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetLightfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetLightivPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetLightxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetLightxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetLightxvOESPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetListParameterfvSGIXPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetListParameterivSGIXPtr;
		private static delegate* unmanaged<uint, int, bool*, void> glGetLocalConstantBooleanvEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetLocalConstantFloatvEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetLocalConstantIntegervEXTPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glGetMapAttribParameterfvNVPtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glGetMapAttribParameterivNVPtr;
		private static delegate* unmanaged<int, uint, int, int, int, bool, IntPtr, void> glGetMapControlPointsNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetMapParameterfvNVPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetMapParameterivNVPtr;
		private static delegate* unmanaged<int, int, double*, void> glGetMapdvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetMapfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetMapivPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetMapxvOESPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetMaterialfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetMaterialivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glGetMaterialxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetMaterialxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetMaterialxvOESPtr;
		private static delegate* unmanaged<uint, int, int, int, uint*, void> glGetMemoryObjectDetachedResourcesuivNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetMemoryObjectParameterivEXTPtr;
		private static delegate* unmanaged<int, bool, int, int, IntPtr, void> glGetMinmaxPtr;
		private static delegate* unmanaged<int, bool, int, int, IntPtr, void> glGetMinmaxEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetMinmaxParameterfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetMinmaxParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetMinmaxParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetMinmaxParameterivEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetMultiTexEnvfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetMultiTexEnvivEXTPtr;
		private static delegate* unmanaged<int, int, int, double*, void> glGetMultiTexGendvEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetMultiTexGenfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetMultiTexGenivEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, IntPtr, void> glGetMultiTexImageEXTPtr;
		private static delegate* unmanaged<int, int, int, int, float*, void> glGetMultiTexLevelParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int*, void> glGetMultiTexLevelParameterivEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetMultiTexParameterIivEXTPtr;
		private static delegate* unmanaged<int, int, int, uint*, void> glGetMultiTexParameterIuivEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetMultiTexParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetMultiTexParameterivEXTPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetMultisamplefvPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetMultisamplefvNVPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetNamedBufferParameteri64vPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedBufferParameterivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedBufferParameterivEXTPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetNamedBufferParameterui64vNVPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetNamedBufferPointervPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetNamedBufferPointervEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, IntPtr, void> glGetNamedBufferSubDataPtr;
		private static delegate* unmanaged<uint, uint, uint, IntPtr, void> glGetNamedBufferSubDataEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, int, float*, void> glGetNamedFramebufferParameterfvAMDPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetNamedFramebufferAttachmentParameterivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetNamedFramebufferAttachmentParameterivEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedFramebufferParameterivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedFramebufferParameterivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int*, void> glGetNamedProgramLocalParameterIivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint*, void> glGetNamedProgramLocalParameterIuivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, double*, void> glGetNamedProgramLocalParameterdvEXTPtr;
		private static delegate* unmanaged<uint, int, uint, float*, void> glGetNamedProgramLocalParameterfvEXTPtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, void> glGetNamedProgramStringEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetNamedProgramivEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedRenderbufferParameterivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetNamedRenderbufferParameterivEXTPtr;
		private static delegate* unmanaged<int, byte*, int, int*, byte*, void> glGetNamedStringARBPtr;
		private static delegate* unmanaged<int, byte*, int, int*, void> glGetNamedStringivARBPtr;
		private static delegate* unmanaged<uint, uint*, void> glGetNextPerfQueryIdINTELPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetObjectBufferfvATIPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetObjectBufferivATIPtr;
		private static delegate* unmanaged<int, uint, int, int*, byte*, void> glGetObjectLabelPtr;
		private static delegate* unmanaged<int, uint, int, int*, byte*, void> glGetObjectLabelEXTPtr;
		private static delegate* unmanaged<int, uint, int, int*, byte*, void> glGetObjectLabelKHRPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetObjectParameterfvARBPtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glGetObjectParameterivAPPLEPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetObjectParameterivARBPtr;
		private static delegate* unmanaged<IntPtr, int, int*, byte*, void> glGetObjectPtrLabelPtr;
		private static delegate* unmanaged<IntPtr, int, int*, byte*, void> glGetObjectPtrLabelKHRPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetOcclusionQueryivNVPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetOcclusionQueryuivNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetPathColorGenfvNVPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetPathColorGenivNVPtr;
		private static delegate* unmanaged<uint, byte*, void> glGetPathCommandsNVPtr;
		private static delegate* unmanaged<uint, float*, void> glGetPathCoordsNVPtr;
		private static delegate* unmanaged<uint, float*, void> glGetPathDashArrayNVPtr;
		private static delegate* unmanaged<uint, int, int, float> glGetPathLengthNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, float*, void> glGetPathMetricRangeNVPtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, uint, int, float*, void> glGetPathMetricsNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetPathParameterfvNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetPathParameterivNVPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, uint, float, float, int, float*, void> glGetPathSpacingNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetPathTexGenfvNVPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetPathTexGenivNVPtr;
		private static delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void> glGetPerfCounterInfoINTELPtr;
		private static delegate* unmanaged<uint, int, int, uint*, int*, void> glGetPerfMonitorCounterDataAMDPtr;
		private static delegate* unmanaged<uint, uint, int, IntPtr, void> glGetPerfMonitorCounterInfoAMDPtr;
		private static delegate* unmanaged<uint, uint, int, int*, byte*, void> glGetPerfMonitorCounterStringAMDPtr;
		private static delegate* unmanaged<uint, int*, int*, int, uint*, void> glGetPerfMonitorCountersAMDPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetPerfMonitorGroupStringAMDPtr;
		private static delegate* unmanaged<int*, int, uint*, void> glGetPerfMonitorGroupsAMDPtr;
		private static delegate* unmanaged<uint, uint, int, IntPtr, uint*, void> glGetPerfQueryDataINTELPtr;
		private static delegate* unmanaged<byte*, uint*, void> glGetPerfQueryIdByNameINTELPtr;
		private static delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void> glGetPerfQueryInfoINTELPtr;
		private static delegate* unmanaged<int, float*, void> glGetPixelMapfvPtr;
		private static delegate* unmanaged<int, uint*, void> glGetPixelMapuivPtr;
		private static delegate* unmanaged<int, ushort*, void> glGetPixelMapusvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetPixelMapxvPtr;
		private static delegate* unmanaged<int, float*, void> glGetPixelTexGenParameterfvSGISPtr;
		private static delegate* unmanaged<int, int*, void> glGetPixelTexGenParameterivSGISPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetPixelTransformParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetPixelTransformParameterivEXTPtr;
		private static delegate* unmanaged<int, uint, IntPtr*, void> glGetPointerIndexedvEXTPtr;
		private static delegate* unmanaged<int, uint, IntPtr*, void> glGetPointeri_vEXTPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetPointervPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetPointervEXTPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glGetPointervKHRPtr;
		private static delegate* unmanaged<byte*, void> glGetPolygonStipplePtr;
		private static delegate* unmanaged<uint, int, int*, int*, IntPtr, void> glGetProgramBinaryPtr;
		private static delegate* unmanaged<uint, int, int*, int*, IntPtr, void> glGetProgramBinaryOESPtr;
		private static delegate* unmanaged<int, uint, int*, void> glGetProgramEnvParameterIivNVPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glGetProgramEnvParameterIuivNVPtr;
		private static delegate* unmanaged<int, uint, double*, void> glGetProgramEnvParameterdvARBPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetProgramEnvParameterfvARBPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetProgramInfoLogPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetProgramInterfaceivPtr;
		private static delegate* unmanaged<int, uint, int*, void> glGetProgramLocalParameterIivNVPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glGetProgramLocalParameterIuivNVPtr;
		private static delegate* unmanaged<int, uint, double*, void> glGetProgramLocalParameterdvARBPtr;
		private static delegate* unmanaged<int, uint, float*, void> glGetProgramLocalParameterfvARBPtr;
		private static delegate* unmanaged<uint, int, byte*, double*, void> glGetProgramNamedParameterdvNVPtr;
		private static delegate* unmanaged<uint, int, byte*, float*, void> glGetProgramNamedParameterfvNVPtr;
		private static delegate* unmanaged<int, uint, int, double*, void> glGetProgramParameterdvNVPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glGetProgramParameterfvNVPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetProgramPipelineInfoLogPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetProgramPipelineInfoLogEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetProgramPipelineivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetProgramPipelineivEXTPtr;
		private static delegate* unmanaged<uint, int, byte*, uint> glGetProgramResourceIndexPtr;
		private static delegate* unmanaged<uint, int, byte*, int> glGetProgramResourceLocationPtr;
		private static delegate* unmanaged<uint, int, byte*, int> glGetProgramResourceLocationIndexPtr;
		private static delegate* unmanaged<uint, int, byte*, int> glGetProgramResourceLocationIndexEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, int*, byte*, void> glGetProgramResourceNamePtr;
		private static delegate* unmanaged<uint, int, uint, int, uint*, int, int*, float*, void> glGetProgramResourcefvNVPtr;
		private static delegate* unmanaged<uint, int, uint, int, uint*, int, int*, int*, void> glGetProgramResourceivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetProgramStageivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glGetProgramStringARBPtr;
		private static delegate* unmanaged<uint, int, byte*, void> glGetProgramStringNVPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glGetProgramSubroutineParameteruivNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetProgramivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetProgramivARBPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetProgramivNVPtr;
		private static delegate* unmanaged<uint, uint, int, uint, void> glGetQueryBufferObjecti64vPtr;
		private static delegate* unmanaged<uint, uint, int, uint, void> glGetQueryBufferObjectivPtr;
		private static delegate* unmanaged<uint, uint, int, uint, void> glGetQueryBufferObjectui64vPtr;
		private static delegate* unmanaged<uint, uint, int, uint, void> glGetQueryBufferObjectuivPtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glGetQueryIndexedivPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetQueryObjecti64vPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetQueryObjecti64vEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetQueryObjectivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetQueryObjectivARBPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetQueryObjectivEXTPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetQueryObjectui64vPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetQueryObjectui64vEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetQueryObjectuivPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetQueryObjectuivARBPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetQueryObjectuivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetQueryivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetQueryivARBPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetQueryivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetRenderbufferParameterivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetRenderbufferParameterivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetRenderbufferParameterivOESPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetSamplerParameterIivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetSamplerParameterIivEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetSamplerParameterIivOESPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetSamplerParameterIuivPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetSamplerParameterIuivEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetSamplerParameterIuivOESPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetSamplerParameterfvPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetSamplerParameterivPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetSemaphoreParameterui64vEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, IntPtr, IntPtr, void> glGetSeparableFilterPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, IntPtr, IntPtr, void> glGetSeparableFilterEXTPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetShaderInfoLogPtr;
		private static delegate* unmanaged<int, int, int*, int*, void> glGetShaderPrecisionFormatPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetShaderSourcePtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetShaderSourceARBPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetShaderivPtr;
		private static delegate* unmanaged<uint, uint, int*, void> glGetShadingRateImagePaletteNVPtr;
		private static delegate* unmanaged<int, uint, uint, int*, void> glGetShadingRateSampleLocationivNVPtr;
		private static delegate* unmanaged<int, float*, void> glGetSharpenTexFuncSGISPtr;
		private static delegate* unmanaged<int, ushort> glGetStageIndexNVPtr;
		private static delegate* unmanaged<int, IntPtr> glGetStringPtr;
		private static delegate* unmanaged<int, uint, IntPtr> glGetStringiPtr;
		private static delegate* unmanaged<uint, int, byte*, uint> glGetSubroutineIndexPtr;
		private static delegate* unmanaged<uint, int, byte*, int> glGetSubroutineUniformLocationPtr;
		private static delegate* unmanaged<IntPtr, int, int, int*, int*, void> glGetSyncivPtr;
		private static delegate* unmanaged<IntPtr, int, int, int*, int*, void> glGetSyncivAPPLEPtr;
		private static delegate* unmanaged<int, float*, void> glGetTexBumpParameterfvATIPtr;
		private static delegate* unmanaged<int, int*, void> glGetTexBumpParameterivATIPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetTexEnvfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexEnvivPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexEnvxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexEnvxvOESPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetTexFilterFuncSGISPtr;
		private static delegate* unmanaged<int, int, double*, void> glGetTexGendvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetTexGenfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetTexGenfvOESPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexGenivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexGenivOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexGenxvOESPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glGetTexImagePtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetTexLevelParameterfvPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetTexLevelParameterivPtr;
		private static delegate* unmanaged<int, int, int, IntPtr*, void> glGetTexLevelParameterxvOESPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexParameterIivPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexParameterIivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexParameterIivOESPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetTexParameterIuivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetTexParameterIuivEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetTexParameterIuivOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexParameterPointervAPPLEPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetTexParameterfvPtr;
		private static delegate* unmanaged<int, int, int*, void> glGetTexParameterivPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexParameterxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glGetTexParameterxvOESPtr;
		private static delegate* unmanaged<uint, ulong> glGetTextureHandleARBPtr;
		private static delegate* unmanaged<uint, ulong> glGetTextureHandleIMGPtr;
		private static delegate* unmanaged<uint, ulong> glGetTextureHandleNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, IntPtr, void> glGetTextureImagePtr;
		private static delegate* unmanaged<uint, int, int, int, int, IntPtr, void> glGetTextureImageEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetTextureLevelParameterfvPtr;
		private static delegate* unmanaged<uint, int, int, int, float*, void> glGetTextureLevelParameterfvEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetTextureLevelParameterivPtr;
		private static delegate* unmanaged<uint, int, int, int, int*, void> glGetTextureLevelParameterivEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetTextureParameterIivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetTextureParameterIivEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetTextureParameterIuivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glGetTextureParameterIuivEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetTextureParameterfvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetTextureParameterfvEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetTextureParameterivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetTextureParameterivEXTPtr;
		private static delegate* unmanaged<uint, uint, ulong> glGetTextureSamplerHandleARBPtr;
		private static delegate* unmanaged<uint, uint, ulong> glGetTextureSamplerHandleIMGPtr;
		private static delegate* unmanaged<uint, uint, ulong> glGetTextureSamplerHandleNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glGetTextureSubImagePtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glGetTrackMatrixivNVPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetTransformFeedbackVaryingPtr;
		private static delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void> glGetTransformFeedbackVaryingEXTPtr;
		private static delegate* unmanaged<uint, uint, int*, void> glGetTransformFeedbackVaryingNVPtr;
		private static delegate* unmanaged<uint, int, uint, long*, void> glGetTransformFeedbacki64_vPtr;
		private static delegate* unmanaged<uint, int, uint, int*, void> glGetTransformFeedbacki_vPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetTransformFeedbackivPtr;
		private static delegate* unmanaged<uint, int, int*, byte*, void> glGetTranslatedShaderSourceANGLEPtr;
		private static delegate* unmanaged<uint, byte*, uint> glGetUniformBlockIndexPtr;
		private static delegate* unmanaged<uint, int, int> glGetUniformBufferSizeEXTPtr;
		private static delegate* unmanaged<uint, int, byte**, uint*, void> glGetUniformIndicesPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetUniformLocationPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetUniformLocationARBPtr;
		private static delegate* unmanaged<uint, int, uint> glGetUniformOffsetEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetUniformSubroutineuivPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetUniformdvPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetUniformfvPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetUniformfvARBPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetUniformi64vARBPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetUniformi64vNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetUniformivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetUniformivARBPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetUniformui64vARBPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetUniformui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetUniformuivPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetUniformuivEXTPtr;
		private static delegate* unmanaged<int, byte*, void> glGetUnsignedBytevEXTPtr;
		private static delegate* unmanaged<int, uint, byte*, void> glGetUnsignedBytei_vEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVariantArrayObjectfvATIPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVariantArrayObjectivATIPtr;
		private static delegate* unmanaged<uint, int, bool*, void> glGetVariantBooleanvEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVariantFloatvEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVariantIntegervEXTPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetVariantPointervEXTPtr;
		private static delegate* unmanaged<uint, byte*, int> glGetVaryingLocationNVPtr;
		private static delegate* unmanaged<uint, uint, int, long*, void> glGetVertexArrayIndexed64ivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glGetVertexArrayIndexedivPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glGetVertexArrayIntegeri_vEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexArrayIntegervEXTPtr;
		private static delegate* unmanaged<uint, uint, int, IntPtr*, void> glGetVertexArrayPointeri_vEXTPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetVertexArrayPointervEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexArrayivPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVertexAttribArrayObjectfvATIPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribArrayObjectivATIPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribIivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribIivEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetVertexAttribIuivPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetVertexAttribIuivEXTPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetVertexAttribLdvPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetVertexAttribLdvEXTPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetVertexAttribLi64vNVPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetVertexAttribLui64vARBPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetVertexAttribLui64vNVPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetVertexAttribPointervPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetVertexAttribPointervARBPtr;
		private static delegate* unmanaged<uint, int, IntPtr*, void> glGetVertexAttribPointervNVPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetVertexAttribdvPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetVertexAttribdvARBPtr;
		private static delegate* unmanaged<uint, int, double*, void> glGetVertexAttribdvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVertexAttribfvPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVertexAttribfvARBPtr;
		private static delegate* unmanaged<uint, int, float*, void> glGetVertexAttribfvNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribivARBPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVertexAttribivNVPtr;
		private static delegate* unmanaged<uint, uint, int, double*, void> glGetVideoCaptureStreamdvNVPtr;
		private static delegate* unmanaged<uint, uint, int, float*, void> glGetVideoCaptureStreamfvNVPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glGetVideoCaptureStreamivNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVideoCaptureivNVPtr;
		private static delegate* unmanaged<uint, int, long*, void> glGetVideoi64vNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glGetVideoivNVPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glGetVideoui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glGetVideouivNVPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glGetnColorTablePtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glGetnColorTableARBPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetnCompressedTexImagePtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glGetnCompressedTexImageARBPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glGetnConvolutionFilterPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glGetnConvolutionFilterARBPtr;
		private static delegate* unmanaged<int, bool, int, int, int, IntPtr, void> glGetnHistogramPtr;
		private static delegate* unmanaged<int, bool, int, int, int, IntPtr, void> glGetnHistogramARBPtr;
		private static delegate* unmanaged<int, int, int, double*, void> glGetnMapdvPtr;
		private static delegate* unmanaged<int, int, int, double*, void> glGetnMapdvARBPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetnMapfvPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glGetnMapfvARBPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetnMapivPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glGetnMapivARBPtr;
		private static delegate* unmanaged<int, bool, int, int, int, IntPtr, void> glGetnMinmaxPtr;
		private static delegate* unmanaged<int, bool, int, int, int, IntPtr, void> glGetnMinmaxARBPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetnPixelMapfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glGetnPixelMapfvARBPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetnPixelMapuivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glGetnPixelMapuivARBPtr;
		private static delegate* unmanaged<int, int, ushort*, void> glGetnPixelMapusvPtr;
		private static delegate* unmanaged<int, int, ushort*, void> glGetnPixelMapusvARBPtr;
		private static delegate* unmanaged<int, byte*, void> glGetnPolygonStipplePtr;
		private static delegate* unmanaged<int, byte*, void> glGetnPolygonStippleARBPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, int, IntPtr, IntPtr, void> glGetnSeparableFilterPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, int, IntPtr, IntPtr, void> glGetnSeparableFilterARBPtr;
		private static delegate* unmanaged<int, int, int, int, uint, IntPtr, void> glGetnTexImagePtr;
		private static delegate* unmanaged<int, int, int, int, uint, IntPtr, void> glGetnTexImageARBPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glGetnUniformdvPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glGetnUniformdvARBPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetnUniformfvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetnUniformfvARBPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetnUniformfvEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glGetnUniformfvKHRPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glGetnUniformi64vARBPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetnUniformivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetnUniformivARBPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetnUniformivEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glGetnUniformivKHRPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glGetnUniformui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glGetnUniformuivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glGetnUniformuivARBPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glGetnUniformuivKHRPtr;
		private static delegate* unmanaged<sbyte, void> glGlobalAlphaFactorbSUNPtr;
		private static delegate* unmanaged<double, void> glGlobalAlphaFactordSUNPtr;
		private static delegate* unmanaged<float, void> glGlobalAlphaFactorfSUNPtr;
		private static delegate* unmanaged<int, void> glGlobalAlphaFactoriSUNPtr;
		private static delegate* unmanaged<short, void> glGlobalAlphaFactorsSUNPtr;
		private static delegate* unmanaged<byte, void> glGlobalAlphaFactorubSUNPtr;
		private static delegate* unmanaged<uint, void> glGlobalAlphaFactoruiSUNPtr;
		private static delegate* unmanaged<ushort, void> glGlobalAlphaFactorusSUNPtr;
		private static delegate* unmanaged<int, int, void> glHintPtr;
		private static delegate* unmanaged<int, int, void> glHintPGIPtr;
		private static delegate* unmanaged<int, int, int, bool, void> glHistogramPtr;
		private static delegate* unmanaged<int, int, int, bool, void> glHistogramEXTPtr;
		private static delegate* unmanaged<int, IntPtr, void> glIglooInterfaceSGIXPtr;
		private static delegate* unmanaged<int, int, float, void> glImageTransformParameterfHPPtr;
		private static delegate* unmanaged<int, int, float*, void> glImageTransformParameterfvHPPtr;
		private static delegate* unmanaged<int, int, int, void> glImageTransformParameteriHPPtr;
		private static delegate* unmanaged<int, int, int*, void> glImageTransformParameterivHPPtr;
		private static delegate* unmanaged<uint, ulong, int, int, void> glImportMemoryFdEXTPtr;
		private static delegate* unmanaged<uint, ulong, int, IntPtr, void> glImportMemoryWin32HandleEXTPtr;
		private static delegate* unmanaged<uint, ulong, int, IntPtr, void> glImportMemoryWin32NameEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glImportSemaphoreFdEXTPtr;
		private static delegate* unmanaged<uint, int, IntPtr, void> glImportSemaphoreWin32HandleEXTPtr;
		private static delegate* unmanaged<uint, int, IntPtr, void> glImportSemaphoreWin32NameEXTPtr;
		private static delegate* unmanaged<int, uint, uint, IntPtr> glImportSyncEXTPtr;
		private static delegate* unmanaged<int, int, void> glIndexFormatNVPtr;
		private static delegate* unmanaged<int, float, void> glIndexFuncEXTPtr;
		private static delegate* unmanaged<uint, void> glIndexMaskPtr;
		private static delegate* unmanaged<int, int, void> glIndexMaterialEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glIndexPointerPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glIndexPointerEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr*, int, void> glIndexPointerListIBMPtr;
		private static delegate* unmanaged<double, void> glIndexdPtr;
		private static delegate* unmanaged<double*, void> glIndexdvPtr;
		private static delegate* unmanaged<float, void> glIndexfPtr;
		private static delegate* unmanaged<float*, void> glIndexfvPtr;
		private static delegate* unmanaged<int, void> glIndexiPtr;
		private static delegate* unmanaged<int*, void> glIndexivPtr;
		private static delegate* unmanaged<short, void> glIndexsPtr;
		private static delegate* unmanaged<short*, void> glIndexsvPtr;
		private static delegate* unmanaged<byte, void> glIndexubPtr;
		private static delegate* unmanaged<byte*, void> glIndexubvPtr;
		private static delegate* unmanaged<IntPtr, void> glIndexxOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glIndexxvOESPtr;
		private static delegate* unmanaged<void> glInitNamesPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glInsertComponentEXTPtr;
		private static delegate* unmanaged<int, byte*, void> glInsertEventMarkerEXTPtr;
		private static delegate* unmanaged<int, int*, void> glInstrumentsBufferSGIXPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glInterleavedArraysPtr;
		private static delegate* unmanaged<uint, uint, uint, float, void> glInterpolatePathsNVPtr;
		private static delegate* unmanaged<uint, void> glInvalidateBufferDataPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glInvalidateBufferSubDataPtr;
		private static delegate* unmanaged<int, int, uint*, void> glInvalidateFramebufferPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glInvalidateNamedFramebufferDataPtr;
		private static delegate* unmanaged<uint, int, uint*, int, int, int, int, void> glInvalidateNamedFramebufferSubDataPtr;
		private static delegate* unmanaged<int, int, uint*, int, int, int, int, void> glInvalidateSubFramebufferPtr;
		private static delegate* unmanaged<uint, int, void> glInvalidateTexImagePtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> glInvalidateTexSubImagePtr;
		private static delegate* unmanaged<uint, bool> glIsAsyncMarkerSGIXPtr;
		private static delegate* unmanaged<uint, bool> glIsBufferPtr;
		private static delegate* unmanaged<uint, bool> glIsBufferARBPtr;
		private static delegate* unmanaged<int, bool> glIsBufferResidentNVPtr;
		private static delegate* unmanaged<uint, bool> glIsCommandListNVPtr;
		private static delegate* unmanaged<int, bool> glIsEnabledPtr;
		private static delegate* unmanaged<int, uint, bool> glIsEnabledIndexedEXTPtr;
		private static delegate* unmanaged<int, uint, bool> glIsEnablediPtr;
		private static delegate* unmanaged<int, uint, bool> glIsEnablediEXTPtr;
		private static delegate* unmanaged<int, uint, bool> glIsEnablediNVPtr;
		private static delegate* unmanaged<int, uint, bool> glIsEnablediOESPtr;
		private static delegate* unmanaged<uint, bool> glIsFenceAPPLEPtr;
		private static delegate* unmanaged<uint, bool> glIsFenceNVPtr;
		private static delegate* unmanaged<uint, bool> glIsFramebufferPtr;
		private static delegate* unmanaged<uint, bool> glIsFramebufferEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsFramebufferOESPtr;
		private static delegate* unmanaged<ulong, bool> glIsImageHandleResidentARBPtr;
		private static delegate* unmanaged<ulong, bool> glIsImageHandleResidentNVPtr;
		private static delegate* unmanaged<uint, bool> glIsListPtr;
		private static delegate* unmanaged<uint, bool> glIsMemoryObjectEXTPtr;
		private static delegate* unmanaged<int, uint, bool> glIsNameAMDPtr;
		private static delegate* unmanaged<uint, bool> glIsNamedBufferResidentNVPtr;
		private static delegate* unmanaged<int, byte*, bool> glIsNamedStringARBPtr;
		private static delegate* unmanaged<uint, bool> glIsObjectBufferATIPtr;
		private static delegate* unmanaged<uint, bool> glIsOcclusionQueryNVPtr;
		private static delegate* unmanaged<uint, bool> glIsPathNVPtr;
		private static delegate* unmanaged<uint, uint, float, float, bool> glIsPointInFillPathNVPtr;
		private static delegate* unmanaged<uint, float, float, bool> glIsPointInStrokePathNVPtr;
		private static delegate* unmanaged<uint, bool> glIsProgramPtr;
		private static delegate* unmanaged<uint, bool> glIsProgramARBPtr;
		private static delegate* unmanaged<uint, bool> glIsProgramNVPtr;
		private static delegate* unmanaged<uint, bool> glIsProgramPipelinePtr;
		private static delegate* unmanaged<uint, bool> glIsProgramPipelineEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsQueryPtr;
		private static delegate* unmanaged<uint, bool> glIsQueryARBPtr;
		private static delegate* unmanaged<uint, bool> glIsQueryEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsRenderbufferPtr;
		private static delegate* unmanaged<uint, bool> glIsRenderbufferEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsRenderbufferOESPtr;
		private static delegate* unmanaged<uint, bool> glIsSemaphoreEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsSamplerPtr;
		private static delegate* unmanaged<uint, bool> glIsShaderPtr;
		private static delegate* unmanaged<uint, bool> glIsStateNVPtr;
		private static delegate* unmanaged<IntPtr, bool> glIsSyncPtr;
		private static delegate* unmanaged<IntPtr, bool> glIsSyncAPPLEPtr;
		private static delegate* unmanaged<uint, bool> glIsTexturePtr;
		private static delegate* unmanaged<uint, bool> glIsTextureEXTPtr;
		private static delegate* unmanaged<ulong, bool> glIsTextureHandleResidentARBPtr;
		private static delegate* unmanaged<ulong, bool> glIsTextureHandleResidentNVPtr;
		private static delegate* unmanaged<uint, bool> glIsTransformFeedbackPtr;
		private static delegate* unmanaged<uint, bool> glIsTransformFeedbackNVPtr;
		private static delegate* unmanaged<uint, int, bool> glIsVariantEnabledEXTPtr;
		private static delegate* unmanaged<uint, bool> glIsVertexArrayPtr;
		private static delegate* unmanaged<uint, bool> glIsVertexArrayAPPLEPtr;
		private static delegate* unmanaged<uint, bool> glIsVertexArrayOESPtr;
		private static delegate* unmanaged<uint, int, bool> glIsVertexAttribEnabledAPPLEPtr;
		private static delegate* unmanaged<uint, uint, uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glLGPUCopyImageSubDataNVXPtr;
		private static delegate* unmanaged<void> glLGPUInterlockNVXPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, IntPtr, void> glLGPUNamedBufferSubDataNVXPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glLabelObjectEXTPtr;
		private static delegate* unmanaged<int, int, void> glLightEnviSGIXPtr;
		private static delegate* unmanaged<int, float, void> glLightModelfPtr;
		private static delegate* unmanaged<int, float*, void> glLightModelfvPtr;
		private static delegate* unmanaged<int, int, void> glLightModeliPtr;
		private static delegate* unmanaged<int, int*, void> glLightModelivPtr;
		private static delegate* unmanaged<int, IntPtr, void> glLightModelxPtr;
		private static delegate* unmanaged<int, IntPtr, void> glLightModelxOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glLightModelxvPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glLightModelxvOESPtr;
		private static delegate* unmanaged<int, int, float, void> glLightfPtr;
		private static delegate* unmanaged<int, int, float*, void> glLightfvPtr;
		private static delegate* unmanaged<int, int, int, void> glLightiPtr;
		private static delegate* unmanaged<int, int, int*, void> glLightivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glLightxPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glLightxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glLightxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glLightxvOESPtr;
		private static delegate* unmanaged<int, ushort, void> glLineStipplePtr;
		private static delegate* unmanaged<float, void> glLineWidthPtr;
		private static delegate* unmanaged<IntPtr, void> glLineWidthxPtr;
		private static delegate* unmanaged<IntPtr, void> glLineWidthxOESPtr;
		private static delegate* unmanaged<uint, void> glLinkProgramPtr;
		private static delegate* unmanaged<uint, void> glLinkProgramARBPtr;
		private static delegate* unmanaged<uint, void> glListBasePtr;
		private static delegate* unmanaged<uint, uint, IntPtr*, int*, uint*, uint*, uint, void> glListDrawCommandsStatesClientNVPtr;
		private static delegate* unmanaged<uint, int, float, void> glListParameterfSGIXPtr;
		private static delegate* unmanaged<uint, int, float*, void> glListParameterfvSGIXPtr;
		private static delegate* unmanaged<uint, int, int, void> glListParameteriSGIXPtr;
		private static delegate* unmanaged<uint, int, int*, void> glListParameterivSGIXPtr;
		private static delegate* unmanaged<void> glLoadIdentityPtr;
		private static delegate* unmanaged<uint, void> glLoadIdentityDeformationMapSGIXPtr;
		private static delegate* unmanaged<double*, void> glLoadMatrixdPtr;
		private static delegate* unmanaged<float*, void> glLoadMatrixfPtr;
		private static delegate* unmanaged<IntPtr*, void> glLoadMatrixxPtr;
		private static delegate* unmanaged<IntPtr*, void> glLoadMatrixxOESPtr;
		private static delegate* unmanaged<uint, void> glLoadNamePtr;
		private static delegate* unmanaged<void> glLoadPaletteFromModelViewMatrixOESPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glLoadProgramNVPtr;
		private static delegate* unmanaged<double*, void> glLoadTransposeMatrixdPtr;
		private static delegate* unmanaged<double*, void> glLoadTransposeMatrixdARBPtr;
		private static delegate* unmanaged<float*, void> glLoadTransposeMatrixfPtr;
		private static delegate* unmanaged<float*, void> glLoadTransposeMatrixfARBPtr;
		private static delegate* unmanaged<IntPtr*, void> glLoadTransposeMatrixxOESPtr;
		private static delegate* unmanaged<int, int, void> glLockArraysEXTPtr;
		private static delegate* unmanaged<int, void> glLogicOpPtr;
		private static delegate* unmanaged<int, void> glMakeBufferNonResidentNVPtr;
		private static delegate* unmanaged<int, int, void> glMakeBufferResidentNVPtr;
		private static delegate* unmanaged<ulong, void> glMakeImageHandleNonResidentARBPtr;
		private static delegate* unmanaged<ulong, void> glMakeImageHandleNonResidentNVPtr;
		private static delegate* unmanaged<ulong, int, void> glMakeImageHandleResidentARBPtr;
		private static delegate* unmanaged<ulong, int, void> glMakeImageHandleResidentNVPtr;
		private static delegate* unmanaged<uint, void> glMakeNamedBufferNonResidentNVPtr;
		private static delegate* unmanaged<uint, int, void> glMakeNamedBufferResidentNVPtr;
		private static delegate* unmanaged<ulong, void> glMakeTextureHandleNonResidentARBPtr;
		private static delegate* unmanaged<ulong, void> glMakeTextureHandleNonResidentNVPtr;
		private static delegate* unmanaged<ulong, void> glMakeTextureHandleResidentARBPtr;
		private static delegate* unmanaged<ulong, void> glMakeTextureHandleResidentNVPtr;
		private static delegate* unmanaged<int, double, double, int, int, double*, void> glMap1dPtr;
		private static delegate* unmanaged<int, float, float, int, int, float*, void> glMap1fPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, int, int, IntPtr, void> glMap1xOESPtr;
		private static delegate* unmanaged<int, double, double, int, int, double, double, int, int, double*, void> glMap2dPtr;
		private static delegate* unmanaged<int, float, float, int, int, float, float, int, int, float*, void> glMap2fPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, int, int, IntPtr, IntPtr, int, int, IntPtr, void> glMap2xOESPtr;
		private static delegate* unmanaged<int, int, IntPtr> glMapBufferPtr;
		private static delegate* unmanaged<int, int, IntPtr> glMapBufferARBPtr;
		private static delegate* unmanaged<int, int, IntPtr> glMapBufferOESPtr;
		private static delegate* unmanaged<int, uint, uint, uint, IntPtr> glMapBufferRangePtr;
		private static delegate* unmanaged<int, uint, uint, uint, IntPtr> glMapBufferRangeEXTPtr;
		private static delegate* unmanaged<int, uint, int, int, int, int, int, bool, IntPtr, void> glMapControlPointsNVPtr;
		private static delegate* unmanaged<int, double, double, void> glMapGrid1dPtr;
		private static delegate* unmanaged<int, float, float, void> glMapGrid1fPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, void> glMapGrid1xOESPtr;
		private static delegate* unmanaged<int, double, double, int, double, double, void> glMapGrid2dPtr;
		private static delegate* unmanaged<int, float, float, int, float, float, void> glMapGrid2fPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void> glMapGrid2xOESPtr;
		private static delegate* unmanaged<uint, int, IntPtr> glMapNamedBufferPtr;
		private static delegate* unmanaged<uint, int, IntPtr> glMapNamedBufferEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, IntPtr> glMapNamedBufferRangePtr;
		private static delegate* unmanaged<uint, uint, uint, uint, IntPtr> glMapNamedBufferRangeEXTPtr;
		private static delegate* unmanaged<uint, IntPtr> glMapObjectBufferATIPtr;
		private static delegate* unmanaged<int, int, float*, void> glMapParameterfvNVPtr;
		private static delegate* unmanaged<int, int, int*, void> glMapParameterivNVPtr;
		private static delegate* unmanaged<uint, int, uint, int*, int*, IntPtr> glMapTexture2DINTELPtr;
		private static delegate* unmanaged<uint, uint, double, double, int, int, double*, void> glMapVertexAttrib1dAPPLEPtr;
		private static delegate* unmanaged<uint, uint, float, float, int, int, float*, void> glMapVertexAttrib1fAPPLEPtr;
		private static delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void> glMapVertexAttrib2dAPPLEPtr;
		private static delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void> glMapVertexAttrib2fAPPLEPtr;
		private static delegate* unmanaged<int, int, float, void> glMaterialfPtr;
		private static delegate* unmanaged<int, int, float*, void> glMaterialfvPtr;
		private static delegate* unmanaged<int, int, int, void> glMaterialiPtr;
		private static delegate* unmanaged<int, int, int*, void> glMaterialivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glMaterialxPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glMaterialxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glMaterialxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glMaterialxvOESPtr;
		private static delegate* unmanaged<int, double, double, double, double, double, double, void> glMatrixFrustumEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glMatrixIndexPointerARBPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glMatrixIndexPointerOESPtr;
		private static delegate* unmanaged<int, byte*, void> glMatrixIndexubvARBPtr;
		private static delegate* unmanaged<int, uint*, void> glMatrixIndexuivARBPtr;
		private static delegate* unmanaged<int, ushort*, void> glMatrixIndexusvARBPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixLoad3x2fNVPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixLoad3x3fNVPtr;
		private static delegate* unmanaged<int, void> glMatrixLoadIdentityEXTPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixLoadTranspose3x3fNVPtr;
		private static delegate* unmanaged<int, double*, void> glMatrixLoadTransposedEXTPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixLoadTransposefEXTPtr;
		private static delegate* unmanaged<int, double*, void> glMatrixLoaddEXTPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixLoadfEXTPtr;
		private static delegate* unmanaged<int, void> glMatrixModePtr;
		private static delegate* unmanaged<int, float*, void> glMatrixMult3x2fNVPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixMult3x3fNVPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixMultTranspose3x3fNVPtr;
		private static delegate* unmanaged<int, double*, void> glMatrixMultTransposedEXTPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixMultTransposefEXTPtr;
		private static delegate* unmanaged<int, double*, void> glMatrixMultdEXTPtr;
		private static delegate* unmanaged<int, float*, void> glMatrixMultfEXTPtr;
		private static delegate* unmanaged<int, double, double, double, double, double, double, void> glMatrixOrthoEXTPtr;
		private static delegate* unmanaged<int, void> glMatrixPopEXTPtr;
		private static delegate* unmanaged<int, void> glMatrixPushEXTPtr;
		private static delegate* unmanaged<int, double, double, double, double, void> glMatrixRotatedEXTPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glMatrixRotatefEXTPtr;
		private static delegate* unmanaged<int, double, double, double, void> glMatrixScaledEXTPtr;
		private static delegate* unmanaged<int, float, float, float, void> glMatrixScalefEXTPtr;
		private static delegate* unmanaged<int, double, double, double, void> glMatrixTranslatedEXTPtr;
		private static delegate* unmanaged<int, float, float, float, void> glMatrixTranslatefEXTPtr;
		private static delegate* unmanaged<uint, void> glMaxShaderCompilerThreadsKHRPtr;
		private static delegate* unmanaged<uint, void> glMaxShaderCompilerThreadsARBPtr;
		private static delegate* unmanaged<uint, void> glMemoryBarrierPtr;
		private static delegate* unmanaged<uint, void> glMemoryBarrierByRegionPtr;
		private static delegate* unmanaged<uint, void> glMemoryBarrierEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glMemoryObjectParameterivEXTPtr;
		private static delegate* unmanaged<float, void> glMinSampleShadingPtr;
		private static delegate* unmanaged<float, void> glMinSampleShadingARBPtr;
		private static delegate* unmanaged<float, void> glMinSampleShadingOESPtr;
		private static delegate* unmanaged<int, int, bool, void> glMinmaxPtr;
		private static delegate* unmanaged<int, int, bool, void> glMinmaxEXTPtr;
		private static delegate* unmanaged<double*, void> glMultMatrixdPtr;
		private static delegate* unmanaged<float*, void> glMultMatrixfPtr;
		private static delegate* unmanaged<IntPtr*, void> glMultMatrixxPtr;
		private static delegate* unmanaged<IntPtr*, void> glMultMatrixxOESPtr;
		private static delegate* unmanaged<double*, void> glMultTransposeMatrixdPtr;
		private static delegate* unmanaged<double*, void> glMultTransposeMatrixdARBPtr;
		private static delegate* unmanaged<float*, void> glMultTransposeMatrixfPtr;
		private static delegate* unmanaged<float*, void> glMultTransposeMatrixfARBPtr;
		private static delegate* unmanaged<IntPtr*, void> glMultTransposeMatrixxOESPtr;
		private static delegate* unmanaged<int, int*, int*, int, void> glMultiDrawArraysPtr;
		private static delegate* unmanaged<int, int*, int*, int, void> glMultiDrawArraysEXTPtr;
		private static delegate* unmanaged<int, IntPtr, int, int, void> glMultiDrawArraysIndirectPtr;
		private static delegate* unmanaged<int, IntPtr, int, int, void> glMultiDrawArraysIndirectAMDPtr;
		private static delegate* unmanaged<int, IntPtr, int, int, int, int, void> glMultiDrawArraysIndirectBindlessCountNVPtr;
		private static delegate* unmanaged<int, IntPtr, int, int, int, void> glMultiDrawArraysIndirectBindlessNVPtr;
		private static delegate* unmanaged<int, IntPtr, uint, int, int, void> glMultiDrawArraysIndirectCountPtr;
		private static delegate* unmanaged<int, IntPtr, uint, int, int, void> glMultiDrawArraysIndirectCountARBPtr;
		private static delegate* unmanaged<int, IntPtr, int, int, void> glMultiDrawArraysIndirectEXTPtr;
		private static delegate* unmanaged<int, int*, int*, int, void> glMultiDrawElementArrayAPPLEPtr;
		private static delegate* unmanaged<int, int*, int, IntPtr*, int, void> glMultiDrawElementsPtr;
		private static delegate* unmanaged<int, int*, int, IntPtr*, int, int*, void> glMultiDrawElementsBaseVertexPtr;
		private static delegate* unmanaged<int, int*, int, IntPtr*, int, int*, void> glMultiDrawElementsBaseVertexEXTPtr;
		private static delegate* unmanaged<int, int*, int, IntPtr*, int, void> glMultiDrawElementsEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, int, int, void> glMultiDrawElementsIndirectPtr;
		private static delegate* unmanaged<int, int, IntPtr, int, int, void> glMultiDrawElementsIndirectAMDPtr;
		private static delegate* unmanaged<int, int, IntPtr, int, int, int, int, void> glMultiDrawElementsIndirectBindlessCountNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, int, int, int, void> glMultiDrawElementsIndirectBindlessNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, int, void> glMultiDrawElementsIndirectCountPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, int, void> glMultiDrawElementsIndirectCountARBPtr;
		private static delegate* unmanaged<int, int, IntPtr, int, int, void> glMultiDrawElementsIndirectEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glMultiDrawMeshTasksIndirectNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, void> glMultiDrawMeshTasksIndirectCountNVPtr;
		private static delegate* unmanaged<int, uint, uint, int*, int*, int, void> glMultiDrawRangeElementArrayAPPLEPtr;
		private static delegate* unmanaged<uint*, int*, int*, int, int, void> glMultiModeDrawArraysIBMPtr;
		private static delegate* unmanaged<uint*, int*, int, IntPtr*, int, int, void> glMultiModeDrawElementsIBMPtr;
		private static delegate* unmanaged<int, int, int, uint, void> glMultiTexBufferEXTPtr;
		private static delegate* unmanaged<int, sbyte, void> glMultiTexCoord1bOESPtr;
		private static delegate* unmanaged<int, sbyte*, void> glMultiTexCoord1bvOESPtr;
		private static delegate* unmanaged<int, double, void> glMultiTexCoord1dPtr;
		private static delegate* unmanaged<int, double, void> glMultiTexCoord1dARBPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord1dvPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord1dvARBPtr;
		private static delegate* unmanaged<int, float, void> glMultiTexCoord1fPtr;
		private static delegate* unmanaged<int, float, void> glMultiTexCoord1fARBPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord1fvPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord1fvARBPtr;
		private static delegate* unmanaged<int, short, void> glMultiTexCoord1hNVPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord1hvNVPtr;
		private static delegate* unmanaged<int, int, void> glMultiTexCoord1iPtr;
		private static delegate* unmanaged<int, int, void> glMultiTexCoord1iARBPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord1ivPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord1ivARBPtr;
		private static delegate* unmanaged<int, short, void> glMultiTexCoord1sPtr;
		private static delegate* unmanaged<int, short, void> glMultiTexCoord1sARBPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord1svPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord1svARBPtr;
		private static delegate* unmanaged<int, IntPtr, void> glMultiTexCoord1xOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glMultiTexCoord1xvOESPtr;
		private static delegate* unmanaged<int, sbyte, sbyte, void> glMultiTexCoord2bOESPtr;
		private static delegate* unmanaged<int, sbyte*, void> glMultiTexCoord2bvOESPtr;
		private static delegate* unmanaged<int, double, double, void> glMultiTexCoord2dPtr;
		private static delegate* unmanaged<int, double, double, void> glMultiTexCoord2dARBPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord2dvPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord2dvARBPtr;
		private static delegate* unmanaged<int, float, float, void> glMultiTexCoord2fPtr;
		private static delegate* unmanaged<int, float, float, void> glMultiTexCoord2fARBPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord2fvPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord2fvARBPtr;
		private static delegate* unmanaged<int, short, short, void> glMultiTexCoord2hNVPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord2hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glMultiTexCoord2iPtr;
		private static delegate* unmanaged<int, int, int, void> glMultiTexCoord2iARBPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord2ivPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord2ivARBPtr;
		private static delegate* unmanaged<int, short, short, void> glMultiTexCoord2sPtr;
		private static delegate* unmanaged<int, short, short, void> glMultiTexCoord2sARBPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord2svPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord2svARBPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, void> glMultiTexCoord2xOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glMultiTexCoord2xvOESPtr;
		private static delegate* unmanaged<int, sbyte, sbyte, sbyte, void> glMultiTexCoord3bOESPtr;
		private static delegate* unmanaged<int, sbyte*, void> glMultiTexCoord3bvOESPtr;
		private static delegate* unmanaged<int, double, double, double, void> glMultiTexCoord3dPtr;
		private static delegate* unmanaged<int, double, double, double, void> glMultiTexCoord3dARBPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord3dvPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord3dvARBPtr;
		private static delegate* unmanaged<int, float, float, float, void> glMultiTexCoord3fPtr;
		private static delegate* unmanaged<int, float, float, float, void> glMultiTexCoord3fARBPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord3fvPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord3fvARBPtr;
		private static delegate* unmanaged<int, short, short, short, void> glMultiTexCoord3hNVPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord3hvNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glMultiTexCoord3iPtr;
		private static delegate* unmanaged<int, int, int, int, void> glMultiTexCoord3iARBPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord3ivPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord3ivARBPtr;
		private static delegate* unmanaged<int, short, short, short, void> glMultiTexCoord3sPtr;
		private static delegate* unmanaged<int, short, short, short, void> glMultiTexCoord3sARBPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord3svPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord3svARBPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, void> glMultiTexCoord3xOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glMultiTexCoord3xvOESPtr;
		private static delegate* unmanaged<int, sbyte, sbyte, sbyte, sbyte, void> glMultiTexCoord4bOESPtr;
		private static delegate* unmanaged<int, sbyte*, void> glMultiTexCoord4bvOESPtr;
		private static delegate* unmanaged<int, double, double, double, double, void> glMultiTexCoord4dPtr;
		private static delegate* unmanaged<int, double, double, double, double, void> glMultiTexCoord4dARBPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord4dvPtr;
		private static delegate* unmanaged<int, double*, void> glMultiTexCoord4dvARBPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glMultiTexCoord4fPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glMultiTexCoord4fARBPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord4fvPtr;
		private static delegate* unmanaged<int, float*, void> glMultiTexCoord4fvARBPtr;
		private static delegate* unmanaged<int, short, short, short, short, void> glMultiTexCoord4hNVPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord4hvNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glMultiTexCoord4iPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glMultiTexCoord4iARBPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord4ivPtr;
		private static delegate* unmanaged<int, int*, void> glMultiTexCoord4ivARBPtr;
		private static delegate* unmanaged<int, short, short, short, short, void> glMultiTexCoord4sPtr;
		private static delegate* unmanaged<int, short, short, short, short, void> glMultiTexCoord4sARBPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord4svPtr;
		private static delegate* unmanaged<int, short*, void> glMultiTexCoord4svARBPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void> glMultiTexCoord4xPtr;
		private static delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void> glMultiTexCoord4xOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glMultiTexCoord4xvOESPtr;
		private static delegate* unmanaged<int, int, uint, void> glMultiTexCoordP1uiPtr;
		private static delegate* unmanaged<int, int, uint*, void> glMultiTexCoordP1uivPtr;
		private static delegate* unmanaged<int, int, uint, void> glMultiTexCoordP2uiPtr;
		private static delegate* unmanaged<int, int, uint*, void> glMultiTexCoordP2uivPtr;
		private static delegate* unmanaged<int, int, uint, void> glMultiTexCoordP3uiPtr;
		private static delegate* unmanaged<int, int, uint*, void> glMultiTexCoordP3uivPtr;
		private static delegate* unmanaged<int, int, uint, void> glMultiTexCoordP4uiPtr;
		private static delegate* unmanaged<int, int, uint*, void> glMultiTexCoordP4uivPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glMultiTexCoordPointerEXTPtr;
		private static delegate* unmanaged<int, int, int, float, void> glMultiTexEnvfEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glMultiTexEnvfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glMultiTexEnviEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glMultiTexEnvivEXTPtr;
		private static delegate* unmanaged<int, int, int, double, void> glMultiTexGendEXTPtr;
		private static delegate* unmanaged<int, int, int, double*, void> glMultiTexGendvEXTPtr;
		private static delegate* unmanaged<int, int, int, float, void> glMultiTexGenfEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glMultiTexGenfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glMultiTexGeniEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glMultiTexGenivEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glMultiTexImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glMultiTexImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glMultiTexImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glMultiTexParameterIivEXTPtr;
		private static delegate* unmanaged<int, int, int, uint*, void> glMultiTexParameterIuivEXTPtr;
		private static delegate* unmanaged<int, int, int, float, void> glMultiTexParameterfEXTPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glMultiTexParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int, int, void> glMultiTexParameteriEXTPtr;
		private static delegate* unmanaged<int, int, int, int*, void> glMultiTexParameterivEXTPtr;
		private static delegate* unmanaged<int, int, uint, void> glMultiTexRenderbufferEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glMultiTexSubImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glMultiTexSubImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glMultiTexSubImage3DEXTPtr;
		private static delegate* unmanaged<void> glMulticastBarrierNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, int, void> glMulticastBlitFramebufferNVPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, IntPtr, void> glMulticastBufferSubDataNVPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void> glMulticastCopyBufferSubDataNVPtr;
		private static delegate* unmanaged<uint, uint, uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void> glMulticastCopyImageSubDataNVPtr;
		private static delegate* unmanaged<uint, uint, uint, int, float*, void> glMulticastFramebufferSampleLocationsfvNVPtr;
		private static delegate* unmanaged<uint, uint, int, long*, void> glMulticastGetQueryObjecti64vNVPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glMulticastGetQueryObjectivNVPtr;
		private static delegate* unmanaged<uint, uint, int, ulong*, void> glMulticastGetQueryObjectui64vNVPtr;
		private static delegate* unmanaged<uint, uint, int, uint*, void> glMulticastGetQueryObjectuivNVPtr;
		private static delegate* unmanaged<uint, uint, void> glMulticastWaitSyncNVPtr;
		private static delegate* unmanaged<uint, uint, ulong, void> glNamedBufferAttachMemoryNVPtr;
		private static delegate* unmanaged<uint, uint, IntPtr, int, void> glNamedBufferDataPtr;
		private static delegate* unmanaged<uint, uint, IntPtr, int, void> glNamedBufferDataEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, bool, void> glNamedBufferPageCommitmentARBPtr;
		private static delegate* unmanaged<uint, uint, uint, bool, void> glNamedBufferPageCommitmentEXTPtr;
		private static delegate* unmanaged<uint, uint, IntPtr, uint, void> glNamedBufferStoragePtr;
		private static delegate* unmanaged<uint, uint, uint, IntPtr, uint, void> glNamedBufferStorageExternalEXTPtr;
		private static delegate* unmanaged<uint, uint, IntPtr, uint, void> glNamedBufferStorageEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, ulong, void> glNamedBufferStorageMemEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, IntPtr, void> glNamedBufferSubDataPtr;
		private static delegate* unmanaged<uint, uint, uint, IntPtr, void> glNamedBufferSubDataEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glNamedCopyBufferSubDataEXTPtr;
		private static delegate* unmanaged<uint, int, void> glNamedFramebufferDrawBufferPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glNamedFramebufferDrawBuffersPtr;
		private static delegate* unmanaged<uint, int, int, void> glNamedFramebufferParameteriPtr;
		private static delegate* unmanaged<uint, int, int, void> glNamedFramebufferParameteriEXTPtr;
		private static delegate* unmanaged<uint, int, void> glNamedFramebufferReadBufferPtr;
		private static delegate* unmanaged<uint, int, int, uint, void> glNamedFramebufferRenderbufferPtr;
		private static delegate* unmanaged<uint, int, int, uint, void> glNamedFramebufferRenderbufferEXTPtr;
		private static delegate* unmanaged<uint, uint, int, float*, void> glNamedFramebufferSampleLocationsfvARBPtr;
		private static delegate* unmanaged<uint, uint, int, float*, void> glNamedFramebufferSampleLocationsfvNVPtr;
		private static delegate* unmanaged<uint, int, uint, int, void> glNamedFramebufferTexturePtr;
		private static delegate* unmanaged<uint, uint, uint, float*, void> glNamedFramebufferSamplePositionsfvAMDPtr;
		private static delegate* unmanaged<uint, int, int, uint, int, void> glNamedFramebufferTexture1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint, int, void> glNamedFramebufferTexture2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint, int, int, void> glNamedFramebufferTexture3DEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, void> glNamedFramebufferTextureEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, int, void> glNamedFramebufferTextureFaceEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, int, void> glNamedFramebufferTextureLayerPtr;
		private static delegate* unmanaged<uint, int, uint, int, int, void> glNamedFramebufferTextureLayerEXTPtr;
		private static delegate* unmanaged<uint, int, uint, double, double, double, double, void> glNamedProgramLocalParameter4dEXTPtr;
		private static delegate* unmanaged<uint, int, uint, double*, void> glNamedProgramLocalParameter4dvEXTPtr;
		private static delegate* unmanaged<uint, int, uint, float, float, float, float, void> glNamedProgramLocalParameter4fEXTPtr;
		private static delegate* unmanaged<uint, int, uint, float*, void> glNamedProgramLocalParameter4fvEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, int, int, int, void> glNamedProgramLocalParameterI4iEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int*, void> glNamedProgramLocalParameterI4ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, uint, uint, void> glNamedProgramLocalParameterI4uiEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint*, void> glNamedProgramLocalParameterI4uivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, float*, void> glNamedProgramLocalParameters4fvEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, int*, void> glNamedProgramLocalParametersI4ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, uint*, void> glNamedProgramLocalParametersI4uivEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glNamedProgramStringEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glNamedRenderbufferStoragePtr;
		private static delegate* unmanaged<uint, int, int, int, void> glNamedRenderbufferStorageEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glNamedRenderbufferStorageMultisamplePtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glNamedRenderbufferStorageMultisampleAdvancedAMDPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glNamedRenderbufferStorageMultisampleCoverageEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glNamedRenderbufferStorageMultisampleEXTPtr;
		private static delegate* unmanaged<int, int, byte*, int, byte*, void> glNamedStringARBPtr;
		private static delegate* unmanaged<uint, int, void> glNewListPtr;
		private static delegate* unmanaged<int, IntPtr, int, uint> glNewObjectBufferATIPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glNormal3bPtr;
		private static delegate* unmanaged<sbyte*, void> glNormal3bvPtr;
		private static delegate* unmanaged<double, double, double, void> glNormal3dPtr;
		private static delegate* unmanaged<double*, void> glNormal3dvPtr;
		private static delegate* unmanaged<float, float, float, void> glNormal3fPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, void> glNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float*, void> glNormal3fvPtr;
		private static delegate* unmanaged<short, short, short, void> glNormal3hNVPtr;
		private static delegate* unmanaged<short*, void> glNormal3hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glNormal3iPtr;
		private static delegate* unmanaged<int*, void> glNormal3ivPtr;
		private static delegate* unmanaged<short, short, short, void> glNormal3sPtr;
		private static delegate* unmanaged<short*, void> glNormal3svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glNormal3xPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glNormal3xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glNormal3xvOESPtr;
		private static delegate* unmanaged<int, int, void> glNormalFormatNVPtr;
		private static delegate* unmanaged<int, uint, void> glNormalP3uiPtr;
		private static delegate* unmanaged<int, uint*, void> glNormalP3uivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glNormalPointerPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glNormalPointerEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr*, int, void> glNormalPointerListIBMPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glNormalPointervINTELPtr;
		private static delegate* unmanaged<int, sbyte, sbyte, sbyte, void> glNormalStream3bATIPtr;
		private static delegate* unmanaged<int, sbyte*, void> glNormalStream3bvATIPtr;
		private static delegate* unmanaged<int, double, double, double, void> glNormalStream3dATIPtr;
		private static delegate* unmanaged<int, double*, void> glNormalStream3dvATIPtr;
		private static delegate* unmanaged<int, float, float, float, void> glNormalStream3fATIPtr;
		private static delegate* unmanaged<int, float*, void> glNormalStream3fvATIPtr;
		private static delegate* unmanaged<int, int, int, int, void> glNormalStream3iATIPtr;
		private static delegate* unmanaged<int, int*, void> glNormalStream3ivATIPtr;
		private static delegate* unmanaged<int, short, short, short, void> glNormalStream3sATIPtr;
		private static delegate* unmanaged<int, short*, void> glNormalStream3svATIPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glObjectLabelPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glObjectLabelKHRPtr;
		private static delegate* unmanaged<IntPtr, int, byte*, void> glObjectPtrLabelPtr;
		private static delegate* unmanaged<IntPtr, int, byte*, void> glObjectPtrLabelKHRPtr;
		private static delegate* unmanaged<int, uint, int, int> glObjectPurgeableAPPLEPtr;
		private static delegate* unmanaged<int, uint, int, int> glObjectUnpurgeableAPPLEPtr;
		private static delegate* unmanaged<double, double, double, double, double, double, void> glOrthoPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glOrthofPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, void> glOrthofOESPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> glOrthoxPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> glOrthoxOESPtr;
		private static delegate* unmanaged<int, float, void> glPNTrianglesfATIPtr;
		private static delegate* unmanaged<int, int, void> glPNTrianglesiATIPtr;
		private static delegate* unmanaged<uint, uint, int, void> glPassTexCoordATIPtr;
		private static delegate* unmanaged<float, void> glPassThroughPtr;
		private static delegate* unmanaged<IntPtr, void> glPassThroughxOESPtr;
		private static delegate* unmanaged<int, float*, void> glPatchParameterfvPtr;
		private static delegate* unmanaged<int, int, void> glPatchParameteriPtr;
		private static delegate* unmanaged<int, int, void> glPatchParameteriEXTPtr;
		private static delegate* unmanaged<int, int, void> glPatchParameteriOESPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glPathColorGenNVPtr;
		private static delegate* unmanaged<uint, int, byte*, int, int, IntPtr, void> glPathCommandsNVPtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, void> glPathCoordsNVPtr;
		private static delegate* unmanaged<int, void> glPathCoverDepthFuncNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glPathDashArrayNVPtr;
		private static delegate* unmanaged<int, void> glPathFogGenNVPtr;
		private static delegate* unmanaged<uint, int, IntPtr, uint, uint, int, uint, float, int> glPathGlyphIndexArrayNVPtr;
		private static delegate* unmanaged<int, IntPtr, uint, uint, float, uint*, int> glPathGlyphIndexRangeNVPtr;
		private static delegate* unmanaged<uint, int, IntPtr, uint, uint, int, int, uint, float, void> glPathGlyphRangeNVPtr;
		private static delegate* unmanaged<uint, int, IntPtr, uint, int, int, IntPtr, int, uint, float, void> glPathGlyphsNVPtr;
		private static delegate* unmanaged<uint, int, uint, IntPtr, int, uint, int, uint, float, int> glPathMemoryGlyphIndexArrayNVPtr;
		private static delegate* unmanaged<uint, int, float, void> glPathParameterfNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glPathParameterfvNVPtr;
		private static delegate* unmanaged<uint, int, int, void> glPathParameteriNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glPathParameterivNVPtr;
		private static delegate* unmanaged<float, float, void> glPathStencilDepthOffsetNVPtr;
		private static delegate* unmanaged<int, int, uint, void> glPathStencilFuncNVPtr;
		private static delegate* unmanaged<uint, int, int, IntPtr, void> glPathStringNVPtr;
		private static delegate* unmanaged<uint, int, int, int, byte*, int, int, IntPtr, void> glPathSubCommandsNVPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glPathSubCoordsNVPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glPathTexGenNVPtr;
		private static delegate* unmanaged<void> glPauseTransformFeedbackPtr;
		private static delegate* unmanaged<void> glPauseTransformFeedbackNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glPixelDataRangeNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glPixelMapfvPtr;
		private static delegate* unmanaged<int, int, uint*, void> glPixelMapuivPtr;
		private static delegate* unmanaged<int, int, ushort*, void> glPixelMapusvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glPixelMapxPtr;
		private static delegate* unmanaged<int, float, void> glPixelStorefPtr;
		private static delegate* unmanaged<int, int, void> glPixelStoreiPtr;
		private static delegate* unmanaged<int, IntPtr, void> glPixelStorexPtr;
		private static delegate* unmanaged<int, float, void> glPixelTexGenParameterfSGISPtr;
		private static delegate* unmanaged<int, float*, void> glPixelTexGenParameterfvSGISPtr;
		private static delegate* unmanaged<int, int, void> glPixelTexGenParameteriSGISPtr;
		private static delegate* unmanaged<int, int*, void> glPixelTexGenParameterivSGISPtr;
		private static delegate* unmanaged<int, void> glPixelTexGenSGIXPtr;
		private static delegate* unmanaged<int, float, void> glPixelTransferfPtr;
		private static delegate* unmanaged<int, int, void> glPixelTransferiPtr;
		private static delegate* unmanaged<int, IntPtr, void> glPixelTransferxOESPtr;
		private static delegate* unmanaged<int, int, float, void> glPixelTransformParameterfEXTPtr;
		private static delegate* unmanaged<int, int, float*, void> glPixelTransformParameterfvEXTPtr;
		private static delegate* unmanaged<int, int, int, void> glPixelTransformParameteriEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glPixelTransformParameterivEXTPtr;
		private static delegate* unmanaged<float, float, void> glPixelZoomPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glPixelZoomxOESPtr;
		private static delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, bool> glPointAlongPathNVPtr;
		private static delegate* unmanaged<int, float, void> glPointParameterfPtr;
		private static delegate* unmanaged<int, float, void> glPointParameterfARBPtr;
		private static delegate* unmanaged<int, float, void> glPointParameterfEXTPtr;
		private static delegate* unmanaged<int, float, void> glPointParameterfSGISPtr;
		private static delegate* unmanaged<int, float*, void> glPointParameterfvPtr;
		private static delegate* unmanaged<int, float*, void> glPointParameterfvARBPtr;
		private static delegate* unmanaged<int, float*, void> glPointParameterfvEXTPtr;
		private static delegate* unmanaged<int, float*, void> glPointParameterfvSGISPtr;
		private static delegate* unmanaged<int, int, void> glPointParameteriPtr;
		private static delegate* unmanaged<int, int, void> glPointParameteriNVPtr;
		private static delegate* unmanaged<int, int*, void> glPointParameterivPtr;
		private static delegate* unmanaged<int, int*, void> glPointParameterivNVPtr;
		private static delegate* unmanaged<int, IntPtr, void> glPointParameterxPtr;
		private static delegate* unmanaged<int, IntPtr, void> glPointParameterxOESPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glPointParameterxvPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glPointParameterxvOESPtr;
		private static delegate* unmanaged<float, void> glPointSizePtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glPointSizePointerOESPtr;
		private static delegate* unmanaged<IntPtr, void> glPointSizexPtr;
		private static delegate* unmanaged<IntPtr, void> glPointSizexOESPtr;
		private static delegate* unmanaged<uint*, int> glPollAsyncSGIXPtr;
		private static delegate* unmanaged<int*, int> glPollInstrumentsSGIXPtr;
		private static delegate* unmanaged<int, int, void> glPolygonModePtr;
		private static delegate* unmanaged<int, int, void> glPolygonModeNVPtr;
		private static delegate* unmanaged<float, float, void> glPolygonOffsetPtr;
		private static delegate* unmanaged<float, float, float, void> glPolygonOffsetClampPtr;
		private static delegate* unmanaged<float, float, float, void> glPolygonOffsetClampEXTPtr;
		private static delegate* unmanaged<float, float, void> glPolygonOffsetEXTPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glPolygonOffsetxPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glPolygonOffsetxOESPtr;
		private static delegate* unmanaged<byte*, void> glPolygonStipplePtr;
		private static delegate* unmanaged<void> glPopAttribPtr;
		private static delegate* unmanaged<void> glPopClientAttribPtr;
		private static delegate* unmanaged<void> glPopDebugGroupPtr;
		private static delegate* unmanaged<void> glPopDebugGroupKHRPtr;
		private static delegate* unmanaged<void> glPopGroupMarkerEXTPtr;
		private static delegate* unmanaged<void> glPopMatrixPtr;
		private static delegate* unmanaged<void> glPopNamePtr;
		private static delegate* unmanaged<uint, ulong, uint, uint, int, int, uint, int, uint, int, uint, int, uint, void> glPresentFrameDualFillNVPtr;
		private static delegate* unmanaged<uint, ulong, uint, uint, int, int, uint, uint, int, uint, uint, void> glPresentFrameKeyedNVPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glPrimitiveBoundingBoxPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glPrimitiveBoundingBoxARBPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glPrimitiveBoundingBoxEXTPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glPrimitiveBoundingBoxOESPtr;
		private static delegate* unmanaged<uint, void> glPrimitiveRestartIndexPtr;
		private static delegate* unmanaged<uint, void> glPrimitiveRestartIndexNVPtr;
		private static delegate* unmanaged<void> glPrimitiveRestartNVPtr;
		private static delegate* unmanaged<int, uint*, float*, void> glPrioritizeTexturesPtr;
		private static delegate* unmanaged<int, uint*, float*, void> glPrioritizeTexturesEXTPtr;
		private static delegate* unmanaged<int, uint*, IntPtr*, void> glPrioritizeTexturesxOESPtr;
		private static delegate* unmanaged<uint, int, IntPtr, int, void> glProgramBinaryPtr;
		private static delegate* unmanaged<uint, int, IntPtr, int, void> glProgramBinaryOESPtr;
		private static delegate* unmanaged<int, uint, uint, int, int*, void> glProgramBufferParametersIivNVPtr;
		private static delegate* unmanaged<int, uint, uint, int, uint*, void> glProgramBufferParametersIuivNVPtr;
		private static delegate* unmanaged<int, uint, uint, int, float*, void> glProgramBufferParametersfvNVPtr;
		private static delegate* unmanaged<int, uint, double, double, double, double, void> glProgramEnvParameter4dARBPtr;
		private static delegate* unmanaged<int, uint, double*, void> glProgramEnvParameter4dvARBPtr;
		private static delegate* unmanaged<int, uint, float, float, float, float, void> glProgramEnvParameter4fARBPtr;
		private static delegate* unmanaged<int, uint, float*, void> glProgramEnvParameter4fvARBPtr;
		private static delegate* unmanaged<int, uint, int, int, int, int, void> glProgramEnvParameterI4iNVPtr;
		private static delegate* unmanaged<int, uint, int*, void> glProgramEnvParameterI4ivNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, void> glProgramEnvParameterI4uiNVPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glProgramEnvParameterI4uivNVPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glProgramEnvParameters4fvEXTPtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glProgramEnvParametersI4ivNVPtr;
		private static delegate* unmanaged<int, uint, int, uint*, void> glProgramEnvParametersI4uivNVPtr;
		private static delegate* unmanaged<int, uint, double, double, double, double, void> glProgramLocalParameter4dARBPtr;
		private static delegate* unmanaged<int, uint, double*, void> glProgramLocalParameter4dvARBPtr;
		private static delegate* unmanaged<int, uint, float, float, float, float, void> glProgramLocalParameter4fARBPtr;
		private static delegate* unmanaged<int, uint, float*, void> glProgramLocalParameter4fvARBPtr;
		private static delegate* unmanaged<int, uint, int, int, int, int, void> glProgramLocalParameterI4iNVPtr;
		private static delegate* unmanaged<int, uint, int*, void> glProgramLocalParameterI4ivNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, uint, void> glProgramLocalParameterI4uiNVPtr;
		private static delegate* unmanaged<int, uint, uint*, void> glProgramLocalParameterI4uivNVPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glProgramLocalParameters4fvEXTPtr;
		private static delegate* unmanaged<int, uint, int, int*, void> glProgramLocalParametersI4ivNVPtr;
		private static delegate* unmanaged<int, uint, int, uint*, void> glProgramLocalParametersI4uivNVPtr;
		private static delegate* unmanaged<uint, int, byte*, double, double, double, double, void> glProgramNamedParameter4dNVPtr;
		private static delegate* unmanaged<uint, int, byte*, double*, void> glProgramNamedParameter4dvNVPtr;
		private static delegate* unmanaged<uint, int, byte*, float, float, float, float, void> glProgramNamedParameter4fNVPtr;
		private static delegate* unmanaged<uint, int, byte*, float*, void> glProgramNamedParameter4fvNVPtr;
		private static delegate* unmanaged<int, uint, double, double, double, double, void> glProgramParameter4dNVPtr;
		private static delegate* unmanaged<int, uint, double*, void> glProgramParameter4dvNVPtr;
		private static delegate* unmanaged<int, uint, float, float, float, float, void> glProgramParameter4fNVPtr;
		private static delegate* unmanaged<int, uint, float*, void> glProgramParameter4fvNVPtr;
		private static delegate* unmanaged<uint, int, int, void> glProgramParameteriPtr;
		private static delegate* unmanaged<uint, int, int, void> glProgramParameteriARBPtr;
		private static delegate* unmanaged<uint, int, int, void> glProgramParameteriEXTPtr;
		private static delegate* unmanaged<int, uint, int, double*, void> glProgramParameters4dvNVPtr;
		private static delegate* unmanaged<int, uint, int, float*, void> glProgramParameters4fvNVPtr;
		private static delegate* unmanaged<uint, int, int, int, float*, void> glProgramPathFragmentInputGenNVPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glProgramStringARBPtr;
		private static delegate* unmanaged<int, int, uint*, void> glProgramSubroutineParametersuivNVPtr;
		private static delegate* unmanaged<uint, int, double, void> glProgramUniform1dPtr;
		private static delegate* unmanaged<uint, int, double, void> glProgramUniform1dEXTPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform1dvPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform1dvEXTPtr;
		private static delegate* unmanaged<uint, int, float, void> glProgramUniform1fPtr;
		private static delegate* unmanaged<uint, int, float, void> glProgramUniform1fEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform1fvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform1fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glProgramUniform1iPtr;
		private static delegate* unmanaged<uint, int, long, void> glProgramUniform1i64ARBPtr;
		private static delegate* unmanaged<uint, int, long, void> glProgramUniform1i64NVPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform1i64vARBPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform1i64vNVPtr;
		private static delegate* unmanaged<uint, int, int, void> glProgramUniform1iEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform1ivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform1ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, void> glProgramUniform1uiPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniform1ui64ARBPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniform1ui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform1ui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform1ui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint, void> glProgramUniform1uiEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform1uivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform1uivEXTPtr;
		private static delegate* unmanaged<uint, int, double, double, void> glProgramUniform2dPtr;
		private static delegate* unmanaged<uint, int, double, double, void> glProgramUniform2dEXTPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform2dvPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform2dvEXTPtr;
		private static delegate* unmanaged<uint, int, float, float, void> glProgramUniform2fPtr;
		private static delegate* unmanaged<uint, int, float, float, void> glProgramUniform2fEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform2fvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform2fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glProgramUniform2iPtr;
		private static delegate* unmanaged<uint, int, long, long, void> glProgramUniform2i64ARBPtr;
		private static delegate* unmanaged<uint, int, long, long, void> glProgramUniform2i64NVPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform2i64vARBPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform2i64vNVPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glProgramUniform2iEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform2ivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform2ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, void> glProgramUniform2uiPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, void> glProgramUniform2ui64ARBPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, void> glProgramUniform2ui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform2ui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform2ui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint, uint, void> glProgramUniform2uiEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform2uivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform2uivEXTPtr;
		private static delegate* unmanaged<uint, int, double, double, double, void> glProgramUniform3dPtr;
		private static delegate* unmanaged<uint, int, double, double, double, void> glProgramUniform3dEXTPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform3dvPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform3dvEXTPtr;
		private static delegate* unmanaged<uint, int, float, float, float, void> glProgramUniform3fPtr;
		private static delegate* unmanaged<uint, int, float, float, float, void> glProgramUniform3fEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform3fvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform3fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glProgramUniform3iPtr;
		private static delegate* unmanaged<uint, int, long, long, long, void> glProgramUniform3i64ARBPtr;
		private static delegate* unmanaged<uint, int, long, long, long, void> glProgramUniform3i64NVPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform3i64vARBPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform3i64vNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glProgramUniform3iEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform3ivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform3ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, void> glProgramUniform3uiPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, ulong, void> glProgramUniform3ui64ARBPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, ulong, void> glProgramUniform3ui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform3ui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform3ui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, void> glProgramUniform3uiEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform3uivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform3uivEXTPtr;
		private static delegate* unmanaged<uint, int, double, double, double, double, void> glProgramUniform4dPtr;
		private static delegate* unmanaged<uint, int, double, double, double, double, void> glProgramUniform4dEXTPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform4dvPtr;
		private static delegate* unmanaged<uint, int, int, double*, void> glProgramUniform4dvEXTPtr;
		private static delegate* unmanaged<uint, int, float, float, float, float, void> glProgramUniform4fPtr;
		private static delegate* unmanaged<uint, int, float, float, float, float, void> glProgramUniform4fEXTPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform4fvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glProgramUniform4fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glProgramUniform4iPtr;
		private static delegate* unmanaged<uint, int, long, long, long, long, void> glProgramUniform4i64ARBPtr;
		private static delegate* unmanaged<uint, int, long, long, long, long, void> glProgramUniform4i64NVPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform4i64vARBPtr;
		private static delegate* unmanaged<uint, int, int, long*, void> glProgramUniform4i64vNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glProgramUniform4iEXTPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform4ivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glProgramUniform4ivEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, uint, void> glProgramUniform4uiPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, ulong, ulong, void> glProgramUniform4ui64ARBPtr;
		private static delegate* unmanaged<uint, int, ulong, ulong, ulong, ulong, void> glProgramUniform4ui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform4ui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniform4ui64vNVPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, uint, void> glProgramUniform4uiEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform4uivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glProgramUniform4uivEXTPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniformHandleui64ARBPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniformHandleui64IMGPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniformHandleui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniformHandleui64vARBPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniformHandleui64vIMGPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniformHandleui64vNVPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2x3dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2x3dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2x3fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2x3fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2x4dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix2x4dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2x4fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix2x4fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3x2dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3x2dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3x2fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3x2fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3x4dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix3x4dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3x4fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix3x4fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4x2dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4x2dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4x2fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4x2fvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4x3dvPtr;
		private static delegate* unmanaged<uint, int, int, bool, double*, void> glProgramUniformMatrix4x3dvEXTPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4x3fvPtr;
		private static delegate* unmanaged<uint, int, int, bool, float*, void> glProgramUniformMatrix4x3fvEXTPtr;
		private static delegate* unmanaged<uint, int, ulong, void> glProgramUniformui64NVPtr;
		private static delegate* unmanaged<uint, int, int, ulong*, void> glProgramUniformui64vNVPtr;
		private static delegate* unmanaged<int, int, void> glProgramVertexLimitNVPtr;
		private static delegate* unmanaged<int, void> glProvokingVertexPtr;
		private static delegate* unmanaged<int, void> glProvokingVertexEXTPtr;
		private static delegate* unmanaged<uint, void> glPushAttribPtr;
		private static delegate* unmanaged<uint, void> glPushClientAttribPtr;
		private static delegate* unmanaged<uint, void> glPushClientAttribDefaultEXTPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glPushDebugGroupPtr;
		private static delegate* unmanaged<int, uint, int, byte*, void> glPushDebugGroupKHRPtr;
		private static delegate* unmanaged<int, byte*, void> glPushGroupMarkerEXTPtr;
		private static delegate* unmanaged<void> glPushMatrixPtr;
		private static delegate* unmanaged<uint, void> glPushNamePtr;
		private static delegate* unmanaged<uint, int, void> glQueryCounterPtr;
		private static delegate* unmanaged<uint, int, void> glQueryCounterEXTPtr;
		private static delegate* unmanaged<IntPtr*, int*, uint> glQueryMatrixxOESPtr;
		private static delegate* unmanaged<int, uint, int, uint, void> glQueryObjectParameteruiAMDPtr;
		private static delegate* unmanaged<int, int, uint, int*, int> glQueryResourceNVPtr;
		private static delegate* unmanaged<int, byte*, void> glQueryResourceTagNVPtr;
		private static delegate* unmanaged<double, double, void> glRasterPos2dPtr;
		private static delegate* unmanaged<double*, void> glRasterPos2dvPtr;
		private static delegate* unmanaged<float, float, void> glRasterPos2fPtr;
		private static delegate* unmanaged<float*, void> glRasterPos2fvPtr;
		private static delegate* unmanaged<int, int, void> glRasterPos2iPtr;
		private static delegate* unmanaged<int*, void> glRasterPos2ivPtr;
		private static delegate* unmanaged<short, short, void> glRasterPos2sPtr;
		private static delegate* unmanaged<short*, void> glRasterPos2svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glRasterPos2xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glRasterPos2xvOESPtr;
		private static delegate* unmanaged<double, double, double, void> glRasterPos3dPtr;
		private static delegate* unmanaged<double*, void> glRasterPos3dvPtr;
		private static delegate* unmanaged<float, float, float, void> glRasterPos3fPtr;
		private static delegate* unmanaged<float*, void> glRasterPos3fvPtr;
		private static delegate* unmanaged<int, int, int, void> glRasterPos3iPtr;
		private static delegate* unmanaged<int*, void> glRasterPos3ivPtr;
		private static delegate* unmanaged<short, short, short, void> glRasterPos3sPtr;
		private static delegate* unmanaged<short*, void> glRasterPos3svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glRasterPos3xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glRasterPos3xvOESPtr;
		private static delegate* unmanaged<double, double, double, double, void> glRasterPos4dPtr;
		private static delegate* unmanaged<double*, void> glRasterPos4dvPtr;
		private static delegate* unmanaged<float, float, float, float, void> glRasterPos4fPtr;
		private static delegate* unmanaged<float*, void> glRasterPos4fvPtr;
		private static delegate* unmanaged<int, int, int, int, void> glRasterPos4iPtr;
		private static delegate* unmanaged<int*, void> glRasterPos4ivPtr;
		private static delegate* unmanaged<short, short, short, short, void> glRasterPos4sPtr;
		private static delegate* unmanaged<short*, void> glRasterPos4svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glRasterPos4xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glRasterPos4xvOESPtr;
		private static delegate* unmanaged<uint, bool, void> glRasterSamplesEXTPtr;
		private static delegate* unmanaged<int, void> glReadBufferPtr;
		private static delegate* unmanaged<int, int, void> glReadBufferIndexedEXTPtr;
		private static delegate* unmanaged<int, void> glReadBufferNVPtr;
		private static delegate* unmanaged<int, void> glReadInstrumentsSGIXPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glReadPixelsPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glReadnPixelsPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glReadnPixelsARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glReadnPixelsEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glReadnPixelsKHRPtr;
		private static delegate* unmanaged<uint, ulong, bool> glReleaseKeyedMutexWin32EXTPtr;
		private static delegate* unmanaged<double, double, double, double, void> glRectdPtr;
		private static delegate* unmanaged<double*, double*, void> glRectdvPtr;
		private static delegate* unmanaged<float, float, float, float, void> glRectfPtr;
		private static delegate* unmanaged<float*, float*, void> glRectfvPtr;
		private static delegate* unmanaged<int, int, int, int, void> glRectiPtr;
		private static delegate* unmanaged<int*, int*, void> glRectivPtr;
		private static delegate* unmanaged<short, short, short, short, void> glRectsPtr;
		private static delegate* unmanaged<short*, short*, void> glRectsvPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glRectxOESPtr;
		private static delegate* unmanaged<IntPtr*, IntPtr*, void> glRectxvOESPtr;
		private static delegate* unmanaged<double*, void> glReferencePlaneSGIXPtr;
		private static delegate* unmanaged<void> glReleaseShaderCompilerPtr;
		private static delegate* unmanaged<uint, void> glRenderGpuMaskNVPtr;
		private static delegate* unmanaged<int, int> glRenderModePtr;
		private static delegate* unmanaged<int, int, int, int, void> glRenderbufferStoragePtr;
		private static delegate* unmanaged<int, int, int, int, void> glRenderbufferStorageEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisamplePtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisampleANGLEPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisampleAPPLEPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glRenderbufferStorageMultisampleAdvancedAMDPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glRenderbufferStorageMultisampleCoverageNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisampleEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisampleIMGPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glRenderbufferStorageMultisampleNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glRenderbufferStorageOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glReplacementCodePointerSUNPtr;
		private static delegate* unmanaged<byte, void> glReplacementCodeubSUNPtr;
		private static delegate* unmanaged<byte*, void> glReplacementCodeubvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, float, void> glReplacementCodeuiColor3fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, void> glReplacementCodeuiColor3fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void> glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, float*, void> glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void> glReplacementCodeuiColor4ubVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, byte*, float*, void> glReplacementCodeuiColor4ubVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, float, void> glReplacementCodeuiNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, void> glReplacementCodeuiNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, void> glReplacementCodeuiSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void> glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, float*, float*, void> glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void> glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, float*, void> glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, float, float, void> glReplacementCodeuiTexCoord2fVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, float*, void> glReplacementCodeuiTexCoord2fVertex3fvSUNPtr;
		private static delegate* unmanaged<uint, float, float, float, void> glReplacementCodeuiVertex3fSUNPtr;
		private static delegate* unmanaged<uint*, float*, void> glReplacementCodeuiVertex3fvSUNPtr;
		private static delegate* unmanaged<uint*, void> glReplacementCodeuivSUNPtr;
		private static delegate* unmanaged<ushort, void> glReplacementCodeusSUNPtr;
		private static delegate* unmanaged<ushort*, void> glReplacementCodeusvSUNPtr;
		private static delegate* unmanaged<int, uint*, void> glRequestResidentProgramsNVPtr;
		private static delegate* unmanaged<int, void> glResetHistogramPtr;
		private static delegate* unmanaged<int, void> glResetHistogramEXTPtr;
		private static delegate* unmanaged<uint, int, void> glResetMemoryObjectParameterNVPtr;
		private static delegate* unmanaged<int, void> glResetMinmaxPtr;
		private static delegate* unmanaged<int, void> glResetMinmaxEXTPtr;
		private static delegate* unmanaged<void> glResizeBuffersMESAPtr;
		private static delegate* unmanaged<void> glResolveDepthValuesNVPtr;
		private static delegate* unmanaged<void> glResolveMultisampleFramebufferAPPLEPtr;
		private static delegate* unmanaged<void> glResumeTransformFeedbackPtr;
		private static delegate* unmanaged<void> glResumeTransformFeedbackNVPtr;
		private static delegate* unmanaged<double, double, double, double, void> glRotatedPtr;
		private static delegate* unmanaged<float, float, float, float, void> glRotatefPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glRotatexPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glRotatexOESPtr;
		private static delegate* unmanaged<float, bool, void> glSampleCoveragePtr;
		private static delegate* unmanaged<float, bool, void> glSampleCoverageARBPtr;
		private static delegate* unmanaged<int, bool, void> glSampleCoveragexPtr;
		private static delegate* unmanaged<int, bool, void> glSampleCoveragexOESPtr;
		private static delegate* unmanaged<uint, uint, int, void> glSampleMapATIPtr;
		private static delegate* unmanaged<float, bool, void> glSampleMaskEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glSampleMaskIndexedNVPtr;
		private static delegate* unmanaged<float, bool, void> glSampleMaskSGISPtr;
		private static delegate* unmanaged<uint, uint, void> glSampleMaskiPtr;
		private static delegate* unmanaged<int, void> glSamplePatternEXTPtr;
		private static delegate* unmanaged<int, void> glSamplePatternSGISPtr;
		private static delegate* unmanaged<uint, int, int*, void> glSamplerParameterIivPtr;
		private static delegate* unmanaged<uint, int, int*, void> glSamplerParameterIivEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glSamplerParameterIivOESPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glSamplerParameterIuivPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glSamplerParameterIuivEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glSamplerParameterIuivOESPtr;
		private static delegate* unmanaged<uint, int, float, void> glSamplerParameterfPtr;
		private static delegate* unmanaged<uint, int, float*, void> glSamplerParameterfvPtr;
		private static delegate* unmanaged<uint, int, int, void> glSamplerParameteriPtr;
		private static delegate* unmanaged<uint, int, int*, void> glSamplerParameterivPtr;
		private static delegate* unmanaged<double, double, double, void> glScaledPtr;
		private static delegate* unmanaged<float, float, float, void> glScalefPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glScalexPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glScalexOESPtr;
		private static delegate* unmanaged<int, int, int, int, void> glScissorPtr;
		private static delegate* unmanaged<uint, int, int*, void> glScissorArrayvPtr;
		private static delegate* unmanaged<uint, int, int*, void> glScissorArrayvNVPtr;
		private static delegate* unmanaged<uint, int, int*, void> glScissorArrayvOESPtr;
		private static delegate* unmanaged<uint, int, int*, void> glScissorExclusiveArrayvNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glScissorExclusiveNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glScissorIndexedPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glScissorIndexedNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glScissorIndexedOESPtr;
		private static delegate* unmanaged<uint, int*, void> glScissorIndexedvPtr;
		private static delegate* unmanaged<uint, int*, void> glScissorIndexedvNVPtr;
		private static delegate* unmanaged<uint, int*, void> glScissorIndexedvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glSecondaryColor3bPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glSecondaryColor3bEXTPtr;
		private static delegate* unmanaged<sbyte*, void> glSecondaryColor3bvPtr;
		private static delegate* unmanaged<sbyte*, void> glSecondaryColor3bvEXTPtr;
		private static delegate* unmanaged<double, double, double, void> glSecondaryColor3dPtr;
		private static delegate* unmanaged<double, double, double, void> glSecondaryColor3dEXTPtr;
		private static delegate* unmanaged<double*, void> glSecondaryColor3dvPtr;
		private static delegate* unmanaged<double*, void> glSecondaryColor3dvEXTPtr;
		private static delegate* unmanaged<float, float, float, void> glSecondaryColor3fPtr;
		private static delegate* unmanaged<float, float, float, void> glSecondaryColor3fEXTPtr;
		private static delegate* unmanaged<float*, void> glSecondaryColor3fvPtr;
		private static delegate* unmanaged<float*, void> glSecondaryColor3fvEXTPtr;
		private static delegate* unmanaged<short, short, short, void> glSecondaryColor3hNVPtr;
		private static delegate* unmanaged<short*, void> glSecondaryColor3hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glSecondaryColor3iPtr;
		private static delegate* unmanaged<int, int, int, void> glSecondaryColor3iEXTPtr;
		private static delegate* unmanaged<int*, void> glSecondaryColor3ivPtr;
		private static delegate* unmanaged<int*, void> glSecondaryColor3ivEXTPtr;
		private static delegate* unmanaged<short, short, short, void> glSecondaryColor3sPtr;
		private static delegate* unmanaged<short, short, short, void> glSecondaryColor3sEXTPtr;
		private static delegate* unmanaged<short*, void> glSecondaryColor3svPtr;
		private static delegate* unmanaged<short*, void> glSecondaryColor3svEXTPtr;
		private static delegate* unmanaged<byte, byte, byte, void> glSecondaryColor3ubPtr;
		private static delegate* unmanaged<byte, byte, byte, void> glSecondaryColor3ubEXTPtr;
		private static delegate* unmanaged<byte*, void> glSecondaryColor3ubvPtr;
		private static delegate* unmanaged<byte*, void> glSecondaryColor3ubvEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glSecondaryColor3uiPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glSecondaryColor3uiEXTPtr;
		private static delegate* unmanaged<uint*, void> glSecondaryColor3uivPtr;
		private static delegate* unmanaged<uint*, void> glSecondaryColor3uivEXTPtr;
		private static delegate* unmanaged<ushort, ushort, ushort, void> glSecondaryColor3usPtr;
		private static delegate* unmanaged<ushort, ushort, ushort, void> glSecondaryColor3usEXTPtr;
		private static delegate* unmanaged<ushort*, void> glSecondaryColor3usvPtr;
		private static delegate* unmanaged<ushort*, void> glSecondaryColor3usvEXTPtr;
		private static delegate* unmanaged<int, int, int, void> glSecondaryColorFormatNVPtr;
		private static delegate* unmanaged<int, uint, void> glSecondaryColorP3uiPtr;
		private static delegate* unmanaged<int, uint*, void> glSecondaryColorP3uivPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glSecondaryColorPointerPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glSecondaryColorPointerEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr*, int, void> glSecondaryColorPointerListIBMPtr;
		private static delegate* unmanaged<int, uint*, void> glSelectBufferPtr;
		private static delegate* unmanaged<uint, bool, uint, int, uint*, void> glSelectPerfMonitorCountersAMDPtr;
		private static delegate* unmanaged<uint, int, ulong*, void> glSemaphoreParameterui64vEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, IntPtr, void> glSeparableFilter2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, IntPtr, void> glSeparableFilter2DEXTPtr;
		private static delegate* unmanaged<uint, void> glSetFenceAPPLEPtr;
		private static delegate* unmanaged<uint, int, void> glSetFenceNVPtr;
		private static delegate* unmanaged<uint, float*, void> glSetFragmentShaderConstantATIPtr;
		private static delegate* unmanaged<uint, int, IntPtr, void> glSetInvariantEXTPtr;
		private static delegate* unmanaged<uint, int, IntPtr, void> glSetLocalConstantEXTPtr;
		private static delegate* unmanaged<int, uint, float*, void> glSetMultisamplefvAMDPtr;
		private static delegate* unmanaged<int, void> glShadeModelPtr;
		private static delegate* unmanaged<int, uint*, int, IntPtr, int, void> glShaderBinaryPtr;
		private static delegate* unmanaged<int, uint, uint, void> glShaderOp1EXTPtr;
		private static delegate* unmanaged<int, uint, uint, uint, void> glShaderOp2EXTPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glShaderOp3EXTPtr;
		private static delegate* unmanaged<uint, int, byte**, int*, void> glShaderSourcePtr;
		private static delegate* unmanaged<uint, int, byte**, int*, void> glShaderSourceARBPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glShaderStorageBlockBindingPtr;
		private static delegate* unmanaged<bool, void> glShadingRateImageBarrierNVPtr;
		private static delegate* unmanaged<uint, uint, int, uint*, void> glShadingRateImagePaletteNVPtr;
		private static delegate* unmanaged<int, void> glShadingRateSampleOrderNVPtr;
		private static delegate* unmanaged<int, uint, int*, void> glShadingRateSampleOrderCustomNVPtr;
		private static delegate* unmanaged<int, int, float*, void> glSharpenTexFuncSGISPtr;
		private static delegate* unmanaged<uint, uint, uint*, uint, uint*, uint*, void> glSignalSemaphoreEXTPtr;
		private static delegate* unmanaged<uint, byte*, uint, uint*, uint*, void> glSpecializeShaderPtr;
		private static delegate* unmanaged<uint, byte*, uint, uint*, uint*, void> glSpecializeShaderARBPtr;
		private static delegate* unmanaged<int, float, void> glSpriteParameterfSGIXPtr;
		private static delegate* unmanaged<int, float*, void> glSpriteParameterfvSGIXPtr;
		private static delegate* unmanaged<int, int, void> glSpriteParameteriSGIXPtr;
		private static delegate* unmanaged<int, int*, void> glSpriteParameterivSGIXPtr;
		private static delegate* unmanaged<void> glStartInstrumentsSGIXPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glStartTilingQCOMPtr;
		private static delegate* unmanaged<uint, int, void> glStateCaptureNVPtr;
		private static delegate* unmanaged<int, uint, void> glStencilClearTagEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, float*, void> glStencilFillPathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, uint, void> glStencilFillPathNVPtr;
		private static delegate* unmanaged<int, int, uint, void> glStencilFuncPtr;
		private static delegate* unmanaged<int, int, int, uint, void> glStencilFuncSeparatePtr;
		private static delegate* unmanaged<int, int, int, uint, void> glStencilFuncSeparateATIPtr;
		private static delegate* unmanaged<uint, void> glStencilMaskPtr;
		private static delegate* unmanaged<int, uint, void> glStencilMaskSeparatePtr;
		private static delegate* unmanaged<int, int, int, void> glStencilOpPtr;
		private static delegate* unmanaged<int, int, int, int, void> glStencilOpSeparatePtr;
		private static delegate* unmanaged<int, int, int, int, void> glStencilOpSeparateATIPtr;
		private static delegate* unmanaged<int, uint, void> glStencilOpValueAMDPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, float*, void> glStencilStrokePathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, uint, void> glStencilStrokePathNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, int, float*, void> glStencilThenCoverFillPathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, uint, int, void> glStencilThenCoverFillPathNVPtr;
		private static delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, int, float*, void> glStencilThenCoverStrokePathInstancedNVPtr;
		private static delegate* unmanaged<uint, int, uint, int, void> glStencilThenCoverStrokePathNVPtr;
		private static delegate* unmanaged<int, void> glStopInstrumentsSGIXPtr;
		private static delegate* unmanaged<int, IntPtr, void> glStringMarkerGREMEDYPtr;
		private static delegate* unmanaged<uint, uint, void> glSubpixelPrecisionBiasNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, int, void> glSwizzleEXTPtr;
		private static delegate* unmanaged<uint, void> glSyncTextureINTELPtr;
		private static delegate* unmanaged<void> glTagSampleBufferSGIXPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glTangent3bEXTPtr;
		private static delegate* unmanaged<sbyte*, void> glTangent3bvEXTPtr;
		private static delegate* unmanaged<double, double, double, void> glTangent3dEXTPtr;
		private static delegate* unmanaged<double*, void> glTangent3dvEXTPtr;
		private static delegate* unmanaged<float, float, float, void> glTangent3fEXTPtr;
		private static delegate* unmanaged<float*, void> glTangent3fvEXTPtr;
		private static delegate* unmanaged<int, int, int, void> glTangent3iEXTPtr;
		private static delegate* unmanaged<int*, void> glTangent3ivEXTPtr;
		private static delegate* unmanaged<short, short, short, void> glTangent3sEXTPtr;
		private static delegate* unmanaged<short*, void> glTangent3svEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTangentPointerEXTPtr;
		private static delegate* unmanaged<uint, void> glTbufferMask3DFXPtr;
		private static delegate* unmanaged<float, void> glTessellationFactorAMDPtr;
		private static delegate* unmanaged<int, void> glTessellationModeAMDPtr;
		private static delegate* unmanaged<uint, bool> glTestFenceAPPLEPtr;
		private static delegate* unmanaged<uint, bool> glTestFenceNVPtr;
		private static delegate* unmanaged<int, uint, bool> glTestObjectAPPLEPtr;
		private static delegate* unmanaged<int, uint, ulong, void> glTexAttachMemoryNVPtr;
		private static delegate* unmanaged<int, int, uint, void> glTexBufferPtr;
		private static delegate* unmanaged<int, int, uint, void> glTexBufferARBPtr;
		private static delegate* unmanaged<int, int, uint, void> glTexBufferEXTPtr;
		private static delegate* unmanaged<int, int, uint, void> glTexBufferOESPtr;
		private static delegate* unmanaged<int, int, uint, uint, uint, void> glTexBufferRangePtr;
		private static delegate* unmanaged<int, int, uint, uint, uint, void> glTexBufferRangeEXTPtr;
		private static delegate* unmanaged<int, int, uint, uint, uint, void> glTexBufferRangeOESPtr;
		private static delegate* unmanaged<int, float*, void> glTexBumpParameterfvATIPtr;
		private static delegate* unmanaged<int, int*, void> glTexBumpParameterivATIPtr;
		private static delegate* unmanaged<sbyte, void> glTexCoord1bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glTexCoord1bvOESPtr;
		private static delegate* unmanaged<double, void> glTexCoord1dPtr;
		private static delegate* unmanaged<double*, void> glTexCoord1dvPtr;
		private static delegate* unmanaged<float, void> glTexCoord1fPtr;
		private static delegate* unmanaged<float*, void> glTexCoord1fvPtr;
		private static delegate* unmanaged<short, void> glTexCoord1hNVPtr;
		private static delegate* unmanaged<short*, void> glTexCoord1hvNVPtr;
		private static delegate* unmanaged<int, void> glTexCoord1iPtr;
		private static delegate* unmanaged<int*, void> glTexCoord1ivPtr;
		private static delegate* unmanaged<short, void> glTexCoord1sPtr;
		private static delegate* unmanaged<short*, void> glTexCoord1svPtr;
		private static delegate* unmanaged<IntPtr, void> glTexCoord1xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glTexCoord1xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, void> glTexCoord2bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glTexCoord2bvOESPtr;
		private static delegate* unmanaged<double, double, void> glTexCoord2dPtr;
		private static delegate* unmanaged<double*, void> glTexCoord2dvPtr;
		private static delegate* unmanaged<float, float, void> glTexCoord2fPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glTexCoord2fColor3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, float*, void> glTexCoord2fColor3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void> glTexCoord2fColor4fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, float*, float*, void> glTexCoord2fColor4fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void> glTexCoord2fColor4ubVertex3fSUNPtr;
		private static delegate* unmanaged<float*, byte*, float*, void> glTexCoord2fColor4ubVertex3fvSUNPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glTexCoord2fNormal3fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, float*, void> glTexCoord2fNormal3fVertex3fvSUNPtr;
		private static delegate* unmanaged<float, float, float, float, float, void> glTexCoord2fVertex3fSUNPtr;
		private static delegate* unmanaged<float*, float*, void> glTexCoord2fVertex3fvSUNPtr;
		private static delegate* unmanaged<float*, void> glTexCoord2fvPtr;
		private static delegate* unmanaged<short, short, void> glTexCoord2hNVPtr;
		private static delegate* unmanaged<short*, void> glTexCoord2hvNVPtr;
		private static delegate* unmanaged<int, int, void> glTexCoord2iPtr;
		private static delegate* unmanaged<int*, void> glTexCoord2ivPtr;
		private static delegate* unmanaged<short, short, void> glTexCoord2sPtr;
		private static delegate* unmanaged<short*, void> glTexCoord2svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glTexCoord2xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glTexCoord2xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glTexCoord3bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glTexCoord3bvOESPtr;
		private static delegate* unmanaged<double, double, double, void> glTexCoord3dPtr;
		private static delegate* unmanaged<double*, void> glTexCoord3dvPtr;
		private static delegate* unmanaged<float, float, float, void> glTexCoord3fPtr;
		private static delegate* unmanaged<float*, void> glTexCoord3fvPtr;
		private static delegate* unmanaged<short, short, short, void> glTexCoord3hNVPtr;
		private static delegate* unmanaged<short*, void> glTexCoord3hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glTexCoord3iPtr;
		private static delegate* unmanaged<int*, void> glTexCoord3ivPtr;
		private static delegate* unmanaged<short, short, short, void> glTexCoord3sPtr;
		private static delegate* unmanaged<short*, void> glTexCoord3svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glTexCoord3xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glTexCoord3xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> glTexCoord4bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glTexCoord4bvOESPtr;
		private static delegate* unmanaged<double, double, double, double, void> glTexCoord4dPtr;
		private static delegate* unmanaged<double*, void> glTexCoord4dvPtr;
		private static delegate* unmanaged<float, float, float, float, void> glTexCoord4fPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void> glTexCoord4fColor4fNormal3fVertex4fSUNPtr;
		private static delegate* unmanaged<float*, float*, float*, float*, void> glTexCoord4fColor4fNormal3fVertex4fvSUNPtr;
		private static delegate* unmanaged<float, float, float, float, float, float, float, float, void> glTexCoord4fVertex4fSUNPtr;
		private static delegate* unmanaged<float*, float*, void> glTexCoord4fVertex4fvSUNPtr;
		private static delegate* unmanaged<float*, void> glTexCoord4fvPtr;
		private static delegate* unmanaged<short, short, short, short, void> glTexCoord4hNVPtr;
		private static delegate* unmanaged<short*, void> glTexCoord4hvNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glTexCoord4iPtr;
		private static delegate* unmanaged<int*, void> glTexCoord4ivPtr;
		private static delegate* unmanaged<short, short, short, short, void> glTexCoord4sPtr;
		private static delegate* unmanaged<short*, void> glTexCoord4svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void> glTexCoord4xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glTexCoord4xvOESPtr;
		private static delegate* unmanaged<int, int, int, void> glTexCoordFormatNVPtr;
		private static delegate* unmanaged<int, uint, void> glTexCoordP1uiPtr;
		private static delegate* unmanaged<int, uint*, void> glTexCoordP1uivPtr;
		private static delegate* unmanaged<int, uint, void> glTexCoordP2uiPtr;
		private static delegate* unmanaged<int, uint*, void> glTexCoordP2uivPtr;
		private static delegate* unmanaged<int, uint, void> glTexCoordP3uiPtr;
		private static delegate* unmanaged<int, uint*, void> glTexCoordP3uivPtr;
		private static delegate* unmanaged<int, uint, void> glTexCoordP4uiPtr;
		private static delegate* unmanaged<int, uint*, void> glTexCoordP4uivPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glTexCoordPointerPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glTexCoordPointerEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr*, int, void> glTexCoordPointerListIBMPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexCoordPointervINTELPtr;
		private static delegate* unmanaged<int, int, float, void> glTexEnvfPtr;
		private static delegate* unmanaged<int, int, float*, void> glTexEnvfvPtr;
		private static delegate* unmanaged<int, int, int, void> glTexEnviPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexEnvivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTexEnvxPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTexEnvxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexEnvxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexEnvxvOESPtr;
		private static delegate* unmanaged<int, int, int, float*, void> glTexFilterFuncSGISPtr;
		private static delegate* unmanaged<int, int, double, void> glTexGendPtr;
		private static delegate* unmanaged<int, int, double*, void> glTexGendvPtr;
		private static delegate* unmanaged<int, int, float, void> glTexGenfPtr;
		private static delegate* unmanaged<int, int, float, void> glTexGenfOESPtr;
		private static delegate* unmanaged<int, int, float*, void> glTexGenfvPtr;
		private static delegate* unmanaged<int, int, float*, void> glTexGenfvOESPtr;
		private static delegate* unmanaged<int, int, int, void> glTexGeniPtr;
		private static delegate* unmanaged<int, int, int, void> glTexGeniOESPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexGenivPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexGenivOESPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTexGenxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexGenxvOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void> glTexImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glTexImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, bool, void> glTexImage2DMultisamplePtr;
		private static delegate* unmanaged<int, int, int, int, int, int, bool, void> glTexImage2DMultisampleCoverageNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glTexImage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glTexImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, bool, void> glTexImage3DMultisamplePtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, bool, void> glTexImage3DMultisampleCoverageNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void> glTexImage3DOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTexImage4DSGISPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, bool, void> glTexPageCommitmentARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, bool, void> glTexPageCommitmentEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexParameterIivPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexParameterIivEXTPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexParameterIivOESPtr;
		private static delegate* unmanaged<int, int, uint*, void> glTexParameterIuivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glTexParameterIuivEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glTexParameterIuivOESPtr;
		private static delegate* unmanaged<int, int, float, void> glTexParameterfPtr;
		private static delegate* unmanaged<int, int, float*, void> glTexParameterfvPtr;
		private static delegate* unmanaged<int, int, int, void> glTexParameteriPtr;
		private static delegate* unmanaged<int, int, int*, void> glTexParameterivPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTexParameterxPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTexParameterxOESPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexParameterxvPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glTexParameterxvOESPtr;
		private static delegate* unmanaged<int, uint, void> glTexRenderbufferNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glTexStorage1DPtr;
		private static delegate* unmanaged<int, int, int, int, void> glTexStorage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glTexStorage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glTexStorage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, bool, void> glTexStorage2DMultisamplePtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glTexStorage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, void> glTexStorage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, bool, void> glTexStorage3DMultisamplePtr;
		private static delegate* unmanaged<int, int, int, int, int, int, bool, void> glTexStorage3DMultisampleOESPtr;
		private static delegate* unmanaged<int, int, int, int, uint, ulong, void> glTexStorageMem1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, uint, ulong, void> glTexStorageMem2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, bool, uint, ulong, void> glTexStorageMem2DMultisampleEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, uint, ulong, void> glTexStorageMem3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, bool, uint, ulong, void> glTexStorageMem3DMultisampleEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, uint, void> glTexStorageSparseAMDPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glTexSubImage1DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, IntPtr, void> glTexSubImage1DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage2DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage2DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage3DPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage3DEXTPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage3DOESPtr;
		private static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTexSubImage4DSGISPtr;
		private static delegate* unmanaged<uint, uint, ulong, void> glTextureAttachMemoryNVPtr;
		private static delegate* unmanaged<void> glTextureBarrierPtr;
		private static delegate* unmanaged<void> glTextureBarrierNVPtr;
		private static delegate* unmanaged<uint, int, uint, void> glTextureBufferPtr;
		private static delegate* unmanaged<uint, int, int, uint, void> glTextureBufferEXTPtr;
		private static delegate* unmanaged<uint, int, uint, uint, uint, void> glTextureBufferRangePtr;
		private static delegate* unmanaged<uint, int, int, uint, uint, uint, void> glTextureBufferRangeEXTPtr;
		private static delegate* unmanaged<bool, bool, bool, bool, void> glTextureColorMaskSGISPtr;
		private static delegate* unmanaged<uint, uint, uint, float, float, float, float, float, void> glTextureFoveationParametersQCOMPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void> glTextureImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void> glTextureImage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, bool, void> glTextureImage2DMultisampleCoverageNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, bool, void> glTextureImage2DMultisampleNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void> glTextureImage3DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void> glTextureImage3DMultisampleCoverageNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, bool, void> glTextureImage3DMultisampleNVPtr;
		private static delegate* unmanaged<int, void> glTextureLightEXTPtr;
		private static delegate* unmanaged<int, int, void> glTextureMaterialEXTPtr;
		private static delegate* unmanaged<int, void> glTextureNormalEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void> glTexturePageCommitmentEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glTextureParameterIivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glTextureParameterIivEXTPtr;
		private static delegate* unmanaged<uint, int, uint*, void> glTextureParameterIuivPtr;
		private static delegate* unmanaged<uint, int, int, uint*, void> glTextureParameterIuivEXTPtr;
		private static delegate* unmanaged<uint, int, float, void> glTextureParameterfPtr;
		private static delegate* unmanaged<uint, int, int, float, void> glTextureParameterfEXTPtr;
		private static delegate* unmanaged<uint, int, float*, void> glTextureParameterfvPtr;
		private static delegate* unmanaged<uint, int, int, float*, void> glTextureParameterfvEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glTextureParameteriPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glTextureParameteriEXTPtr;
		private static delegate* unmanaged<uint, int, int*, void> glTextureParameterivPtr;
		private static delegate* unmanaged<uint, int, int, int*, void> glTextureParameterivEXTPtr;
		private static delegate* unmanaged<int, int, IntPtr, void> glTextureRangeAPPLEPtr;
		private static delegate* unmanaged<uint, int, uint, void> glTextureRenderbufferEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glTextureStorage1DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glTextureStorage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glTextureStorage2DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glTextureStorage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, bool, void> glTextureStorage2DMultisamplePtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, bool, void> glTextureStorage2DMultisampleEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, void> glTextureStorage3DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, void> glTextureStorage3DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, bool, void> glTextureStorage3DMultisamplePtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, bool, void> glTextureStorage3DMultisampleEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, uint, ulong, void> glTextureStorageMem1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, uint, ulong, void> glTextureStorageMem2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, bool, uint, ulong, void> glTextureStorageMem2DMultisampleEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, uint, ulong, void> glTextureStorageMem3DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, bool, uint, ulong, void> glTextureStorageMem3DMultisampleEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, uint, void> glTextureStorageSparseAMDPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, IntPtr, void> glTextureSubImage1DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void> glTextureSubImage1DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void> glTextureSubImage2DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void> glTextureSubImage2DEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void> glTextureSubImage3DPtr;
		private static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void> glTextureSubImage3DEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void> glTextureViewPtr;
		private static delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void> glTextureViewEXTPtr;
		private static delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void> glTextureViewOESPtr;
		private static delegate* unmanaged<int, uint, int, int, void> glTrackMatrixNVPtr;
		private static delegate* unmanaged<int, int*, int, void> glTransformFeedbackAttribsNVPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glTransformFeedbackBufferBasePtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glTransformFeedbackBufferRangePtr;
		private static delegate* unmanaged<int, int*, int, int*, int, void> glTransformFeedbackStreamAttribsNVPtr;
		private static delegate* unmanaged<uint, int, byte**, int, void> glTransformFeedbackVaryingsPtr;
		private static delegate* unmanaged<uint, int, byte**, int, void> glTransformFeedbackVaryingsEXTPtr;
		private static delegate* unmanaged<uint, int, int*, int, void> glTransformFeedbackVaryingsNVPtr;
		private static delegate* unmanaged<uint, uint, int, float*, void> glTransformPathNVPtr;
		private static delegate* unmanaged<double, double, double, void> glTranslatedPtr;
		private static delegate* unmanaged<float, float, float, void> glTranslatefPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glTranslatexPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glTranslatexOESPtr;
		private static delegate* unmanaged<int, double, void> glUniform1dPtr;
		private static delegate* unmanaged<int, int, double*, void> glUniform1dvPtr;
		private static delegate* unmanaged<int, float, void> glUniform1fPtr;
		private static delegate* unmanaged<int, float, void> glUniform1fARBPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform1fvPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform1fvARBPtr;
		private static delegate* unmanaged<int, int, void> glUniform1iPtr;
		private static delegate* unmanaged<int, long, void> glUniform1i64ARBPtr;
		private static delegate* unmanaged<int, long, void> glUniform1i64NVPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform1i64vARBPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform1i64vNVPtr;
		private static delegate* unmanaged<int, int, void> glUniform1iARBPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform1ivPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform1ivARBPtr;
		private static delegate* unmanaged<int, uint, void> glUniform1uiPtr;
		private static delegate* unmanaged<int, ulong, void> glUniform1ui64ARBPtr;
		private static delegate* unmanaged<int, ulong, void> glUniform1ui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform1ui64vARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform1ui64vNVPtr;
		private static delegate* unmanaged<int, uint, void> glUniform1uiEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform1uivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform1uivEXTPtr;
		private static delegate* unmanaged<int, double, double, void> glUniform2dPtr;
		private static delegate* unmanaged<int, int, double*, void> glUniform2dvPtr;
		private static delegate* unmanaged<int, float, float, void> glUniform2fPtr;
		private static delegate* unmanaged<int, float, float, void> glUniform2fARBPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform2fvPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform2fvARBPtr;
		private static delegate* unmanaged<int, int, int, void> glUniform2iPtr;
		private static delegate* unmanaged<int, long, long, void> glUniform2i64ARBPtr;
		private static delegate* unmanaged<int, long, long, void> glUniform2i64NVPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform2i64vARBPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform2i64vNVPtr;
		private static delegate* unmanaged<int, int, int, void> glUniform2iARBPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform2ivPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform2ivARBPtr;
		private static delegate* unmanaged<int, uint, uint, void> glUniform2uiPtr;
		private static delegate* unmanaged<int, ulong, ulong, void> glUniform2ui64ARBPtr;
		private static delegate* unmanaged<int, ulong, ulong, void> glUniform2ui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform2ui64vARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform2ui64vNVPtr;
		private static delegate* unmanaged<int, uint, uint, void> glUniform2uiEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform2uivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform2uivEXTPtr;
		private static delegate* unmanaged<int, double, double, double, void> glUniform3dPtr;
		private static delegate* unmanaged<int, int, double*, void> glUniform3dvPtr;
		private static delegate* unmanaged<int, float, float, float, void> glUniform3fPtr;
		private static delegate* unmanaged<int, float, float, float, void> glUniform3fARBPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform3fvPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform3fvARBPtr;
		private static delegate* unmanaged<int, int, int, int, void> glUniform3iPtr;
		private static delegate* unmanaged<int, long, long, long, void> glUniform3i64ARBPtr;
		private static delegate* unmanaged<int, long, long, long, void> glUniform3i64NVPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform3i64vARBPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform3i64vNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glUniform3iARBPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform3ivPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform3ivARBPtr;
		private static delegate* unmanaged<int, uint, uint, uint, void> glUniform3uiPtr;
		private static delegate* unmanaged<int, ulong, ulong, ulong, void> glUniform3ui64ARBPtr;
		private static delegate* unmanaged<int, ulong, ulong, ulong, void> glUniform3ui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform3ui64vARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform3ui64vNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, void> glUniform3uiEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform3uivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform3uivEXTPtr;
		private static delegate* unmanaged<int, double, double, double, double, void> glUniform4dPtr;
		private static delegate* unmanaged<int, int, double*, void> glUniform4dvPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glUniform4fPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glUniform4fARBPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform4fvPtr;
		private static delegate* unmanaged<int, int, float*, void> glUniform4fvARBPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glUniform4iPtr;
		private static delegate* unmanaged<int, long, long, long, long, void> glUniform4i64ARBPtr;
		private static delegate* unmanaged<int, long, long, long, long, void> glUniform4i64NVPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform4i64vARBPtr;
		private static delegate* unmanaged<int, int, long*, void> glUniform4i64vNVPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glUniform4iARBPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform4ivPtr;
		private static delegate* unmanaged<int, int, int*, void> glUniform4ivARBPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glUniform4uiPtr;
		private static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> glUniform4ui64ARBPtr;
		private static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> glUniform4ui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform4ui64vARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniform4ui64vNVPtr;
		private static delegate* unmanaged<int, uint, uint, uint, uint, void> glUniform4uiEXTPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform4uivPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniform4uivEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glUniformBlockBindingPtr;
		private static delegate* unmanaged<uint, int, uint, void> glUniformBufferEXTPtr;
		private static delegate* unmanaged<int, ulong, void> glUniformHandleui64ARBPtr;
		private static delegate* unmanaged<int, ulong, void> glUniformHandleui64IMGPtr;
		private static delegate* unmanaged<int, ulong, void> glUniformHandleui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniformHandleui64vARBPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniformHandleui64vIMGPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniformHandleui64vNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix2dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2fvARBPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix2x3dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2x3fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2x3fvNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix2x4dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2x4fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2x4fvNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix3dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3fvARBPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix3x2dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3x2fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3x2fvNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix3x4dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3x4fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3x4fvNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix4dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4fvARBPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix4x2dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4x2fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4x2fvNVPtr;
		private static delegate* unmanaged<int, int, bool, double*, void> glUniformMatrix4x3dvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4x3fvPtr;
		private static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4x3fvNVPtr;
		private static delegate* unmanaged<int, int, uint*, void> glUniformSubroutinesuivPtr;
		private static delegate* unmanaged<int, ulong, void> glUniformui64NVPtr;
		private static delegate* unmanaged<int, int, ulong*, void> glUniformui64vNVPtr;
		private static delegate* unmanaged<void> glUnlockArraysEXTPtr;
		private static delegate* unmanaged<int, bool> glUnmapBufferPtr;
		private static delegate* unmanaged<int, bool> glUnmapBufferARBPtr;
		private static delegate* unmanaged<int, bool> glUnmapBufferOESPtr;
		private static delegate* unmanaged<uint, bool> glUnmapNamedBufferPtr;
		private static delegate* unmanaged<uint, bool> glUnmapNamedBufferEXTPtr;
		private static delegate* unmanaged<uint, void> glUnmapObjectBufferATIPtr;
		private static delegate* unmanaged<uint, int, void> glUnmapTexture2DINTELPtr;
		private static delegate* unmanaged<uint, uint, int, IntPtr, int, void> glUpdateObjectBufferATIPtr;
		private static delegate* unmanaged<uint, void> glUseProgramPtr;
		private static delegate* unmanaged<uint, void> glUseProgramObjectARBPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glUseProgramStagesPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glUseProgramStagesEXTPtr;
		private static delegate* unmanaged<int, uint, void> glUseShaderProgramEXTPtr;
		private static delegate* unmanaged<void> glVDPAUFiniNVPtr;
		private static delegate* unmanaged<IntPtr, int, int, int*, int*, void> glVDPAUGetSurfaceivNVPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glVDPAUInitNVPtr;
		private static delegate* unmanaged<IntPtr, bool> glVDPAUIsSurfaceNVPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glVDPAUMapSurfacesNVPtr;
		private static delegate* unmanaged<IntPtr, int, int, uint*, IntPtr> glVDPAURegisterOutputSurfaceNVPtr;
		private static delegate* unmanaged<IntPtr, int, int, uint*, IntPtr> glVDPAURegisterVideoSurfaceNVPtr;
		private static delegate* unmanaged<IntPtr, int, int, uint*, bool, IntPtr> glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr;
		private static delegate* unmanaged<IntPtr, int, void> glVDPAUSurfaceAccessNVPtr;
		private static delegate* unmanaged<int, IntPtr*, void> glVDPAUUnmapSurfacesNVPtr;
		private static delegate* unmanaged<IntPtr, void> glVDPAUUnregisterSurfaceNVPtr;
		private static delegate* unmanaged<uint, void> glValidateProgramPtr;
		private static delegate* unmanaged<uint, void> glValidateProgramARBPtr;
		private static delegate* unmanaged<uint, void> glValidateProgramPipelinePtr;
		private static delegate* unmanaged<uint, void> glValidateProgramPipelineEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint, uint, void> glVariantArrayObjectATIPtr;
		private static delegate* unmanaged<uint, int, uint, IntPtr, void> glVariantPointerEXTPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVariantbvEXTPtr;
		private static delegate* unmanaged<uint, double*, void> glVariantdvEXTPtr;
		private static delegate* unmanaged<uint, float*, void> glVariantfvEXTPtr;
		private static delegate* unmanaged<uint, int*, void> glVariantivEXTPtr;
		private static delegate* unmanaged<uint, short*, void> glVariantsvEXTPtr;
		private static delegate* unmanaged<uint, byte*, void> glVariantubvEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glVariantuivEXTPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVariantusvEXTPtr;
		private static delegate* unmanaged<sbyte, sbyte, void> glVertex2bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glVertex2bvOESPtr;
		private static delegate* unmanaged<double, double, void> glVertex2dPtr;
		private static delegate* unmanaged<double*, void> glVertex2dvPtr;
		private static delegate* unmanaged<float, float, void> glVertex2fPtr;
		private static delegate* unmanaged<float*, void> glVertex2fvPtr;
		private static delegate* unmanaged<short, short, void> glVertex2hNVPtr;
		private static delegate* unmanaged<short*, void> glVertex2hvNVPtr;
		private static delegate* unmanaged<int, int, void> glVertex2iPtr;
		private static delegate* unmanaged<int*, void> glVertex2ivPtr;
		private static delegate* unmanaged<short, short, void> glVertex2sPtr;
		private static delegate* unmanaged<short*, void> glVertex2svPtr;
		private static delegate* unmanaged<IntPtr, void> glVertex2xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glVertex2xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, void> glVertex3bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glVertex3bvOESPtr;
		private static delegate* unmanaged<double, double, double, void> glVertex3dPtr;
		private static delegate* unmanaged<double*, void> glVertex3dvPtr;
		private static delegate* unmanaged<float, float, float, void> glVertex3fPtr;
		private static delegate* unmanaged<float*, void> glVertex3fvPtr;
		private static delegate* unmanaged<short, short, short, void> glVertex3hNVPtr;
		private static delegate* unmanaged<short*, void> glVertex3hvNVPtr;
		private static delegate* unmanaged<int, int, int, void> glVertex3iPtr;
		private static delegate* unmanaged<int*, void> glVertex3ivPtr;
		private static delegate* unmanaged<short, short, short, void> glVertex3sPtr;
		private static delegate* unmanaged<short*, void> glVertex3svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, void> glVertex3xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glVertex3xvOESPtr;
		private static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> glVertex4bOESPtr;
		private static delegate* unmanaged<sbyte*, void> glVertex4bvOESPtr;
		private static delegate* unmanaged<double, double, double, double, void> glVertex4dPtr;
		private static delegate* unmanaged<double*, void> glVertex4dvPtr;
		private static delegate* unmanaged<float, float, float, float, void> glVertex4fPtr;
		private static delegate* unmanaged<float*, void> glVertex4fvPtr;
		private static delegate* unmanaged<short, short, short, short, void> glVertex4hNVPtr;
		private static delegate* unmanaged<short*, void> glVertex4hvNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glVertex4iPtr;
		private static delegate* unmanaged<int*, void> glVertex4ivPtr;
		private static delegate* unmanaged<short, short, short, short, void> glVertex4sPtr;
		private static delegate* unmanaged<short*, void> glVertex4svPtr;
		private static delegate* unmanaged<IntPtr, IntPtr, IntPtr, void> glVertex4xOESPtr;
		private static delegate* unmanaged<IntPtr*, void> glVertex4xvOESPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexArrayAttribBindingPtr;
		private static delegate* unmanaged<uint, uint, int, int, bool, uint, void> glVertexArrayAttribFormatPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayAttribIFormatPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayAttribLFormatPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, int, void> glVertexArrayBindVertexBufferEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexArrayBindingDivisorPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, uint, void> glVertexArrayColorOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, uint, void> glVertexArrayEdgeFlagOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexArrayElementBufferPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayFogCoordOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayIndexOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, int, uint, void> glVertexArrayMultiTexCoordOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayNormalOffsetEXTPtr;
		private static delegate* unmanaged<int, int, void> glVertexArrayParameteriAPPLEPtr;
		private static delegate* unmanaged<int, IntPtr, void> glVertexArrayRangeAPPLEPtr;
		private static delegate* unmanaged<int, IntPtr, void> glVertexArrayRangeNVPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, uint, void> glVertexArraySecondaryColorOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, uint, void> glVertexArrayTexCoordOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexArrayVertexAttribBindingEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexArrayVertexAttribDivisorEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, bool, uint, void> glVertexArrayVertexAttribFormatEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayVertexAttribIFormatEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, int, int, int, uint, void> glVertexArrayVertexAttribIOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, uint, void> glVertexArrayVertexAttribLFormatEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, int, int, int, uint, void> glVertexArrayVertexAttribLOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, int, int, bool, int, uint, void> glVertexArrayVertexAttribOffsetEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexArrayVertexBindingDivisorEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, int, void> glVertexArrayVertexBufferPtr;
		private static delegate* unmanaged<uint, uint, int, uint*, uint*, int*, void> glVertexArrayVertexBuffersPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, uint, void> glVertexArrayVertexOffsetEXTPtr;
		private static delegate* unmanaged<uint, double, void> glVertexAttrib1dPtr;
		private static delegate* unmanaged<uint, double, void> glVertexAttrib1dARBPtr;
		private static delegate* unmanaged<uint, double, void> glVertexAttrib1dNVPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib1dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib1dvARBPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib1dvNVPtr;
		private static delegate* unmanaged<uint, float, void> glVertexAttrib1fPtr;
		private static delegate* unmanaged<uint, float, void> glVertexAttrib1fARBPtr;
		private static delegate* unmanaged<uint, float, void> glVertexAttrib1fNVPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib1fvPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib1fvARBPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib1fvNVPtr;
		private static delegate* unmanaged<uint, short, void> glVertexAttrib1hNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib1hvNVPtr;
		private static delegate* unmanaged<uint, short, void> glVertexAttrib1sPtr;
		private static delegate* unmanaged<uint, short, void> glVertexAttrib1sARBPtr;
		private static delegate* unmanaged<uint, short, void> glVertexAttrib1sNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib1svPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib1svARBPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib1svNVPtr;
		private static delegate* unmanaged<uint, double, double, void> glVertexAttrib2dPtr;
		private static delegate* unmanaged<uint, double, double, void> glVertexAttrib2dARBPtr;
		private static delegate* unmanaged<uint, double, double, void> glVertexAttrib2dNVPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib2dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib2dvARBPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib2dvNVPtr;
		private static delegate* unmanaged<uint, float, float, void> glVertexAttrib2fPtr;
		private static delegate* unmanaged<uint, float, float, void> glVertexAttrib2fARBPtr;
		private static delegate* unmanaged<uint, float, float, void> glVertexAttrib2fNVPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib2fvPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib2fvARBPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib2fvNVPtr;
		private static delegate* unmanaged<uint, short, short, void> glVertexAttrib2hNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib2hvNVPtr;
		private static delegate* unmanaged<uint, short, short, void> glVertexAttrib2sPtr;
		private static delegate* unmanaged<uint, short, short, void> glVertexAttrib2sARBPtr;
		private static delegate* unmanaged<uint, short, short, void> glVertexAttrib2sNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib2svPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib2svARBPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib2svNVPtr;
		private static delegate* unmanaged<uint, double, double, double, void> glVertexAttrib3dPtr;
		private static delegate* unmanaged<uint, double, double, double, void> glVertexAttrib3dARBPtr;
		private static delegate* unmanaged<uint, double, double, double, void> glVertexAttrib3dNVPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib3dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib3dvARBPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib3dvNVPtr;
		private static delegate* unmanaged<uint, float, float, float, void> glVertexAttrib3fPtr;
		private static delegate* unmanaged<uint, float, float, float, void> glVertexAttrib3fARBPtr;
		private static delegate* unmanaged<uint, float, float, float, void> glVertexAttrib3fNVPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib3fvPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib3fvARBPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib3fvNVPtr;
		private static delegate* unmanaged<uint, short, short, short, void> glVertexAttrib3hNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib3hvNVPtr;
		private static delegate* unmanaged<uint, short, short, short, void> glVertexAttrib3sPtr;
		private static delegate* unmanaged<uint, short, short, short, void> glVertexAttrib3sARBPtr;
		private static delegate* unmanaged<uint, short, short, short, void> glVertexAttrib3sNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib3svPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib3svARBPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib3svNVPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttrib4NbvPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttrib4NbvARBPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttrib4NivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttrib4NivARBPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4NsvPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4NsvARBPtr;
		private static delegate* unmanaged<uint, byte, byte, byte, byte, void> glVertexAttrib4NubPtr;
		private static delegate* unmanaged<uint, byte, byte, byte, byte, void> glVertexAttrib4NubARBPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttrib4NubvPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttrib4NubvARBPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttrib4NuivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttrib4NuivARBPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttrib4NusvPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttrib4NusvARBPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttrib4bvPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttrib4bvARBPtr;
		private static delegate* unmanaged<uint, double, double, double, double, void> glVertexAttrib4dPtr;
		private static delegate* unmanaged<uint, double, double, double, double, void> glVertexAttrib4dARBPtr;
		private static delegate* unmanaged<uint, double, double, double, double, void> glVertexAttrib4dNVPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib4dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib4dvARBPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttrib4dvNVPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glVertexAttrib4fPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glVertexAttrib4fARBPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glVertexAttrib4fNVPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib4fvPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib4fvARBPtr;
		private static delegate* unmanaged<uint, float*, void> glVertexAttrib4fvNVPtr;
		private static delegate* unmanaged<uint, short, short, short, short, void> glVertexAttrib4hNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4hvNVPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttrib4ivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttrib4ivARBPtr;
		private static delegate* unmanaged<uint, short, short, short, short, void> glVertexAttrib4sPtr;
		private static delegate* unmanaged<uint, short, short, short, short, void> glVertexAttrib4sARBPtr;
		private static delegate* unmanaged<uint, short, short, short, short, void> glVertexAttrib4sNVPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4svPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4svARBPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttrib4svNVPtr;
		private static delegate* unmanaged<uint, byte, byte, byte, byte, void> glVertexAttrib4ubNVPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttrib4ubvPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttrib4ubvARBPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttrib4ubvNVPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttrib4uivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttrib4uivARBPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttrib4usvPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttrib4usvARBPtr;
		private static delegate* unmanaged<uint, int, int, bool, int, uint, uint, void> glVertexAttribArrayObjectATIPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribBindingPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribDivisorPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribDivisorANGLEPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribDivisorARBPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribDivisorEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribDivisorNVPtr;
		private static delegate* unmanaged<uint, int, int, bool, uint, void> glVertexAttribFormatPtr;
		private static delegate* unmanaged<uint, int, int, bool, int, void> glVertexAttribFormatNVPtr;
		private static delegate* unmanaged<uint, int, void> glVertexAttribI1iPtr;
		private static delegate* unmanaged<uint, int, void> glVertexAttribI1iEXTPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI1ivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI1ivEXTPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribI1uiPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexAttribI1uiEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI1uivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI1uivEXTPtr;
		private static delegate* unmanaged<uint, int, int, void> glVertexAttribI2iPtr;
		private static delegate* unmanaged<uint, int, int, void> glVertexAttribI2iEXTPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI2ivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI2ivEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexAttribI2uiPtr;
		private static delegate* unmanaged<uint, uint, uint, void> glVertexAttribI2uiEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI2uivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI2uivEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glVertexAttribI3iPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glVertexAttribI3iEXTPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI3ivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI3ivEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, void> glVertexAttribI3uiPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, void> glVertexAttribI3uiEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI3uivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI3uivEXTPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttribI4bvPtr;
		private static delegate* unmanaged<uint, sbyte*, void> glVertexAttribI4bvEXTPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glVertexAttribI4iPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glVertexAttribI4iEXTPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI4ivPtr;
		private static delegate* unmanaged<uint, int*, void> glVertexAttribI4ivEXTPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttribI4svPtr;
		private static delegate* unmanaged<uint, short*, void> glVertexAttribI4svEXTPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttribI4ubvPtr;
		private static delegate* unmanaged<uint, byte*, void> glVertexAttribI4ubvEXTPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glVertexAttribI4uiPtr;
		private static delegate* unmanaged<uint, uint, uint, uint, uint, void> glVertexAttribI4uiEXTPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI4uivPtr;
		private static delegate* unmanaged<uint, uint*, void> glVertexAttribI4uivEXTPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttribI4usvPtr;
		private static delegate* unmanaged<uint, ushort*, void> glVertexAttribI4usvEXTPtr;
		private static delegate* unmanaged<uint, int, int, uint, void> glVertexAttribIFormatPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glVertexAttribIFormatNVPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glVertexAttribIPointerPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glVertexAttribIPointerEXTPtr;
		private static delegate* unmanaged<uint, double, void> glVertexAttribL1dPtr;
		private static delegate* unmanaged<uint, double, void> glVertexAttribL1dEXTPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL1dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL1dvEXTPtr;
		private static delegate* unmanaged<uint, long, void> glVertexAttribL1i64NVPtr;
		private static delegate* unmanaged<uint, long*, void> glVertexAttribL1i64vNVPtr;
		private static delegate* unmanaged<uint, ulong, void> glVertexAttribL1ui64ARBPtr;
		private static delegate* unmanaged<uint, ulong, void> glVertexAttribL1ui64NVPtr;
		private static delegate* unmanaged<uint, ulong*, void> glVertexAttribL1ui64vARBPtr;
		private static delegate* unmanaged<uint, ulong*, void> glVertexAttribL1ui64vNVPtr;
		private static delegate* unmanaged<uint, double, double, void> glVertexAttribL2dPtr;
		private static delegate* unmanaged<uint, double, double, void> glVertexAttribL2dEXTPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL2dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL2dvEXTPtr;
		private static delegate* unmanaged<uint, long, long, void> glVertexAttribL2i64NVPtr;
		private static delegate* unmanaged<uint, long*, void> glVertexAttribL2i64vNVPtr;
		private static delegate* unmanaged<uint, ulong, ulong, void> glVertexAttribL2ui64NVPtr;
		private static delegate* unmanaged<uint, ulong*, void> glVertexAttribL2ui64vNVPtr;
		private static delegate* unmanaged<uint, double, double, double, void> glVertexAttribL3dPtr;
		private static delegate* unmanaged<uint, double, double, double, void> glVertexAttribL3dEXTPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL3dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL3dvEXTPtr;
		private static delegate* unmanaged<uint, long, long, long, void> glVertexAttribL3i64NVPtr;
		private static delegate* unmanaged<uint, long*, void> glVertexAttribL3i64vNVPtr;
		private static delegate* unmanaged<uint, ulong, ulong, ulong, void> glVertexAttribL3ui64NVPtr;
		private static delegate* unmanaged<uint, ulong*, void> glVertexAttribL3ui64vNVPtr;
		private static delegate* unmanaged<uint, double, double, double, double, void> glVertexAttribL4dPtr;
		private static delegate* unmanaged<uint, double, double, double, double, void> glVertexAttribL4dEXTPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL4dvPtr;
		private static delegate* unmanaged<uint, double*, void> glVertexAttribL4dvEXTPtr;
		private static delegate* unmanaged<uint, long, long, long, long, void> glVertexAttribL4i64NVPtr;
		private static delegate* unmanaged<uint, long*, void> glVertexAttribL4i64vNVPtr;
		private static delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void> glVertexAttribL4ui64NVPtr;
		private static delegate* unmanaged<uint, ulong*, void> glVertexAttribL4ui64vNVPtr;
		private static delegate* unmanaged<uint, int, int, uint, void> glVertexAttribLFormatPtr;
		private static delegate* unmanaged<uint, int, int, int, void> glVertexAttribLFormatNVPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glVertexAttribLPointerPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glVertexAttribLPointerEXTPtr;
		private static delegate* unmanaged<uint, int, bool, uint, void> glVertexAttribP1uiPtr;
		private static delegate* unmanaged<uint, int, bool, uint*, void> glVertexAttribP1uivPtr;
		private static delegate* unmanaged<uint, int, bool, uint, void> glVertexAttribP2uiPtr;
		private static delegate* unmanaged<uint, int, bool, uint*, void> glVertexAttribP2uivPtr;
		private static delegate* unmanaged<uint, int, bool, uint, void> glVertexAttribP3uiPtr;
		private static delegate* unmanaged<uint, int, bool, uint*, void> glVertexAttribP3uivPtr;
		private static delegate* unmanaged<uint, int, bool, uint, void> glVertexAttribP4uiPtr;
		private static delegate* unmanaged<uint, int, bool, uint*, void> glVertexAttribP4uivPtr;
		private static delegate* unmanaged<uint, int, int, void> glVertexAttribParameteriAMDPtr;
		private static delegate* unmanaged<uint, int, int, bool, int, void*, void> glVertexAttribPointerPtr;
		private static delegate* unmanaged<uint, int, int, bool, int, void*, void> glVertexAttribPointerARBPtr;
		private static delegate* unmanaged<uint, int, int, int, IntPtr, void> glVertexAttribPointerNVPtr;
		private static delegate* unmanaged<uint, int, double*, void> glVertexAttribs1dvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glVertexAttribs1fvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs1hvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs1svNVPtr;
		private static delegate* unmanaged<uint, int, double*, void> glVertexAttribs2dvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glVertexAttribs2fvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs2hvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs2svNVPtr;
		private static delegate* unmanaged<uint, int, double*, void> glVertexAttribs3dvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glVertexAttribs3fvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs3hvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs3svNVPtr;
		private static delegate* unmanaged<uint, int, double*, void> glVertexAttribs4dvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glVertexAttribs4fvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs4hvNVPtr;
		private static delegate* unmanaged<uint, int, short*, void> glVertexAttribs4svNVPtr;
		private static delegate* unmanaged<uint, int, byte*, void> glVertexAttribs4ubvNVPtr;
		private static delegate* unmanaged<uint, uint, void> glVertexBindingDivisorPtr;
		private static delegate* unmanaged<int, void> glVertexBlendARBPtr;
		private static delegate* unmanaged<int, float, void> glVertexBlendEnvfATIPtr;
		private static delegate* unmanaged<int, int, void> glVertexBlendEnviATIPtr;
		private static delegate* unmanaged<int, int, int, void> glVertexFormatNVPtr;
		private static delegate* unmanaged<int, uint, void> glVertexP2uiPtr;
		private static delegate* unmanaged<int, uint*, void> glVertexP2uivPtr;
		private static delegate* unmanaged<int, uint, void> glVertexP3uiPtr;
		private static delegate* unmanaged<int, uint*, void> glVertexP3uivPtr;
		private static delegate* unmanaged<int, uint, void> glVertexP4uiPtr;
		private static delegate* unmanaged<int, uint*, void> glVertexP4uivPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glVertexPointerPtr;
		private static delegate* unmanaged<int, int, int, int, IntPtr, void> glVertexPointerEXTPtr;
		private static delegate* unmanaged<int, int, int, IntPtr*, int, void> glVertexPointerListIBMPtr;
		private static delegate* unmanaged<int, int, IntPtr*, void> glVertexPointervINTELPtr;
		private static delegate* unmanaged<int, double, void> glVertexStream1dATIPtr;
		private static delegate* unmanaged<int, double*, void> glVertexStream1dvATIPtr;
		private static delegate* unmanaged<int, float, void> glVertexStream1fATIPtr;
		private static delegate* unmanaged<int, float*, void> glVertexStream1fvATIPtr;
		private static delegate* unmanaged<int, int, void> glVertexStream1iATIPtr;
		private static delegate* unmanaged<int, int*, void> glVertexStream1ivATIPtr;
		private static delegate* unmanaged<int, short, void> glVertexStream1sATIPtr;
		private static delegate* unmanaged<int, short*, void> glVertexStream1svATIPtr;
		private static delegate* unmanaged<int, double, double, void> glVertexStream2dATIPtr;
		private static delegate* unmanaged<int, double*, void> glVertexStream2dvATIPtr;
		private static delegate* unmanaged<int, float, float, void> glVertexStream2fATIPtr;
		private static delegate* unmanaged<int, float*, void> glVertexStream2fvATIPtr;
		private static delegate* unmanaged<int, int, int, void> glVertexStream2iATIPtr;
		private static delegate* unmanaged<int, int*, void> glVertexStream2ivATIPtr;
		private static delegate* unmanaged<int, short, short, void> glVertexStream2sATIPtr;
		private static delegate* unmanaged<int, short*, void> glVertexStream2svATIPtr;
		private static delegate* unmanaged<int, double, double, double, void> glVertexStream3dATIPtr;
		private static delegate* unmanaged<int, double*, void> glVertexStream3dvATIPtr;
		private static delegate* unmanaged<int, float, float, float, void> glVertexStream3fATIPtr;
		private static delegate* unmanaged<int, float*, void> glVertexStream3fvATIPtr;
		private static delegate* unmanaged<int, int, int, int, void> glVertexStream3iATIPtr;
		private static delegate* unmanaged<int, int*, void> glVertexStream3ivATIPtr;
		private static delegate* unmanaged<int, short, short, short, void> glVertexStream3sATIPtr;
		private static delegate* unmanaged<int, short*, void> glVertexStream3svATIPtr;
		private static delegate* unmanaged<int, double, double, double, double, void> glVertexStream4dATIPtr;
		private static delegate* unmanaged<int, double*, void> glVertexStream4dvATIPtr;
		private static delegate* unmanaged<int, float, float, float, float, void> glVertexStream4fATIPtr;
		private static delegate* unmanaged<int, float*, void> glVertexStream4fvATIPtr;
		private static delegate* unmanaged<int, int, int, int, int, void> glVertexStream4iATIPtr;
		private static delegate* unmanaged<int, int*, void> glVertexStream4ivATIPtr;
		private static delegate* unmanaged<int, short, short, short, short, void> glVertexStream4sATIPtr;
		private static delegate* unmanaged<int, short*, void> glVertexStream4svATIPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glVertexWeightPointerEXTPtr;
		private static delegate* unmanaged<float, void> glVertexWeightfEXTPtr;
		private static delegate* unmanaged<float*, void> glVertexWeightfvEXTPtr;
		private static delegate* unmanaged<short, void> glVertexWeighthNVPtr;
		private static delegate* unmanaged<short*, void> glVertexWeighthvNVPtr;
		private static delegate* unmanaged<uint, uint*, ulong*, int> glVideoCaptureNVPtr;
		private static delegate* unmanaged<uint, uint, int, double*, void> glVideoCaptureStreamParameterdvNVPtr;
		private static delegate* unmanaged<uint, uint, int, float*, void> glVideoCaptureStreamParameterfvNVPtr;
		private static delegate* unmanaged<uint, uint, int, int*, void> glVideoCaptureStreamParameterivNVPtr;
		private static delegate* unmanaged<int, int, int, int, void> glViewportPtr;
		private static delegate* unmanaged<uint, int, float*, void> glViewportArrayvPtr;
		private static delegate* unmanaged<uint, int, float*, void> glViewportArrayvNVPtr;
		private static delegate* unmanaged<uint, int, float*, void> glViewportArrayvOESPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glViewportIndexedfPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glViewportIndexedfOESPtr;
		private static delegate* unmanaged<uint, float, float, float, float, void> glViewportIndexedfNVPtr;
		private static delegate* unmanaged<uint, float*, void> glViewportIndexedfvPtr;
		private static delegate* unmanaged<uint, float*, void> glViewportIndexedfvOESPtr;
		private static delegate* unmanaged<uint, float*, void> glViewportIndexedfvNVPtr;
		private static delegate* unmanaged<uint, float, float, void> glViewportPositionWScaleNVPtr;
		private static delegate* unmanaged<uint, int, int, int, int, void> glViewportSwizzleNVPtr;
		private static delegate* unmanaged<uint, uint, uint*, uint, uint*, uint*, void> glWaitSemaphoreEXTPtr;
		private static delegate* unmanaged<IntPtr, uint, ulong, void> glWaitSyncPtr;
		private static delegate* unmanaged<IntPtr, uint, ulong, void> glWaitSyncAPPLEPtr;
		private static delegate* unmanaged<uint, int, uint*, float*, void> glWeightPathsNVPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glWeightPointerARBPtr;
		private static delegate* unmanaged<int, int, int, IntPtr, void> glWeightPointerOESPtr;
		private static delegate* unmanaged<int, sbyte*, void> glWeightbvARBPtr;
		private static delegate* unmanaged<int, double*, void> glWeightdvARBPtr;
		private static delegate* unmanaged<int, float*, void> glWeightfvARBPtr;
		private static delegate* unmanaged<int, int*, void> glWeightivARBPtr;
		private static delegate* unmanaged<int, short*, void> glWeightsvARBPtr;
		private static delegate* unmanaged<int, byte*, void> glWeightubvARBPtr;
		private static delegate* unmanaged<int, uint*, void> glWeightuivARBPtr;
		private static delegate* unmanaged<int, ushort*, void> glWeightusvARBPtr;
		private static delegate* unmanaged<double, double, void> glWindowPos2dPtr;
		private static delegate* unmanaged<double, double, void> glWindowPos2dARBPtr;
		private static delegate* unmanaged<double, double, void> glWindowPos2dMESAPtr;
		private static delegate* unmanaged<double*, void> glWindowPos2dvPtr;
		private static delegate* unmanaged<double*, void> glWindowPos2dvARBPtr;
		private static delegate* unmanaged<double*, void> glWindowPos2dvMESAPtr;
		private static delegate* unmanaged<float, float, void> glWindowPos2fPtr;
		private static delegate* unmanaged<float, float, void> glWindowPos2fARBPtr;
		private static delegate* unmanaged<float, float, void> glWindowPos2fMESAPtr;
		private static delegate* unmanaged<float*, void> glWindowPos2fvPtr;
		private static delegate* unmanaged<float*, void> glWindowPos2fvARBPtr;
		private static delegate* unmanaged<float*, void> glWindowPos2fvMESAPtr;
		private static delegate* unmanaged<int, int, void> glWindowPos2iPtr;
		private static delegate* unmanaged<int, int, void> glWindowPos2iARBPtr;
		private static delegate* unmanaged<int, int, void> glWindowPos2iMESAPtr;
		private static delegate* unmanaged<int*, void> glWindowPos2ivPtr;
		private static delegate* unmanaged<int*, void> glWindowPos2ivARBPtr;
		private static delegate* unmanaged<int*, void> glWindowPos2ivMESAPtr;
		private static delegate* unmanaged<short, short, void> glWindowPos2sPtr;
		private static delegate* unmanaged<short, short, void> glWindowPos2sARBPtr;
		private static delegate* unmanaged<short, short, void> glWindowPos2sMESAPtr;
		private static delegate* unmanaged<short*, void> glWindowPos2svPtr;
		private static delegate* unmanaged<short*, void> glWindowPos2svARBPtr;
		private static delegate* unmanaged<short*, void> glWindowPos2svMESAPtr;
		private static delegate* unmanaged<double, double, double, void> glWindowPos3dPtr;
		private static delegate* unmanaged<double, double, double, void> glWindowPos3dARBPtr;
		private static delegate* unmanaged<double, double, double, void> glWindowPos3dMESAPtr;
		private static delegate* unmanaged<double*, void> glWindowPos3dvPtr;
		private static delegate* unmanaged<double*, void> glWindowPos3dvARBPtr;
		private static delegate* unmanaged<double*, void> glWindowPos3dvMESAPtr;
		private static delegate* unmanaged<float, float, float, void> glWindowPos3fPtr;
		private static delegate* unmanaged<float, float, float, void> glWindowPos3fARBPtr;
		private static delegate* unmanaged<float, float, float, void> glWindowPos3fMESAPtr;
		private static delegate* unmanaged<float*, void> glWindowPos3fvPtr;
		private static delegate* unmanaged<float*, void> glWindowPos3fvARBPtr;
		private static delegate* unmanaged<float*, void> glWindowPos3fvMESAPtr;
		private static delegate* unmanaged<int, int, int, void> glWindowPos3iPtr;
		private static delegate* unmanaged<int, int, int, void> glWindowPos3iARBPtr;
		private static delegate* unmanaged<int, int, int, void> glWindowPos3iMESAPtr;
		private static delegate* unmanaged<int*, void> glWindowPos3ivPtr;
		private static delegate* unmanaged<int*, void> glWindowPos3ivARBPtr;
		private static delegate* unmanaged<int*, void> glWindowPos3ivMESAPtr;
		private static delegate* unmanaged<short, short, short, void> glWindowPos3sPtr;
		private static delegate* unmanaged<short, short, short, void> glWindowPos3sARBPtr;
		private static delegate* unmanaged<short, short, short, void> glWindowPos3sMESAPtr;
		private static delegate* unmanaged<short*, void> glWindowPos3svPtr;
		private static delegate* unmanaged<short*, void> glWindowPos3svARBPtr;
		private static delegate* unmanaged<short*, void> glWindowPos3svMESAPtr;
		private static delegate* unmanaged<double, double, double, double, void> glWindowPos4dMESAPtr;
		private static delegate* unmanaged<double*, void> glWindowPos4dvMESAPtr;
		private static delegate* unmanaged<float, float, float, float, void> glWindowPos4fMESAPtr;
		private static delegate* unmanaged<float*, void> glWindowPos4fvMESAPtr;
		private static delegate* unmanaged<int, int, int, int, void> glWindowPos4iMESAPtr;
		private static delegate* unmanaged<int*, void> glWindowPos4ivMESAPtr;
		private static delegate* unmanaged<short, short, short, short, void> glWindowPos4sMESAPtr;
		private static delegate* unmanaged<short*, void> glWindowPos4svMESAPtr;
		private static delegate* unmanaged<int, int, int*, void> glWindowRectanglesEXTPtr;
		private static delegate* unmanaged<uint, uint, int, int, int, int, void> glWriteMaskEXTPtr;
		private static delegate* unmanaged<ulong, uint, float, float, float, float, float, float, float, float, float, void> glDrawVkImageNVPtr;
		private static delegate* unmanaged<byte*, IntPtr> glGetVkProcAddrNVPtr;
		private static delegate* unmanaged<ulong, void> glWaitVkSemaphoreNVPtr;
		private static delegate* unmanaged<ulong, void> glSignalVkSemaphoreNVPtr;
		private static delegate* unmanaged<ulong, void> glSignalVkFenceNVPtr;

		public static LibraryLoader loader;

		public static void Init()
		{
			var env = SystemEnvironment.Current;

			var osloader = env.OS switch
			{
				SystemPlatform.Windows => env.LoadLibrary("opengl32.dll"),
				SystemPlatform.Linux => env.LoadLibrary("libGL.so"),
				_ => throw new NotImplementedException()
			};

			Functions.loader = new GLLoader(osloader);
			Functions.LoadFunctions();
		}


		public static void LoadFunctions()
		{
			Functions.glAccumPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glAccum");
			Functions.glAccumxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glAccumxOES");
			Functions.glActiveProgramEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glActiveProgramEXT");
			Functions.glActiveShaderProgramPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glActiveShaderProgram");
			Functions.glActiveShaderProgramEXTPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glActiveShaderProgramEXT");
			Functions.glActiveStencilFaceEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glActiveStencilFaceEXT");
			Functions.glActiveTexturePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glActiveTexture");
			Functions.glActiveTextureARBPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glActiveTextureARB");
			Functions.glActiveVaryingNVPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glActiveVaryingNV");
			Functions.glAlphaFragmentOp1ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glAlphaFragmentOp1ATI");
			Functions.glAlphaFragmentOp2ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glAlphaFragmentOp2ATI");
			Functions.glAlphaFragmentOp3ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glAlphaFragmentOp3ATI");
			Functions.glAlphaFuncPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glAlphaFunc");
			Functions.glAlphaFuncQCOMPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glAlphaFuncQCOM");
			Functions.glAlphaFuncxPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glAlphaFuncx");
			Functions.glAlphaFuncxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glAlphaFuncxOES");
			Functions.glAlphaToCoverageDitherControlNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glAlphaToCoverageDitherControlNV");
			Functions.glApplyFramebufferAttachmentCMAAINTELPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glApplyFramebufferAttachmentCMAAINTEL");
			Functions.glApplyTextureEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glApplyTextureEXT");
			Functions.glAcquireKeyedMutexWin32EXTPtr = (delegate* unmanaged<uint, ulong, uint, bool>)Functions.LoadFunction("glAcquireKeyedMutexWin32EXT");
			Functions.glAreProgramsResidentNVPtr = (delegate* unmanaged<int, uint*, bool*, bool>)Functions.LoadFunction("glAreProgramsResidentNV");
			Functions.glAreTexturesResidentPtr = (delegate* unmanaged<int, uint*, bool*, bool>)Functions.LoadFunction("glAreTexturesResident");
			Functions.glAreTexturesResidentEXTPtr = (delegate* unmanaged<int, uint*, bool*, bool>)Functions.LoadFunction("glAreTexturesResidentEXT");
			Functions.glArrayElementPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glArrayElement");
			Functions.glArrayElementEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glArrayElementEXT");
			Functions.glArrayObjectATIPtr = (delegate* unmanaged<int, int, int, int, uint, uint, void>)Functions.LoadFunction("glArrayObjectATI");
			Functions.glAsyncMarkerSGIXPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glAsyncMarkerSGIX");
			Functions.glAttachObjectARBPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glAttachObjectARB");
			Functions.glAttachShaderPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glAttachShader");
			Functions.glBeginPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBegin");
			Functions.glBeginConditionalRenderPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBeginConditionalRender");
			Functions.glBeginConditionalRenderNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBeginConditionalRenderNV");
			Functions.glBeginConditionalRenderNVXPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBeginConditionalRenderNVX");
			Functions.glBeginFragmentShaderATIPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glBeginFragmentShaderATI");
			Functions.glBeginOcclusionQueryNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBeginOcclusionQueryNV");
			Functions.glBeginPerfMonitorAMDPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBeginPerfMonitorAMD");
			Functions.glBeginPerfQueryINTELPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBeginPerfQueryINTEL");
			Functions.glBeginQueryPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBeginQuery");
			Functions.glBeginQueryARBPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBeginQueryARB");
			Functions.glBeginQueryEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBeginQueryEXT");
			Functions.glBeginQueryIndexedPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glBeginQueryIndexed");
			Functions.glBeginTransformFeedbackPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBeginTransformFeedback");
			Functions.glBeginTransformFeedbackEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBeginTransformFeedbackEXT");
			Functions.glBeginTransformFeedbackNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBeginTransformFeedbackNV");
			Functions.glBeginVertexShaderEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glBeginVertexShaderEXT");
			Functions.glBeginVideoCaptureNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBeginVideoCaptureNV");
			Functions.glBindAttribLocationPtr = (delegate* unmanaged<uint, uint, byte*, void>)Functions.LoadFunction("glBindAttribLocation");
			Functions.glBindAttribLocationARBPtr = (delegate* unmanaged<uint, uint, byte*, void>)Functions.LoadFunction("glBindAttribLocationARB");
			Functions.glBindBufferPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindBuffer");
			Functions.glBindBufferARBPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindBufferARB");
			Functions.glBindBufferBasePtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glBindBufferBase");
			Functions.glBindBufferBaseEXTPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glBindBufferBaseEXT");
			Functions.glBindBufferBaseNVPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glBindBufferBaseNV");
			Functions.glBindBufferOffsetEXTPtr = (delegate* unmanaged<int, uint, uint, uint, void>)Functions.LoadFunction("glBindBufferOffsetEXT");
			Functions.glBindBufferOffsetNVPtr = (delegate* unmanaged<int, uint, uint, uint, void>)Functions.LoadFunction("glBindBufferOffsetNV");
			Functions.glBindBufferRangePtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glBindBufferRange");
			Functions.glBindBufferRangeEXTPtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glBindBufferRangeEXT");
			Functions.glBindBufferRangeNVPtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glBindBufferRangeNV");
			Functions.glBindBuffersBasePtr = (delegate* unmanaged<int, uint, int, uint*, void>)Functions.LoadFunction("glBindBuffersBase");
			Functions.glBindBuffersRangePtr = (delegate* unmanaged<int, uint, int, uint*, uint*, uint*, void>)Functions.LoadFunction("glBindBuffersRange");
			Functions.glBindFragDataLocationPtr = (delegate* unmanaged<uint, uint, byte*, void>)Functions.LoadFunction("glBindFragDataLocation");
			Functions.glBindFragDataLocationEXTPtr = (delegate* unmanaged<uint, uint, byte*, void>)Functions.LoadFunction("glBindFragDataLocationEXT");
			Functions.glBindFragDataLocationIndexedPtr = (delegate* unmanaged<uint, uint, uint, byte*, void>)Functions.LoadFunction("glBindFragDataLocationIndexed");
			Functions.glBindFragDataLocationIndexedEXTPtr = (delegate* unmanaged<uint, uint, uint, byte*, void>)Functions.LoadFunction("glBindFragDataLocationIndexedEXT");
			Functions.glBindFragmentShaderATIPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindFragmentShaderATI");
			Functions.glBindFramebufferPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindFramebuffer");
			Functions.glBindFramebufferEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindFramebufferEXT");
			Functions.glBindFramebufferOESPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindFramebufferOES");
			Functions.glBindImageTexturePtr = (delegate* unmanaged<uint, uint, int, bool, int, int, int, void>)Functions.LoadFunction("glBindImageTexture");
			Functions.glBindImageTextureEXTPtr = (delegate* unmanaged<uint, uint, int, bool, int, int, int, void>)Functions.LoadFunction("glBindImageTextureEXT");
			Functions.glBindImageTexturesPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glBindImageTextures");
			Functions.glBindLightParameterEXTPtr = (delegate* unmanaged<int, int, uint>)Functions.LoadFunction("glBindLightParameterEXT");
			Functions.glBindMaterialParameterEXTPtr = (delegate* unmanaged<int, int, uint>)Functions.LoadFunction("glBindMaterialParameterEXT");
			Functions.glBindMultiTextureEXTPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glBindMultiTextureEXT");
			Functions.glBindParameterEXTPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glBindParameterEXT");
			Functions.glBindProgramARBPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindProgramARB");
			Functions.glBindProgramNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindProgramNV");
			Functions.glBindProgramPipelinePtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindProgramPipeline");
			Functions.glBindProgramPipelineEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindProgramPipelineEXT");
			Functions.glBindRenderbufferPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindRenderbuffer");
			Functions.glBindRenderbufferEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindRenderbufferEXT");
			Functions.glBindRenderbufferOESPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindRenderbufferOES");
			Functions.glBindSamplerPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glBindSampler");
			Functions.glBindSamplersPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glBindSamplers");
			Functions.glBindShadingRateImageNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindShadingRateImageNV");
			Functions.glBindTexGenParameterEXTPtr = (delegate* unmanaged<int, int, int, uint>)Functions.LoadFunction("glBindTexGenParameterEXT");
			Functions.glBindTexturePtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindTexture");
			Functions.glBindTextureEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindTextureEXT");
			Functions.glBindTextureUnitPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glBindTextureUnit");
			Functions.glBindTextureUnitParameterEXTPtr = (delegate* unmanaged<int, int, uint>)Functions.LoadFunction("glBindTextureUnitParameterEXT");
			Functions.glBindTexturesPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glBindTextures");
			Functions.glBindTransformFeedbackPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindTransformFeedback");
			Functions.glBindTransformFeedbackNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glBindTransformFeedbackNV");
			Functions.glBindVertexArrayPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindVertexArray");
			Functions.glBindVertexArrayAPPLEPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindVertexArrayAPPLE");
			Functions.glBindVertexArrayOESPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindVertexArrayOES");
			Functions.glBindVertexBufferPtr = (delegate* unmanaged<uint, uint, uint, int, void>)Functions.LoadFunction("glBindVertexBuffer");
			Functions.glBindVertexBuffersPtr = (delegate* unmanaged<uint, int, uint*, uint*, int*, void>)Functions.LoadFunction("glBindVertexBuffers");
			Functions.glBindVertexShaderEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glBindVertexShaderEXT");
			Functions.glBindVideoCaptureStreamBufferNVPtr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)Functions.LoadFunction("glBindVideoCaptureStreamBufferNV");
			Functions.glBindVideoCaptureStreamTextureNVPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glBindVideoCaptureStreamTextureNV");
			Functions.glBinormal3bEXTPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glBinormal3bEXT");
			Functions.glBinormal3bvEXTPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glBinormal3bvEXT");
			Functions.glBinormal3dEXTPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glBinormal3dEXT");
			Functions.glBinormal3dvEXTPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glBinormal3dvEXT");
			Functions.glBinormal3fEXTPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glBinormal3fEXT");
			Functions.glBinormal3fvEXTPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glBinormal3fvEXT");
			Functions.glBinormal3iEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glBinormal3iEXT");
			Functions.glBinormal3ivEXTPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glBinormal3ivEXT");
			Functions.glBinormal3sEXTPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glBinormal3sEXT");
			Functions.glBinormal3svEXTPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glBinormal3svEXT");
			Functions.glBinormalPointerEXTPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glBinormalPointerEXT");
			Functions.glBitmapPtr = (delegate* unmanaged<int, int, float, float, float, float, byte*, void>)Functions.LoadFunction("glBitmap");
			Functions.glBitmapxOESPtr = (delegate* unmanaged<int, int, IntPtr, IntPtr, IntPtr, IntPtr, byte*, void>)Functions.LoadFunction("glBitmapxOES");
			Functions.glBlendBarrierPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glBlendBarrier");
			Functions.glBlendBarrierKHRPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glBlendBarrierKHR");
			Functions.glBlendBarrierNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glBlendBarrierNV");
			Functions.glBlendColorPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glBlendColor");
			Functions.glBlendColorEXTPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glBlendColorEXT");
			Functions.glBlendColorxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glBlendColorxOES");
			Functions.glBlendEquationPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBlendEquation");
			Functions.glBlendEquationEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBlendEquationEXT");
			Functions.glBlendEquationIndexedAMDPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBlendEquationIndexedAMD");
			Functions.glBlendEquationOESPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glBlendEquationOES");
			Functions.glBlendEquationSeparatePtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glBlendEquationSeparate");
			Functions.glBlendEquationSeparateEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glBlendEquationSeparateEXT");
			Functions.glBlendEquationSeparateIndexedAMDPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendEquationSeparateIndexedAMD");
			Functions.glBlendEquationSeparateOESPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glBlendEquationSeparateOES");
			Functions.glBlendEquationSeparateiPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendEquationSeparatei");
			Functions.glBlendEquationSeparateiARBPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendEquationSeparateiARB");
			Functions.glBlendEquationSeparateiEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendEquationSeparateiEXT");
			Functions.glBlendEquationSeparateiOESPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendEquationSeparateiOES");
			Functions.glBlendEquationiPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBlendEquationi");
			Functions.glBlendEquationiARBPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBlendEquationiARB");
			Functions.glBlendEquationiEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBlendEquationiEXT");
			Functions.glBlendEquationiOESPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glBlendEquationiOES");
			Functions.glBlendFuncPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glBlendFunc");
			Functions.glBlendFuncIndexedAMDPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendFuncIndexedAMD");
			Functions.glBlendFuncSeparatePtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparate");
			Functions.glBlendFuncSeparateEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateEXT");
			Functions.glBlendFuncSeparateINGRPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateINGR");
			Functions.glBlendFuncSeparateIndexedAMDPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateIndexedAMD");
			Functions.glBlendFuncSeparateOESPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateOES");
			Functions.glBlendFuncSeparateiPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparatei");
			Functions.glBlendFuncSeparateiARBPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateiARB");
			Functions.glBlendFuncSeparateiEXTPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateiEXT");
			Functions.glBlendFuncSeparateiOESPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glBlendFuncSeparateiOES");
			Functions.glBlendFunciPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendFunci");
			Functions.glBlendFunciARBPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendFunciARB");
			Functions.glBlendFunciEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendFunciEXT");
			Functions.glBlendFunciOESPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glBlendFunciOES");
			Functions.glBlendParameteriNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glBlendParameteriNV");
			Functions.glBlitFramebufferPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glBlitFramebuffer");
			Functions.glBlitFramebufferANGLEPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glBlitFramebufferANGLE");
			Functions.glBlitFramebufferEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glBlitFramebufferEXT");
			Functions.glBlitFramebufferNVPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glBlitFramebufferNV");
			Functions.glBlitNamedFramebufferPtr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glBlitNamedFramebuffer");
			Functions.glBufferAddressRangeNVPtr = (delegate* unmanaged<int, uint, ulong, uint, void>)Functions.LoadFunction("glBufferAddressRangeNV");
			Functions.glBufferAttachMemoryNVPtr = (delegate* unmanaged<int, uint, ulong, void>)Functions.LoadFunction("glBufferAttachMemoryNV");
			Functions.glBufferDataPtr = (delegate* unmanaged<int, uint, void*, int, void>)Functions.LoadFunction("glBufferData");
			Functions.glBufferDataARBPtr = (delegate* unmanaged<int, uint, void*, int, void>)Functions.LoadFunction("glBufferDataARB");
			Functions.glBufferPageCommitmentARBPtr = (delegate* unmanaged<int, uint, uint, bool, void>)Functions.LoadFunction("glBufferPageCommitmentARB");
			Functions.glBufferParameteriAPPLEPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glBufferParameteriAPPLE");
			Functions.glBufferStoragePtr = (delegate* unmanaged<int, uint, void*, uint, void>)Functions.LoadFunction("glBufferStorage");
			Functions.glBufferStorageEXTPtr = (delegate* unmanaged<int, uint, void*, uint, void>)Functions.LoadFunction("glBufferStorageEXT");
			Functions.glBufferStorageExternalEXTPtr = (delegate* unmanaged<int, uint, uint, IntPtr, uint, void>)Functions.LoadFunction("glBufferStorageExternalEXT");
			Functions.glBufferStorageMemEXTPtr = (delegate* unmanaged<int, uint, uint, ulong, void>)Functions.LoadFunction("glBufferStorageMemEXT");
			Functions.glBufferSubDataPtr = (delegate* unmanaged<int, uint, uint, void*, void>)Functions.LoadFunction("glBufferSubData");
			Functions.glBufferSubDataARBPtr = (delegate* unmanaged<int, IntPtr, uint, IntPtr, void>)Functions.LoadFunction("glBufferSubDataARB");
			Functions.glCallCommandListNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCallCommandListNV");
			Functions.glCallListPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCallList");
			Functions.glCallListsPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glCallLists");
			Functions.glCheckFramebufferStatusPtr = (delegate* unmanaged<int, int>)Functions.LoadFunction("glCheckFramebufferStatus");
			Functions.glCheckFramebufferStatusEXTPtr = (delegate* unmanaged<int, int>)Functions.LoadFunction("glCheckFramebufferStatusEXT");
			Functions.glCheckFramebufferStatusOESPtr = (delegate* unmanaged<int, int>)Functions.LoadFunction("glCheckFramebufferStatusOES");
			Functions.glCheckNamedFramebufferStatusPtr = (delegate* unmanaged<uint, int, int>)Functions.LoadFunction("glCheckNamedFramebufferStatus");
			Functions.glCheckNamedFramebufferStatusEXTPtr = (delegate* unmanaged<uint, int, int>)Functions.LoadFunction("glCheckNamedFramebufferStatusEXT");
			Functions.glClampColorPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glClampColor");
			Functions.glClampColorARBPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glClampColorARB");
			Functions.glClearPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glClear");
			Functions.glClearAccumPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glClearAccum");
			Functions.glClearAccumxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glClearAccumxOES");
			Functions.glClearBufferDataPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearBufferData");
			Functions.glClearBufferSubDataPtr = (delegate* unmanaged<int, int, uint, uint, int, int, IntPtr, void>)Functions.LoadFunction("glClearBufferSubData");
			Functions.glClearBufferfiPtr = (delegate* unmanaged<int, int, float, int, void>)Functions.LoadFunction("glClearBufferfi");
			Functions.glClearBufferfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glClearBufferfv");
			Functions.glClearBufferivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glClearBufferiv");
			Functions.glClearBufferuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glClearBufferuiv");
			Functions.glClearColorPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glClearColor");
			Functions.glClearColorIiEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glClearColorIiEXT");
			Functions.glClearColorIuiEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, void>)Functions.LoadFunction("glClearColorIuiEXT");
			Functions.glClearColorxPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glClearColorx");
			Functions.glClearColorxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glClearColorxOES");
			Functions.glClearDepthPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glClearDepth");
			Functions.glClearDepthdNVPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glClearDepthdNV");
			Functions.glClearDepthfPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glClearDepthf");
			Functions.glClearDepthfOESPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glClearDepthfOES");
			Functions.glClearDepthxPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glClearDepthx");
			Functions.glClearDepthxOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glClearDepthxOES");
			Functions.glClearIndexPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glClearIndex");
			Functions.glClearNamedBufferDataPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearNamedBufferData");
			Functions.glClearNamedBufferDataEXTPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearNamedBufferDataEXT");
			Functions.glClearNamedBufferSubDataPtr = (delegate* unmanaged<uint, int, uint, uint, int, int, IntPtr, void>)Functions.LoadFunction("glClearNamedBufferSubData");
			Functions.glClearNamedBufferSubDataEXTPtr = (delegate* unmanaged<uint, int, uint, uint, int, int, IntPtr, void>)Functions.LoadFunction("glClearNamedBufferSubDataEXT");
			Functions.glClearNamedFramebufferfiPtr = (delegate* unmanaged<uint, int, int, float, int, void>)Functions.LoadFunction("glClearNamedFramebufferfi");
			Functions.glClearNamedFramebufferfvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glClearNamedFramebufferfv");
			Functions.glClearNamedFramebufferivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glClearNamedFramebufferiv");
			Functions.glClearNamedFramebufferuivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glClearNamedFramebufferuiv");
			Functions.glClearPixelLocalStorageuiEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glClearPixelLocalStorageuiEXT");
			Functions.glClearStencilPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glClearStencil");
			Functions.glClearTexImagePtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearTexImage");
			Functions.glClearTexImageEXTPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearTexImageEXT");
			Functions.glClearTexSubImagePtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearTexSubImage");
			Functions.glClearTexSubImageEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glClearTexSubImageEXT");
			Functions.glClientActiveTexturePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glClientActiveTexture");
			Functions.glClientActiveTextureARBPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glClientActiveTextureARB");
			Functions.glClientActiveVertexStreamATIPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glClientActiveVertexStreamATI");
			Functions.glClientAttribDefaultEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glClientAttribDefaultEXT");
			Functions.glClientWaitSyncPtr = (delegate* unmanaged<IntPtr, uint, ulong, int>)Functions.LoadFunction("glClientWaitSync");
			Functions.glClientWaitSyncAPPLEPtr = (delegate* unmanaged<IntPtr, uint, ulong, int>)Functions.LoadFunction("glClientWaitSyncAPPLE");
			Functions.glClipControlPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glClipControl");
			Functions.glClipControlEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glClipControlEXT");
			Functions.glClipPlanePtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glClipPlane");
			Functions.glClipPlanefPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glClipPlanef");
			Functions.glClipPlanefIMGPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glClipPlanefIMG");
			Functions.glClipPlanefOESPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glClipPlanefOES");
			Functions.glClipPlanexPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glClipPlanex");
			Functions.glClipPlanexIMGPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glClipPlanexIMG");
			Functions.glClipPlanexOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glClipPlanexOES");
			Functions.glColor3bPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glColor3b");
			Functions.glColor3bvPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glColor3bv");
			Functions.glColor3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glColor3d");
			Functions.glColor3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glColor3dv");
			Functions.glColor3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glColor3f");
			Functions.glColor3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glColor3fVertex3fSUN");
			Functions.glColor3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, void>)Functions.LoadFunction("glColor3fVertex3fvSUN");
			Functions.glColor3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glColor3fv");
			Functions.glColor3hNVPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glColor3hNV");
			Functions.glColor3hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glColor3hvNV");
			Functions.glColor3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glColor3i");
			Functions.glColor3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glColor3iv");
			Functions.glColor3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glColor3s");
			Functions.glColor3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glColor3sv");
			Functions.glColor3ubPtr = (delegate* unmanaged<byte, byte, byte, void>)Functions.LoadFunction("glColor3ub");
			Functions.glColor3ubvPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glColor3ubv");
			Functions.glColor3uiPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glColor3ui");
			Functions.glColor3uivPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glColor3uiv");
			Functions.glColor3usPtr = (delegate* unmanaged<ushort, ushort, ushort, void>)Functions.LoadFunction("glColor3us");
			Functions.glColor3usvPtr = (delegate* unmanaged<ushort*, void>)Functions.LoadFunction("glColor3usv");
			Functions.glColor3xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glColor3xOES");
			Functions.glColor3xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glColor3xvOES");
			Functions.glColor4bPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glColor4b");
			Functions.glColor4bvPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glColor4bv");
			Functions.glColor4dPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glColor4d");
			Functions.glColor4dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glColor4dv");
			Functions.glColor4fPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glColor4f");
			Functions.glColor4fNormal3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glColor4fNormal3fVertex3fSUN");
			Functions.glColor4fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, float*, void>)Functions.LoadFunction("glColor4fNormal3fVertex3fvSUN");
			Functions.glColor4fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glColor4fv");
			Functions.glColor4hNVPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glColor4hNV");
			Functions.glColor4hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glColor4hvNV");
			Functions.glColor4iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glColor4i");
			Functions.glColor4ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glColor4iv");
			Functions.glColor4sPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glColor4s");
			Functions.glColor4svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glColor4sv");
			Functions.glColor4ubPtr = (delegate* unmanaged<byte, byte, byte, byte, void>)Functions.LoadFunction("glColor4ub");
			Functions.glColor4ubVertex2fSUNPtr = (delegate* unmanaged<byte, byte, byte, byte, float, float, void>)Functions.LoadFunction("glColor4ubVertex2fSUN");
			Functions.glColor4ubVertex2fvSUNPtr = (delegate* unmanaged<byte*, float*, void>)Functions.LoadFunction("glColor4ubVertex2fvSUN");
			Functions.glColor4ubVertex3fSUNPtr = (delegate* unmanaged<byte, byte, byte, byte, float, float, float, void>)Functions.LoadFunction("glColor4ubVertex3fSUN");
			Functions.glColor4ubVertex3fvSUNPtr = (delegate* unmanaged<byte*, float*, void>)Functions.LoadFunction("glColor4ubVertex3fvSUN");
			Functions.glColor4ubvPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glColor4ubv");
			Functions.glColor4uiPtr = (delegate* unmanaged<uint, uint, uint, uint, void>)Functions.LoadFunction("glColor4ui");
			Functions.glColor4uivPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glColor4uiv");
			Functions.glColor4usPtr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)Functions.LoadFunction("glColor4us");
			Functions.glColor4usvPtr = (delegate* unmanaged<ushort*, void>)Functions.LoadFunction("glColor4usv");
			Functions.glColor4xPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glColor4x");
			Functions.glColor4xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glColor4xOES");
			Functions.glColor4xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glColor4xvOES");
			Functions.glColorFormatNVPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glColorFormatNV");
			Functions.glColorFragmentOp1ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glColorFragmentOp1ATI");
			Functions.glColorFragmentOp2ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glColorFragmentOp2ATI");
			Functions.glColorFragmentOp3ATIPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glColorFragmentOp3ATI");
			Functions.glColorMaskPtr = (delegate* unmanaged<bool, bool, bool, bool, void>)Functions.LoadFunction("glColorMask");
			Functions.glColorMaskIndexedEXTPtr = (delegate* unmanaged<uint, bool, bool, bool, bool, void>)Functions.LoadFunction("glColorMaskIndexedEXT");
			Functions.glColorMaskiPtr = (delegate* unmanaged<uint, bool, bool, bool, bool, void>)Functions.LoadFunction("glColorMaski");
			Functions.glColorMaskiEXTPtr = (delegate* unmanaged<uint, bool, bool, bool, bool, void>)Functions.LoadFunction("glColorMaskiEXT");
			Functions.glColorMaskiOESPtr = (delegate* unmanaged<uint, bool, bool, bool, bool, void>)Functions.LoadFunction("glColorMaskiOES");
			Functions.glColorMaterialPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glColorMaterial");
			Functions.glColorP3uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glColorP3ui");
			Functions.glColorP3uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glColorP3uiv");
			Functions.glColorP4uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glColorP4ui");
			Functions.glColorP4uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glColorP4uiv");
			Functions.glColorPointerPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glColorPointer");
			Functions.glColorPointerEXTPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorPointerEXT");
			Functions.glColorPointerListIBMPtr = (delegate* unmanaged<int, int, int, IntPtr*, int, void>)Functions.LoadFunction("glColorPointerListIBM");
			Functions.glColorPointervINTELPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glColorPointervINTEL");
			Functions.glColorSubTablePtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorSubTable");
			Functions.glColorSubTableEXTPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorSubTableEXT");
			Functions.glColorTablePtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorTable");
			Functions.glColorTableEXTPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorTableEXT");
			Functions.glColorTableParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glColorTableParameterfv");
			Functions.glColorTableParameterfvSGIPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glColorTableParameterfvSGI");
			Functions.glColorTableParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glColorTableParameteriv");
			Functions.glColorTableParameterivSGIPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glColorTableParameterivSGI");
			Functions.glColorTableSGIPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glColorTableSGI");
			Functions.glCombinerInputNVPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glCombinerInputNV");
			Functions.glCombinerOutputNVPtr = (delegate* unmanaged<int, int, int, int, int, int, int, bool, bool, bool, void>)Functions.LoadFunction("glCombinerOutputNV");
			Functions.glCombinerParameterfNVPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glCombinerParameterfNV");
			Functions.glCombinerParameterfvNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glCombinerParameterfvNV");
			Functions.glCombinerParameteriNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glCombinerParameteriNV");
			Functions.glCombinerParameterivNVPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glCombinerParameterivNV");
			Functions.glCombinerStageParameterfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glCombinerStageParameterfvNV");
			Functions.glCommandListSegmentsNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glCommandListSegmentsNV");
			Functions.glCompileCommandListNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCompileCommandListNV");
			Functions.glCompileShaderPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCompileShader");
			Functions.glCompileShaderARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCompileShaderARB");
			Functions.glCompileShaderIncludeARBPtr = (delegate* unmanaged<uint, int, byte**, int*, void>)Functions.LoadFunction("glCompileShaderIncludeARB");
			Functions.glCompressedMultiTexImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexImage1DEXT");
			Functions.glCompressedMultiTexImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexImage2DEXT");
			Functions.glCompressedMultiTexImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexImage3DEXT");
			Functions.glCompressedMultiTexSubImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexSubImage1DEXT");
			Functions.glCompressedMultiTexSubImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexSubImage2DEXT");
			Functions.glCompressedMultiTexSubImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedMultiTexSubImage3DEXT");
			Functions.glCompressedTexImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage1D");
			Functions.glCompressedTexImage1DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage1DARB");
			Functions.glCompressedTexImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage2D");
			Functions.glCompressedTexImage2DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage2DARB");
			Functions.glCompressedTexImage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage3D");
			Functions.glCompressedTexImage3DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage3DARB");
			Functions.glCompressedTexImage3DOESPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexImage3DOES");
			Functions.glCompressedTexSubImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage1D");
			Functions.glCompressedTexSubImage1DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage1DARB");
			Functions.glCompressedTexSubImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage2D");
			Functions.glCompressedTexSubImage2DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage2DARB");
			Functions.glCompressedTexSubImage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage3D");
			Functions.glCompressedTexSubImage3DARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage3DARB");
			Functions.glCompressedTexSubImage3DOESPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTexSubImage3DOES");
			Functions.glCompressedTextureImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureImage1DEXT");
			Functions.glCompressedTextureImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureImage2DEXT");
			Functions.glCompressedTextureImage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureImage3DEXT");
			Functions.glCompressedTextureSubImage1DPtr = (delegate* unmanaged<uint, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage1D");
			Functions.glCompressedTextureSubImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage1DEXT");
			Functions.glCompressedTextureSubImage2DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage2D");
			Functions.glCompressedTextureSubImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage2DEXT");
			Functions.glCompressedTextureSubImage3DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage3D");
			Functions.glCompressedTextureSubImage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glCompressedTextureSubImage3DEXT");
			Functions.glConservativeRasterParameterfNVPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glConservativeRasterParameterfNV");
			Functions.glConservativeRasterParameteriNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glConservativeRasterParameteriNV");
			Functions.glConvolutionFilter1DPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glConvolutionFilter1D");
			Functions.glConvolutionFilter1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glConvolutionFilter1DEXT");
			Functions.glConvolutionFilter2DPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glConvolutionFilter2D");
			Functions.glConvolutionFilter2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glConvolutionFilter2DEXT");
			Functions.glConvolutionParameterfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glConvolutionParameterf");
			Functions.glConvolutionParameterfEXTPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glConvolutionParameterfEXT");
			Functions.glConvolutionParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glConvolutionParameterfv");
			Functions.glConvolutionParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glConvolutionParameterfvEXT");
			Functions.glConvolutionParameteriPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glConvolutionParameteri");
			Functions.glConvolutionParameteriEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glConvolutionParameteriEXT");
			Functions.glConvolutionParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glConvolutionParameteriv");
			Functions.glConvolutionParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glConvolutionParameterivEXT");
			Functions.glConvolutionParameterxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glConvolutionParameterxOES");
			Functions.glConvolutionParameterxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glConvolutionParameterxvOES");
			Functions.glCopyBufferSubDataPtr = (delegate* unmanaged<int, int, uint, uint, uint, void>)Functions.LoadFunction("glCopyBufferSubData");
			Functions.glCopyBufferSubDataNVPtr = (delegate* unmanaged<int, int, uint, uint, uint, void>)Functions.LoadFunction("glCopyBufferSubDataNV");
			Functions.glCopyColorSubTablePtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyColorSubTable");
			Functions.glCopyColorSubTableEXTPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyColorSubTableEXT");
			Functions.glCopyColorTablePtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyColorTable");
			Functions.glCopyColorTableSGIPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyColorTableSGI");
			Functions.glCopyConvolutionFilter1DPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyConvolutionFilter1D");
			Functions.glCopyConvolutionFilter1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyConvolutionFilter1DEXT");
			Functions.glCopyConvolutionFilter2DPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyConvolutionFilter2D");
			Functions.glCopyConvolutionFilter2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyConvolutionFilter2DEXT");
			Functions.glCopyImageSubDataPtr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyImageSubData");
			Functions.glCopyImageSubDataEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyImageSubDataEXT");
			Functions.glCopyImageSubDataNVPtr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyImageSubDataNV");
			Functions.glCopyImageSubDataOESPtr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyImageSubDataOES");
			Functions.glCopyMultiTexImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyMultiTexImage1DEXT");
			Functions.glCopyMultiTexImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyMultiTexImage2DEXT");
			Functions.glCopyMultiTexSubImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyMultiTexSubImage1DEXT");
			Functions.glCopyMultiTexSubImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyMultiTexSubImage2DEXT");
			Functions.glCopyMultiTexSubImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyMultiTexSubImage3DEXT");
			Functions.glCopyNamedBufferSubDataPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glCopyNamedBufferSubData");
			Functions.glCopyPathNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glCopyPathNV");
			Functions.glCopyPixelsPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glCopyPixels");
			Functions.glCopyTexImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexImage1D");
			Functions.glCopyTexImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexImage1DEXT");
			Functions.glCopyTexImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexImage2D");
			Functions.glCopyTexImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexImage2DEXT");
			Functions.glCopyTexSubImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage1D");
			Functions.glCopyTexSubImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage1DEXT");
			Functions.glCopyTexSubImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage2D");
			Functions.glCopyTexSubImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage2DEXT");
			Functions.glCopyTexSubImage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage3D");
			Functions.glCopyTexSubImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage3DEXT");
			Functions.glCopyTexSubImage3DOESPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTexSubImage3DOES");
			Functions.glCopyTextureImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureImage1DEXT");
			Functions.glCopyTextureImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureImage2DEXT");
			Functions.glCopyTextureLevelsAPPLEPtr = (delegate* unmanaged<uint, uint, int, int, void>)Functions.LoadFunction("glCopyTextureLevelsAPPLE");
			Functions.glCopyTextureSubImage1DPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage1D");
			Functions.glCopyTextureSubImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage1DEXT");
			Functions.glCopyTextureSubImage2DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage2D");
			Functions.glCopyTextureSubImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage2DEXT");
			Functions.glCopyTextureSubImage3DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage3D");
			Functions.glCopyTextureSubImage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glCopyTextureSubImage3DEXT");
			Functions.glCoverFillPathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, int, float*, void>)Functions.LoadFunction("glCoverFillPathInstancedNV");
			Functions.glCoverFillPathNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glCoverFillPathNV");
			Functions.glCoverStrokePathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, int, float*, void>)Functions.LoadFunction("glCoverStrokePathInstancedNV");
			Functions.glCoverStrokePathNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glCoverStrokePathNV");
			Functions.glCoverageMaskNVPtr = (delegate* unmanaged<bool, void>)Functions.LoadFunction("glCoverageMaskNV");
			Functions.glCoverageModulationNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glCoverageModulationNV");
			Functions.glCoverageModulationTableNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glCoverageModulationTableNV");
			Functions.glCoverageOperationNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glCoverageOperationNV");
			Functions.glCreateBuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateBuffers");
			Functions.glCreateCommandListsNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateCommandListsNV");
			Functions.glCreateFramebuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateFramebuffers");
			Functions.glCreateMemoryObjectsEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateMemoryObjectsEXT");
			Functions.glCreatePerfQueryINTELPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glCreatePerfQueryINTEL");
			Functions.glCreateProgramPtr = (delegate* unmanaged<uint>)Functions.LoadFunction("glCreateProgram");
			Functions.glCreateProgramObjectARBPtr = (delegate* unmanaged<uint>)Functions.LoadFunction("glCreateProgramObjectARB");
			Functions.glCreateProgramPipelinesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateProgramPipelines");
			Functions.glCreateQueriesPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glCreateQueries");
			Functions.glCreateRenderbuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateRenderbuffers");
			Functions.glCreateSamplersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateSamplers");
			Functions.glCreateShaderPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glCreateShader");
			Functions.glCreateShaderObjectARBPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glCreateShaderObjectARB");
			Functions.glCreateShaderProgramEXTPtr = (delegate* unmanaged<int, byte*, uint>)Functions.LoadFunction("glCreateShaderProgramEXT");
			Functions.glCreateShaderProgramvPtr = (delegate* unmanaged<int, int, byte**, uint>)Functions.LoadFunction("glCreateShaderProgramv");
			Functions.glCreateShaderProgramvEXTPtr = (delegate* unmanaged<int, int, byte**, uint>)Functions.LoadFunction("glCreateShaderProgramvEXT");
			Functions.glCreateStatesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateStatesNV");
			Functions.glCreateSyncFromCLeventARBPtr = (delegate* unmanaged<IntPtr, IntPtr, uint, IntPtr>)Functions.LoadFunction("glCreateSyncFromCLeventARB");
			Functions.glCreateTexturesPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glCreateTextures");
			Functions.glCreateTransformFeedbacksPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateTransformFeedbacks");
			Functions.glCreateVertexArraysPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glCreateVertexArrays");
			Functions.glCullFacePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glCullFace");
			Functions.glCullParameterdvEXTPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glCullParameterdvEXT");
			Functions.glCullParameterfvEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glCullParameterfvEXT");
			Functions.glCurrentPaletteMatrixARBPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glCurrentPaletteMatrixARB");
			Functions.glCurrentPaletteMatrixOESPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glCurrentPaletteMatrixOES");
			Functions.glDebugMessageCallbackPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDebugMessageCallback");
			Functions.glDebugMessageCallbackAMDPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDebugMessageCallbackAMD");
			Functions.glDebugMessageCallbackARBPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDebugMessageCallbackARB");
			Functions.glDebugMessageCallbackKHRPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDebugMessageCallbackKHR");
			Functions.glDebugMessageControlPtr = (delegate* unmanaged<int, int, int, int, uint*, bool, void>)Functions.LoadFunction("glDebugMessageControl");
			Functions.glDebugMessageControlARBPtr = (delegate* unmanaged<int, int, int, int, uint*, bool, void>)Functions.LoadFunction("glDebugMessageControlARB");
			Functions.glDebugMessageControlKHRPtr = (delegate* unmanaged<int, int, int, int, uint*, bool, void>)Functions.LoadFunction("glDebugMessageControlKHR");
			Functions.glDebugMessageEnableAMDPtr = (delegate* unmanaged<int, int, int, uint*, bool, void>)Functions.LoadFunction("glDebugMessageEnableAMD");
			Functions.glDebugMessageInsertPtr = (delegate* unmanaged<int, int, uint, int, int, byte*, void>)Functions.LoadFunction("glDebugMessageInsert");
			Functions.glDebugMessageInsertAMDPtr = (delegate* unmanaged<int, int, uint, int, byte*, void>)Functions.LoadFunction("glDebugMessageInsertAMD");
			Functions.glDebugMessageInsertARBPtr = (delegate* unmanaged<int, int, uint, int, int, byte*, void>)Functions.LoadFunction("glDebugMessageInsertARB");
			Functions.glDebugMessageInsertKHRPtr = (delegate* unmanaged<int, int, uint, int, int, byte*, void>)Functions.LoadFunction("glDebugMessageInsertKHR");
			Functions.glDeformSGIXPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeformSGIX");
			Functions.glDeformationMap3dSGIXPtr = (delegate* unmanaged<int, double, double, int, int, double, double, int, int, double, double, int, int, double*, void>)Functions.LoadFunction("glDeformationMap3dSGIX");
			Functions.glDeformationMap3fSGIXPtr = (delegate* unmanaged<int, float, float, int, int, float, float, int, int, float, float, int, int, float*, void>)Functions.LoadFunction("glDeformationMap3fSGIX");
			Functions.glDeleteAsyncMarkersSGIXPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glDeleteAsyncMarkersSGIX");
			Functions.glDeleteBuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteBuffers");
			Functions.glDeleteBuffersARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteBuffersARB");
			Functions.glDeleteCommandListsNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteCommandListsNV");
			Functions.glDeleteFencesAPPLEPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteFencesAPPLE");
			Functions.glDeleteFencesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteFencesNV");
			Functions.glDeleteFragmentShaderATIPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeleteFragmentShaderATI");
			Functions.glDeleteFramebuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteFramebuffers");
			Functions.glDeleteFramebuffersEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteFramebuffersEXT");
			Functions.glDeleteFramebuffersOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteFramebuffersOES");
			Functions.glDeleteListsPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glDeleteLists");
			Functions.glDeleteMemoryObjectsEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteMemoryObjectsEXT");
			Functions.glDeleteNamedStringARBPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glDeleteNamedStringARB");
			Functions.glDeleteNamesAMDPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glDeleteNamesAMD");
			Functions.glDeleteObjectARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeleteObjectARB");
			Functions.glDeleteOcclusionQueriesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteOcclusionQueriesNV");
			Functions.glDeletePathsNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glDeletePathsNV");
			Functions.glDeletePerfMonitorsAMDPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeletePerfMonitorsAMD");
			Functions.glDeletePerfQueryINTELPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeletePerfQueryINTEL");
			Functions.glDeleteProgramPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeleteProgram");
			Functions.glDeleteProgramPipelinesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteProgramPipelines");
			Functions.glDeleteProgramPipelinesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteProgramPipelinesEXT");
			Functions.glDeleteProgramsARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteProgramsARB");
			Functions.glDeleteProgramsNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteProgramsNV");
			Functions.glDeleteQueriesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteQueries");
			Functions.glDeleteQueriesARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteQueriesARB");
			Functions.glDeleteQueriesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteQueriesEXT");
			Functions.glDeleteQueryResourceTagNVPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glDeleteQueryResourceTagNV");
			Functions.glDeleteRenderbuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteRenderbuffers");
			Functions.glDeleteRenderbuffersEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteRenderbuffersEXT");
			Functions.glDeleteRenderbuffersOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteRenderbuffersOES");
			Functions.glDeleteSamplersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteSamplers");
			Functions.glDeleteSemaphoresEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteSemaphoresEXT");
			Functions.glDeleteShaderPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeleteShader");
			Functions.glDeleteStatesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteStatesNV");
			Functions.glDeleteSyncPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glDeleteSync");
			Functions.glDeleteSyncAPPLEPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glDeleteSyncAPPLE");
			Functions.glDeleteTexturesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteTextures");
			Functions.glDeleteTexturesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteTexturesEXT");
			Functions.glDeleteTransformFeedbacksPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteTransformFeedbacks");
			Functions.glDeleteTransformFeedbacksNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteTransformFeedbacksNV");
			Functions.glDeleteVertexArraysPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteVertexArrays");
			Functions.glDeleteVertexArraysAPPLEPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteVertexArraysAPPLE");
			Functions.glDeleteVertexArraysOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDeleteVertexArraysOES");
			Functions.glDeleteVertexShaderEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDeleteVertexShaderEXT");
			Functions.glDepthBoundsEXTPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glDepthBoundsEXT");
			Functions.glDepthBoundsdNVPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glDepthBoundsdNV");
			Functions.glDepthFuncPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glDepthFunc");
			Functions.glDepthMaskPtr = (delegate* unmanaged<bool, void>)Functions.LoadFunction("glDepthMask");
			Functions.glDepthRangePtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glDepthRange");
			Functions.glDepthRangeArrayfvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glDepthRangeArrayfvNV");
			Functions.glDepthRangeArrayfvOESPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glDepthRangeArrayfvOES");
			Functions.glDepthRangeArrayvPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glDepthRangeArrayv");
			Functions.glDepthRangeIndexedPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glDepthRangeIndexed");
			Functions.glDepthRangeIndexedfNVPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glDepthRangeIndexedfNV");
			Functions.glDepthRangeIndexedfOESPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glDepthRangeIndexedfOES");
			Functions.glDepthRangedNVPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glDepthRangedNV");
			Functions.glDepthRangefPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glDepthRangef");
			Functions.glDepthRangefOESPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glDepthRangefOES");
			Functions.glDepthRangexPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDepthRangex");
			Functions.glDepthRangexOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glDepthRangexOES");
			Functions.glDetachObjectARBPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glDetachObjectARB");
			Functions.glDetachShaderPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glDetachShader");
			Functions.glDetailTexFuncSGISPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glDetailTexFuncSGIS");
			Functions.glDisablePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glDisable");
			Functions.glDisableClientStatePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glDisableClientState");
			Functions.glDisableClientStateIndexedEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableClientStateIndexedEXT");
			Functions.glDisableClientStateiEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableClientStateiEXT");
			Functions.glDisableDriverControlQCOMPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDisableDriverControlQCOM");
			Functions.glDisableIndexedEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableIndexedEXT");
			Functions.glDisableVariantClientStateEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDisableVariantClientStateEXT");
			Functions.glDisableVertexArrayAttribPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glDisableVertexArrayAttrib");
			Functions.glDisableVertexArrayAttribEXTPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glDisableVertexArrayAttribEXT");
			Functions.glDisableVertexArrayEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glDisableVertexArrayEXT");
			Functions.glDisableVertexAttribAPPLEPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glDisableVertexAttribAPPLE");
			Functions.glDisableVertexAttribArrayPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDisableVertexAttribArray");
			Functions.glDisableVertexAttribArrayARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDisableVertexAttribArrayARB");
			Functions.glDisableiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisablei");
			Functions.glDisableiEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableiEXT");
			Functions.glDisableiNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableiNV");
			Functions.glDisableiOESPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDisableiOES");
			Functions.glDiscardFramebufferEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glDiscardFramebufferEXT");
			Functions.glDispatchComputePtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glDispatchCompute");
			Functions.glDispatchComputeGroupSizeARBPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glDispatchComputeGroupSizeARB");
			Functions.glDispatchComputeIndirectPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDispatchComputeIndirect");
			Functions.glDrawArraysPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glDrawArrays");
			Functions.glDrawArraysEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glDrawArraysEXT");
			Functions.glDrawArraysIndirectPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glDrawArraysIndirect");
			Functions.glDrawArraysInstancedPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawArraysInstanced");
			Functions.glDrawArraysInstancedANGLEPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawArraysInstancedANGLE");
			Functions.glDrawArraysInstancedARBPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawArraysInstancedARB");
			Functions.glDrawArraysInstancedBaseInstancePtr = (delegate* unmanaged<int, int, int, int, uint, void>)Functions.LoadFunction("glDrawArraysInstancedBaseInstance");
			Functions.glDrawArraysInstancedBaseInstanceEXTPtr = (delegate* unmanaged<int, int, int, int, uint, void>)Functions.LoadFunction("glDrawArraysInstancedBaseInstanceEXT");
			Functions.glDrawArraysInstancedEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawArraysInstancedEXT");
			Functions.glDrawArraysInstancedNVPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawArraysInstancedNV");
			Functions.glDrawBufferPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glDrawBuffer");
			Functions.glDrawBuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDrawBuffers");
			Functions.glDrawBuffersARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDrawBuffersARB");
			Functions.glDrawBuffersATIPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDrawBuffersATI");
			Functions.glDrawBuffersEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDrawBuffersEXT");
			Functions.glDrawBuffersIndexedEXTPtr = (delegate* unmanaged<int, uint*, int*, void>)Functions.LoadFunction("glDrawBuffersIndexedEXT");
			Functions.glDrawBuffersNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glDrawBuffersNV");
			Functions.glDrawCommandsAddressNVPtr = (delegate* unmanaged<int, ulong*, int*, uint, void>)Functions.LoadFunction("glDrawCommandsAddressNV");
			Functions.glDrawCommandsNVPtr = (delegate* unmanaged<int, uint, uint*, int*, uint, void>)Functions.LoadFunction("glDrawCommandsNV");
			Functions.glDrawCommandsStatesAddressNVPtr = (delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void>)Functions.LoadFunction("glDrawCommandsStatesAddressNV");
			Functions.glDrawCommandsStatesNVPtr = (delegate* unmanaged<uint, uint*, int*, uint*, uint*, uint, void>)Functions.LoadFunction("glDrawCommandsStatesNV");
			Functions.glDrawElementArrayAPPLEPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glDrawElementArrayAPPLE");
			Functions.glDrawElementArrayATIPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glDrawElementArrayATI");
			Functions.glDrawElementsPtr = (delegate* unmanaged<int, int, int, void*, void>)Functions.LoadFunction("glDrawElements");
			Functions.glDrawElementsBaseVertexPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsBaseVertex");
			Functions.glDrawElementsBaseVertexEXTPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsBaseVertexEXT");
			Functions.glDrawElementsBaseVertexOESPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsBaseVertexOES");
			Functions.glDrawElementsIndirectPtr = (delegate* unmanaged<int, int, void*, void>)Functions.LoadFunction("glDrawElementsIndirect");
			Functions.glDrawElementsInstancedPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsInstanced");
			Functions.glDrawElementsInstancedANGLEPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsInstancedANGLE");
			Functions.glDrawElementsInstancedARBPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsInstancedARB");
			Functions.glDrawElementsInstancedBaseInstancePtr = (delegate* unmanaged<int, int, int, void*, int, uint, void>)Functions.LoadFunction("glDrawElementsInstancedBaseInstance");
			Functions.glDrawElementsInstancedBaseInstanceEXTPtr = (delegate* unmanaged<int, int, int, void*, int, uint, void>)Functions.LoadFunction("glDrawElementsInstancedBaseInstanceEXT");
			Functions.glDrawElementsInstancedBaseVertexPtr = (delegate* unmanaged<int, int, int, void*, int, int, void>)Functions.LoadFunction("glDrawElementsInstancedBaseVertex");
			Functions.glDrawElementsInstancedBaseVertexBaseInstancePtr = (delegate* unmanaged<int, int, int, void*, int, int, uint, void>)Functions.LoadFunction("glDrawElementsInstancedBaseVertexBaseInstance");
			Functions.glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr = (delegate* unmanaged<int, int, int, void*, int, int, uint, void>)Functions.LoadFunction("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
			Functions.glDrawElementsInstancedBaseVertexEXTPtr = (delegate* unmanaged<int, int, int, void*, int, int, void>)Functions.LoadFunction("glDrawElementsInstancedBaseVertexEXT");
			Functions.glDrawElementsInstancedBaseVertexOESPtr = (delegate* unmanaged<int, int, int, void*, int, int, void>)Functions.LoadFunction("glDrawElementsInstancedBaseVertexOES");
			Functions.glDrawElementsInstancedEXTPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsInstancedEXT");
			Functions.glDrawElementsInstancedNVPtr = (delegate* unmanaged<int, int, int, void*, int, void>)Functions.LoadFunction("glDrawElementsInstancedNV");
			Functions.glDrawMeshArraysSUNPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glDrawMeshArraysSUN");
			Functions.glDrawMeshTasksNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glDrawMeshTasksNV");
			Functions.glDrawMeshTasksIndirectNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glDrawMeshTasksIndirectNV");
			Functions.glDrawPixelsPtr = (delegate* unmanaged<int, int, int, int, void*, void>)Functions.LoadFunction("glDrawPixels");
			Functions.glDrawRangeElementArrayAPPLEPtr = (delegate* unmanaged<int, uint, uint, int, int, void>)Functions.LoadFunction("glDrawRangeElementArrayAPPLE");
			Functions.glDrawRangeElementArrayATIPtr = (delegate* unmanaged<int, uint, uint, int, void>)Functions.LoadFunction("glDrawRangeElementArrayATI");
			Functions.glDrawRangeElementsPtr = (delegate* unmanaged<int, uint, uint, int, int, void*, void>)Functions.LoadFunction("glDrawRangeElements");
			Functions.glDrawRangeElementsBaseVertexPtr = (delegate* unmanaged<int, uint, uint, int, int, void*, int, void>)Functions.LoadFunction("glDrawRangeElementsBaseVertex");
			Functions.glDrawRangeElementsBaseVertexEXTPtr = (delegate* unmanaged<int, uint, uint, int, int, void*, int, void>)Functions.LoadFunction("glDrawRangeElementsBaseVertexEXT");
			Functions.glDrawRangeElementsBaseVertexOESPtr = (delegate* unmanaged<int, uint, uint, int, int, void*, int, void>)Functions.LoadFunction("glDrawRangeElementsBaseVertexOES");
			Functions.glDrawRangeElementsEXTPtr = (delegate* unmanaged<int, uint, uint, int, int, void*, void>)Functions.LoadFunction("glDrawRangeElementsEXT");
			Functions.glDrawTexfOESPtr = (delegate* unmanaged<float, float, float, float, float, void>)Functions.LoadFunction("glDrawTexfOES");
			Functions.glDrawTexfvOESPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glDrawTexfvOES");
			Functions.glDrawTexiOESPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glDrawTexiOES");
			Functions.glDrawTexivOESPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glDrawTexivOES");
			Functions.glDrawTexsOESPtr = (delegate* unmanaged<short, short, short, short, short, void>)Functions.LoadFunction("glDrawTexsOES");
			Functions.glDrawTexsvOESPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glDrawTexsvOES");
			Functions.glDrawTextureNVPtr = (delegate* unmanaged<uint, uint, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glDrawTextureNV");
			Functions.glDrawTexxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glDrawTexxOES");
			Functions.glDrawTexxvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glDrawTexxvOES");
			Functions.glDrawTransformFeedbackPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDrawTransformFeedback");
			Functions.glDrawTransformFeedbackEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDrawTransformFeedbackEXT");
			Functions.glDrawTransformFeedbackInstancedPtr = (delegate* unmanaged<int, uint, int, void>)Functions.LoadFunction("glDrawTransformFeedbackInstanced");
			Functions.glDrawTransformFeedbackInstancedEXTPtr = (delegate* unmanaged<int, uint, int, void>)Functions.LoadFunction("glDrawTransformFeedbackInstancedEXT");
			Functions.glDrawTransformFeedbackNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glDrawTransformFeedbackNV");
			Functions.glDrawTransformFeedbackStreamPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glDrawTransformFeedbackStream");
			Functions.glDrawTransformFeedbackStreamInstancedPtr = (delegate* unmanaged<int, uint, uint, int, void>)Functions.LoadFunction("glDrawTransformFeedbackStreamInstanced");
			Functions.glEGLImageTargetRenderbufferStorageOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glEGLImageTargetRenderbufferStorageOES");
			Functions.glEGLImageTargetTexStorageEXTPtr = (delegate* unmanaged<int, IntPtr, int*, void>)Functions.LoadFunction("glEGLImageTargetTexStorageEXT");
			Functions.glEGLImageTargetTexture2DOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glEGLImageTargetTexture2DOES");
			Functions.glEGLImageTargetTextureStorageEXTPtr = (delegate* unmanaged<uint, IntPtr, int*, void>)Functions.LoadFunction("glEGLImageTargetTextureStorageEXT");
			Functions.glEdgeFlagPtr = (delegate* unmanaged<bool, void>)Functions.LoadFunction("glEdgeFlag");
			Functions.glEdgeFlagFormatNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEdgeFlagFormatNV");
			Functions.glEdgeFlagPointerPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glEdgeFlagPointer");
			Functions.glEdgeFlagPointerEXTPtr = (delegate* unmanaged<int, int, bool*, void>)Functions.LoadFunction("glEdgeFlagPointerEXT");
			Functions.glEdgeFlagPointerListIBMPtr = (delegate* unmanaged<int, bool*, int, void>)Functions.LoadFunction("glEdgeFlagPointerListIBM");
			Functions.glEdgeFlagvPtr = (delegate* unmanaged<bool*, void>)Functions.LoadFunction("glEdgeFlagv");
			Functions.glElementPointerAPPLEPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glElementPointerAPPLE");
			Functions.glElementPointerATIPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glElementPointerATI");
			Functions.glEnablePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEnable");
			Functions.glEnableClientStatePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEnableClientState");
			Functions.glEnableClientStateIndexedEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableClientStateIndexedEXT");
			Functions.glEnableClientStateiEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableClientStateiEXT");
			Functions.glEnableDriverControlQCOMPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEnableDriverControlQCOM");
			Functions.glEnableIndexedEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableIndexedEXT");
			Functions.glEnableVariantClientStateEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEnableVariantClientStateEXT");
			Functions.glEnableVertexArrayAttribPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glEnableVertexArrayAttrib");
			Functions.glEnableVertexArrayAttribEXTPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glEnableVertexArrayAttribEXT");
			Functions.glEnableVertexArrayEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glEnableVertexArrayEXT");
			Functions.glEnableVertexAttribAPPLEPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glEnableVertexAttribAPPLE");
			Functions.glEnableVertexAttribArrayPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEnableVertexAttribArray");
			Functions.glEnableVertexAttribArrayARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEnableVertexAttribArrayARB");
			Functions.glEnableiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnablei");
			Functions.glEnableiEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableiEXT");
			Functions.glEnableiNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableiNV");
			Functions.glEnableiOESPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEnableiOES");
			Functions.glEndPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEnd");
			Functions.glEndConditionalRenderPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndConditionalRender");
			Functions.glEndConditionalRenderNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndConditionalRenderNV");
			Functions.glEndConditionalRenderNVXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndConditionalRenderNVX");
			Functions.glEndFragmentShaderATIPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndFragmentShaderATI");
			Functions.glEndListPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndList");
			Functions.glEndOcclusionQueryNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndOcclusionQueryNV");
			Functions.glEndPerfMonitorAMDPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEndPerfMonitorAMD");
			Functions.glEndPerfQueryINTELPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEndPerfQueryINTEL");
			Functions.glEndQueryPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEndQuery");
			Functions.glEndQueryARBPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEndQueryARB");
			Functions.glEndQueryEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEndQueryEXT");
			Functions.glEndQueryIndexedPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glEndQueryIndexed");
			Functions.glEndTilingQCOMPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEndTilingQCOM");
			Functions.glEndTransformFeedbackPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndTransformFeedback");
			Functions.glEndTransformFeedbackEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndTransformFeedbackEXT");
			Functions.glEndTransformFeedbackNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndTransformFeedbackNV");
			Functions.glEndVertexShaderEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEndVertexShaderEXT");
			Functions.glEndVideoCaptureNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glEndVideoCaptureNV");
			Functions.glEvalCoord1dPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glEvalCoord1d");
			Functions.glEvalCoord1dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glEvalCoord1dv");
			Functions.glEvalCoord1fPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glEvalCoord1f");
			Functions.glEvalCoord1fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glEvalCoord1fv");
			Functions.glEvalCoord1xOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glEvalCoord1xOES");
			Functions.glEvalCoord1xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glEvalCoord1xvOES");
			Functions.glEvalCoord2dPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glEvalCoord2d");
			Functions.glEvalCoord2dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glEvalCoord2dv");
			Functions.glEvalCoord2fPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glEvalCoord2f");
			Functions.glEvalCoord2fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glEvalCoord2fv");
			Functions.glEvalCoord2xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glEvalCoord2xOES");
			Functions.glEvalCoord2xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glEvalCoord2xvOES");
			Functions.glEvalMapsNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glEvalMapsNV");
			Functions.glEvalMesh1Ptr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glEvalMesh1");
			Functions.glEvalMesh2Ptr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glEvalMesh2");
			Functions.glEvalPoint1Ptr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glEvalPoint1");
			Functions.glEvalPoint2Ptr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glEvalPoint2");
			Functions.glEvaluateDepthValuesARBPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glEvaluateDepthValuesARB");
			Functions.glExecuteProgramNVPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glExecuteProgramNV");
			Functions.glExtGetBufferPointervQCOMPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glExtGetBufferPointervQCOM");
			Functions.glExtGetBuffersQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetBuffersQCOM");
			Functions.glExtGetFramebuffersQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetFramebuffersQCOM");
			Functions.glExtGetProgramBinarySourceQCOMPtr = (delegate* unmanaged<uint, int, byte*, int*, void>)Functions.LoadFunction("glExtGetProgramBinarySourceQCOM");
			Functions.glExtGetProgramsQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetProgramsQCOM");
			Functions.glExtGetRenderbuffersQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetRenderbuffersQCOM");
			Functions.glExtGetShadersQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetShadersQCOM");
			Functions.glExtGetTexLevelParameterivQCOMPtr = (delegate* unmanaged<uint, int, int, int, int*, void>)Functions.LoadFunction("glExtGetTexLevelParameterivQCOM");
			Functions.glExtGetTexSubImageQCOMPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glExtGetTexSubImageQCOM");
			Functions.glExtGetTexturesQCOMPtr = (delegate* unmanaged<uint*, int, int*, void>)Functions.LoadFunction("glExtGetTexturesQCOM");
			Functions.glExtIsProgramBinaryQCOMPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glExtIsProgramBinaryQCOM");
			Functions.glExtTexObjectStateOverrideiQCOMPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glExtTexObjectStateOverrideiQCOM");
			Functions.glExtractComponentEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glExtractComponentEXT");
			Functions.glFeedbackBufferPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glFeedbackBuffer");
			Functions.glFeedbackBufferxOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glFeedbackBufferxOES");
			Functions.glFenceSyncPtr = (delegate* unmanaged<int, uint, IntPtr>)Functions.LoadFunction("glFenceSync");
			Functions.glFenceSyncAPPLEPtr = (delegate* unmanaged<int, uint, IntPtr>)Functions.LoadFunction("glFenceSyncAPPLE");
			Functions.glFinalCombinerInputNVPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glFinalCombinerInputNV");
			Functions.glFinishPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFinish");
			Functions.glFinishAsyncSGIXPtr = (delegate* unmanaged<uint*, int>)Functions.LoadFunction("glFinishAsyncSGIX");
			Functions.glFinishFenceAPPLEPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glFinishFenceAPPLE");
			Functions.glFinishFenceNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glFinishFenceNV");
			Functions.glFinishObjectAPPLEPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glFinishObjectAPPLE");
			Functions.glFinishTextureSUNXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFinishTextureSUNX");
			Functions.glFlushPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFlush");
			Functions.glFlushMappedBufferRangePtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glFlushMappedBufferRange");
			Functions.glFlushMappedBufferRangeAPPLEPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glFlushMappedBufferRangeAPPLE");
			Functions.glFlushMappedBufferRangeEXTPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glFlushMappedBufferRangeEXT");
			Functions.glFlushMappedNamedBufferRangePtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glFlushMappedNamedBufferRange");
			Functions.glFlushMappedNamedBufferRangeEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glFlushMappedNamedBufferRangeEXT");
			Functions.glFlushPixelDataRangeNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glFlushPixelDataRangeNV");
			Functions.glFlushRasterSGIXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFlushRasterSGIX");
			Functions.glFlushStaticDataIBMPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glFlushStaticDataIBM");
			Functions.glFlushVertexArrayRangeAPPLEPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glFlushVertexArrayRangeAPPLE");
			Functions.glFlushVertexArrayRangeNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFlushVertexArrayRangeNV");
			Functions.glFogCoordFormatNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glFogCoordFormatNV");
			Functions.glFogCoordPointerPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glFogCoordPointer");
			Functions.glFogCoordPointerEXTPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glFogCoordPointerEXT");
			Functions.glFogCoordPointerListIBMPtr = (delegate* unmanaged<int, int, IntPtr*, int, void>)Functions.LoadFunction("glFogCoordPointerListIBM");
			Functions.glFogCoorddPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glFogCoordd");
			Functions.glFogCoorddEXTPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glFogCoorddEXT");
			Functions.glFogCoorddvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glFogCoorddv");
			Functions.glFogCoorddvEXTPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glFogCoorddvEXT");
			Functions.glFogCoordfPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glFogCoordf");
			Functions.glFogCoordfEXTPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glFogCoordfEXT");
			Functions.glFogCoordfvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glFogCoordfv");
			Functions.glFogCoordfvEXTPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glFogCoordfvEXT");
			Functions.glFogCoordhNVPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glFogCoordhNV");
			Functions.glFogCoordhvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glFogCoordhvNV");
			Functions.glFogFuncSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glFogFuncSGIS");
			Functions.glFogfPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glFogf");
			Functions.glFogfvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glFogfv");
			Functions.glFogiPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glFogi");
			Functions.glFogivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glFogiv");
			Functions.glFogxPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glFogx");
			Functions.glFogxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glFogxOES");
			Functions.glFogxvPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glFogxv");
			Functions.glFogxvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glFogxvOES");
			Functions.glFragmentColorMaterialSGIXPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glFragmentColorMaterialSGIX");
			Functions.glFragmentCoverageColorNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glFragmentCoverageColorNV");
			Functions.glFragmentLightModelfSGIXPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glFragmentLightModelfSGIX");
			Functions.glFragmentLightModelfvSGIXPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glFragmentLightModelfvSGIX");
			Functions.glFragmentLightModeliSGIXPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glFragmentLightModeliSGIX");
			Functions.glFragmentLightModelivSGIXPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glFragmentLightModelivSGIX");
			Functions.glFragmentLightfSGIXPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glFragmentLightfSGIX");
			Functions.glFragmentLightfvSGIXPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glFragmentLightfvSGIX");
			Functions.glFragmentLightiSGIXPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glFragmentLightiSGIX");
			Functions.glFragmentLightivSGIXPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glFragmentLightivSGIX");
			Functions.glFragmentMaterialfSGIXPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glFragmentMaterialfSGIX");
			Functions.glFragmentMaterialfvSGIXPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glFragmentMaterialfvSGIX");
			Functions.glFragmentMaterialiSGIXPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glFragmentMaterialiSGIX");
			Functions.glFragmentMaterialivSGIXPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glFragmentMaterialivSGIX");
			Functions.glFrameTerminatorGREMEDYPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFrameTerminatorGREMEDY");
			Functions.glFrameZoomSGIXPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glFrameZoomSGIX");
			Functions.glFramebufferDrawBufferEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glFramebufferDrawBufferEXT");
			Functions.glFramebufferDrawBuffersEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glFramebufferDrawBuffersEXT");
			Functions.glFramebufferFetchBarrierEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFramebufferFetchBarrierEXT");
			Functions.glFramebufferFetchBarrierQCOMPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glFramebufferFetchBarrierQCOM");
			Functions.glFramebufferFoveationConfigQCOMPtr = (delegate* unmanaged<uint, uint, uint, uint, uint*, void>)Functions.LoadFunction("glFramebufferFoveationConfigQCOM");
			Functions.glFramebufferFoveationParametersQCOMPtr = (delegate* unmanaged<uint, uint, uint, float, float, float, float, float, void>)Functions.LoadFunction("glFramebufferFoveationParametersQCOM");
			Functions.glFramebufferParameteriPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glFramebufferParameteri");
			Functions.glFramebufferPixelLocalStorageSizeEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glFramebufferPixelLocalStorageSizeEXT");
			Functions.glFramebufferReadBufferEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glFramebufferReadBufferEXT");
			Functions.glFramebufferRenderbufferPtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glFramebufferRenderbuffer");
			Functions.glFramebufferRenderbufferEXTPtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glFramebufferRenderbufferEXT");
			Functions.glFramebufferRenderbufferOESPtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glFramebufferRenderbufferOES");
			Functions.glFramebufferSampleLocationsfvARBPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glFramebufferSampleLocationsfvARB");
			Functions.glFramebufferSampleLocationsfvNVPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glFramebufferSampleLocationsfvNV");
			Functions.glFramebufferSamplePositionsfvAMDPtr = (delegate* unmanaged<int, uint, uint, float*, void>)Functions.LoadFunction("glFramebufferSamplePositionsfvAMD");
			Functions.glFramebufferTexturePtr = (delegate* unmanaged<int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture");
			Functions.glFramebufferTexture1DPtr = (delegate* unmanaged<int, int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture1D");
			Functions.glFramebufferTexture1DEXTPtr = (delegate* unmanaged<int, int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture1DEXT");
			Functions.glFramebufferTexture2DPtr = (delegate* unmanaged<int, int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture2D");
			Functions.glFramebufferTexture2DEXTPtr = (delegate* unmanaged<int, int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture2DEXT");
			Functions.glFramebufferTexture2DDownsampleIMGPtr = (delegate* unmanaged<int, int, int, uint, int, int, int, void>)Functions.LoadFunction("glFramebufferTexture2DDownsampleIMG");
			Functions.glFramebufferTexture2DMultisampleEXTPtr = (delegate* unmanaged<int, int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTexture2DMultisampleEXT");
			Functions.glFramebufferTexture2DMultisampleIMGPtr = (delegate* unmanaged<int, int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTexture2DMultisampleIMG");
			Functions.glFramebufferTexture2DOESPtr = (delegate* unmanaged<int, int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTexture2DOES");
			Functions.glFramebufferTexture3DPtr = (delegate* unmanaged<int, int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTexture3D");
			Functions.glFramebufferTexture3DEXTPtr = (delegate* unmanaged<int, int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTexture3DEXT");
			Functions.glFramebufferTexture3DOESPtr = (delegate* unmanaged<int, int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTexture3DOES");
			Functions.glFramebufferTextureARBPtr = (delegate* unmanaged<int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTextureARB");
			Functions.glFramebufferTextureEXTPtr = (delegate* unmanaged<int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTextureEXT");
			Functions.glFramebufferTextureFaceARBPtr = (delegate* unmanaged<int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTextureFaceARB");
			Functions.glFramebufferTextureFaceEXTPtr = (delegate* unmanaged<int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTextureFaceEXT");
			Functions.glFramebufferTextureLayerPtr = (delegate* unmanaged<int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTextureLayer");
			Functions.glFramebufferTextureLayerARBPtr = (delegate* unmanaged<int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTextureLayerARB");
			Functions.glFramebufferTextureLayerEXTPtr = (delegate* unmanaged<int, int, uint, int, int, void>)Functions.LoadFunction("glFramebufferTextureLayerEXT");
			Functions.glFramebufferTextureLayerDownsampleIMGPtr = (delegate* unmanaged<int, int, uint, int, int, int, int, void>)Functions.LoadFunction("glFramebufferTextureLayerDownsampleIMG");
			Functions.glFramebufferTextureMultisampleMultiviewOVRPtr = (delegate* unmanaged<int, int, uint, int, int, int, int, void>)Functions.LoadFunction("glFramebufferTextureMultisampleMultiviewOVR");
			Functions.glFramebufferTextureMultiviewOVRPtr = (delegate* unmanaged<int, int, uint, int, int, int, void>)Functions.LoadFunction("glFramebufferTextureMultiviewOVR");
			Functions.glFramebufferTextureOESPtr = (delegate* unmanaged<int, int, uint, int, void>)Functions.LoadFunction("glFramebufferTextureOES");
			Functions.glFreeObjectBufferATIPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glFreeObjectBufferATI");
			Functions.glFrontFacePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glFrontFace");
			Functions.glFrustumPtr = (delegate* unmanaged<double, double, double, double, double, double, void>)Functions.LoadFunction("glFrustum");
			Functions.glFrustumfPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glFrustumf");
			Functions.glFrustumfOESPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glFrustumfOES");
			Functions.glFrustumxPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glFrustumx");
			Functions.glFrustumxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glFrustumxOES");
			Functions.glGenAsyncMarkersSGIXPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glGenAsyncMarkersSGIX");
			Functions.glGenBuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenBuffers");
			Functions.glGenBuffersARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenBuffersARB");
			Functions.glGenFencesAPPLEPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenFencesAPPLE");
			Functions.glGenFencesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenFencesNV");
			Functions.glGenFragmentShadersATIPtr = (delegate* unmanaged<uint, uint>)Functions.LoadFunction("glGenFragmentShadersATI");
			Functions.glGenFramebuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenFramebuffers");
			Functions.glGenFramebuffersEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenFramebuffersEXT");
			Functions.glGenFramebuffersOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenFramebuffersOES");
			Functions.glGenListsPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glGenLists");
			Functions.glGenNamesAMDPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glGenNamesAMD");
			Functions.glGenOcclusionQueriesNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenOcclusionQueriesNV");
			Functions.glGenPathsNVPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glGenPathsNV");
			Functions.glGenPerfMonitorsAMDPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenPerfMonitorsAMD");
			Functions.glGenProgramPipelinesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenProgramPipelines");
			Functions.glGenProgramPipelinesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenProgramPipelinesEXT");
			Functions.glGenProgramsARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenProgramsARB");
			Functions.glGenProgramsNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenProgramsNV");
			Functions.glGenQueriesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenQueries");
			Functions.glGenQueriesARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenQueriesARB");
			Functions.glGenQueriesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenQueriesEXT");
			Functions.glGenQueryResourceTagNVPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glGenQueryResourceTagNV");
			Functions.glGenRenderbuffersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenRenderbuffers");
			Functions.glGenRenderbuffersEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenRenderbuffersEXT");
			Functions.glGenRenderbuffersOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenRenderbuffersOES");
			Functions.glGenSamplersPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenSamplers");
			Functions.glGenSemaphoresEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenSemaphoresEXT");
			Functions.glGenSymbolsEXTPtr = (delegate* unmanaged<int, int, int, uint, uint>)Functions.LoadFunction("glGenSymbolsEXT");
			Functions.glGenTexturesPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenTextures");
			Functions.glGenTexturesEXTPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenTexturesEXT");
			Functions.glGenTransformFeedbacksPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenTransformFeedbacks");
			Functions.glGenTransformFeedbacksNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenTransformFeedbacksNV");
			Functions.glGenVertexArraysPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenVertexArrays");
			Functions.glGenVertexArraysAPPLEPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenVertexArraysAPPLE");
			Functions.glGenVertexArraysOESPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGenVertexArraysOES");
			Functions.glGenVertexShadersEXTPtr = (delegate* unmanaged<uint, uint>)Functions.LoadFunction("glGenVertexShadersEXT");
			Functions.glGenerateMipmapPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glGenerateMipmap");
			Functions.glGenerateMipmapEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glGenerateMipmapEXT");
			Functions.glGenerateMipmapOESPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glGenerateMipmapOES");
			Functions.glGenerateMultiTexMipmapEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glGenerateMultiTexMipmapEXT");
			Functions.glGenerateTextureMipmapPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glGenerateTextureMipmap");
			Functions.glGenerateTextureMipmapEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glGenerateTextureMipmapEXT");
			Functions.glGetActiveAtomicCounterBufferivPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glGetActiveAtomicCounterBufferiv");
			Functions.glGetActiveAttribPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetActiveAttrib");
			Functions.glGetActiveAttribARBPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetActiveAttribARB");
			Functions.glGetActiveSubroutineNamePtr = (delegate* unmanaged<uint, int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetActiveSubroutineName");
			Functions.glGetActiveSubroutineUniformNamePtr = (delegate* unmanaged<uint, int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetActiveSubroutineUniformName");
			Functions.glGetActiveSubroutineUniformivPtr = (delegate* unmanaged<uint, int, uint, int, int*, void>)Functions.LoadFunction("glGetActiveSubroutineUniformiv");
			Functions.glGetActiveUniformPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetActiveUniform");
			Functions.glGetActiveUniformARBPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetActiveUniformARB");
			Functions.glGetActiveUniformBlockNamePtr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetActiveUniformBlockName");
			Functions.glGetActiveUniformBlockivPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glGetActiveUniformBlockiv");
			Functions.glGetActiveUniformNamePtr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetActiveUniformName");
			Functions.glGetActiveUniformsivPtr = (delegate* unmanaged<uint, int, uint*, int, int*, void>)Functions.LoadFunction("glGetActiveUniformsiv");
			Functions.glGetActiveVaryingNVPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetActiveVaryingNV");
			Functions.glGetArrayObjectfvATIPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetArrayObjectfvATI");
			Functions.glGetArrayObjectivATIPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetArrayObjectivATI");
			Functions.glGetAttachedObjectsARBPtr = (delegate* unmanaged<uint, int, int*, uint*, void>)Functions.LoadFunction("glGetAttachedObjectsARB");
			Functions.glGetAttachedShadersPtr = (delegate* unmanaged<uint, int, int*, uint*, void>)Functions.LoadFunction("glGetAttachedShaders");
			Functions.glGetAttribLocationPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetAttribLocation");
			Functions.glGetAttribLocationARBPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetAttribLocationARB");
			Functions.glGetBooleanIndexedvEXTPtr = (delegate* unmanaged<int, uint, bool*, void>)Functions.LoadFunction("glGetBooleanIndexedvEXT");
			Functions.glGetBooleani_vPtr = (delegate* unmanaged<int, uint, bool*, void>)Functions.LoadFunction("glGetBooleani_v");
			Functions.glGetBooleanvPtr = (delegate* unmanaged<int, bool*, void>)Functions.LoadFunction("glGetBooleanv");
			Functions.glGetBufferParameteri64vPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glGetBufferParameteri64v");
			Functions.glGetBufferParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetBufferParameteriv");
			Functions.glGetBufferParameterivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetBufferParameterivARB");
			Functions.glGetBufferParameterui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glGetBufferParameterui64vNV");
			Functions.glGetBufferPointervPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetBufferPointerv");
			Functions.glGetBufferPointervARBPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetBufferPointervARB");
			Functions.glGetBufferPointervOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetBufferPointervOES");
			Functions.glGetBufferSubDataPtr = (delegate* unmanaged<int, uint, uint, IntPtr, void>)Functions.LoadFunction("glGetBufferSubData");
			Functions.glGetBufferSubDataARBPtr = (delegate* unmanaged<int, IntPtr, uint, IntPtr, void>)Functions.LoadFunction("glGetBufferSubDataARB");
			Functions.glGetClipPlanePtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glGetClipPlane");
			Functions.glGetClipPlanefPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetClipPlanef");
			Functions.glGetClipPlanefOESPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetClipPlanefOES");
			Functions.glGetClipPlanexPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetClipPlanex");
			Functions.glGetClipPlanexOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetClipPlanexOES");
			Functions.glGetColorTablePtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetColorTable");
			Functions.glGetColorTableEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetColorTableEXT");
			Functions.glGetColorTableParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetColorTableParameterfv");
			Functions.glGetColorTableParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetColorTableParameterfvEXT");
			Functions.glGetColorTableParameterfvSGIPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetColorTableParameterfvSGI");
			Functions.glGetColorTableParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetColorTableParameteriv");
			Functions.glGetColorTableParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetColorTableParameterivEXT");
			Functions.glGetColorTableParameterivSGIPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetColorTableParameterivSGI");
			Functions.glGetColorTableSGIPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetColorTableSGI");
			Functions.glGetCombinerInputParameterfvNVPtr = (delegate* unmanaged<int, int, int, int, float*, void>)Functions.LoadFunction("glGetCombinerInputParameterfvNV");
			Functions.glGetCombinerInputParameterivNVPtr = (delegate* unmanaged<int, int, int, int, int*, void>)Functions.LoadFunction("glGetCombinerInputParameterivNV");
			Functions.glGetCombinerOutputParameterfvNVPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetCombinerOutputParameterfvNV");
			Functions.glGetCombinerOutputParameterivNVPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetCombinerOutputParameterivNV");
			Functions.glGetCombinerStageParameterfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetCombinerStageParameterfvNV");
			Functions.glGetCommandHeaderNVPtr = (delegate* unmanaged<int, uint, uint>)Functions.LoadFunction("glGetCommandHeaderNV");
			Functions.glGetCompressedMultiTexImageEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedMultiTexImageEXT");
			Functions.glGetCompressedTexImagePtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedTexImage");
			Functions.glGetCompressedTexImageARBPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedTexImageARB");
			Functions.glGetCompressedTextureImagePtr = (delegate* unmanaged<uint, int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedTextureImage");
			Functions.glGetCompressedTextureImageEXTPtr = (delegate* unmanaged<uint, int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedTextureImageEXT");
			Functions.glGetCompressedTextureSubImagePtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetCompressedTextureSubImage");
			Functions.glGetConvolutionFilterPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetConvolutionFilter");
			Functions.glGetConvolutionFilterEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetConvolutionFilterEXT");
			Functions.glGetConvolutionParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetConvolutionParameterfv");
			Functions.glGetConvolutionParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetConvolutionParameterfvEXT");
			Functions.glGetConvolutionParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetConvolutionParameteriv");
			Functions.glGetConvolutionParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetConvolutionParameterivEXT");
			Functions.glGetConvolutionParameterxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetConvolutionParameterxvOES");
			Functions.glGetCoverageModulationTableNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetCoverageModulationTableNV");
			Functions.glGetDebugMessageLogPtr = (delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint>)Functions.LoadFunction("glGetDebugMessageLog");
			Functions.glGetDebugMessageLogAMDPtr = (delegate* unmanaged<uint, int, int*, uint*, uint*, int*, byte*, uint>)Functions.LoadFunction("glGetDebugMessageLogAMD");
			Functions.glGetDebugMessageLogARBPtr = (delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint>)Functions.LoadFunction("glGetDebugMessageLogARB");
			Functions.glGetDebugMessageLogKHRPtr = (delegate* unmanaged<uint, int, int*, int*, uint*, int*, int*, byte*, uint>)Functions.LoadFunction("glGetDebugMessageLogKHR");
			Functions.glGetDetailTexFuncSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetDetailTexFuncSGIS");
			Functions.glGetDoubleIndexedvEXTPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glGetDoubleIndexedvEXT");
			Functions.glGetDoublei_vPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glGetDoublei_v");
			Functions.glGetDoublei_vEXTPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glGetDoublei_vEXT");
			Functions.glGetDoublevPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glGetDoublev");
			Functions.glGetDriverControlStringQCOMPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetDriverControlStringQCOM");
			Functions.glGetDriverControlsQCOMPtr = (delegate* unmanaged<int*, int, uint*, void>)Functions.LoadFunction("glGetDriverControlsQCOM");
			Functions.glGetErrorPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetError");
			Functions.glGetFenceivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetFenceivNV");
			Functions.glGetFinalCombinerInputParameterfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetFinalCombinerInputParameterfvNV");
			Functions.glGetFinalCombinerInputParameterivNVPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetFinalCombinerInputParameterivNV");
			Functions.glGetFirstPerfQueryIdINTELPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glGetFirstPerfQueryIdINTEL");
			Functions.glGetFixedvPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetFixedv");
			Functions.glGetFixedvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetFixedvOES");
			Functions.glGetFloatIndexedvEXTPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetFloatIndexedvEXT");
			Functions.glGetFloati_vPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetFloati_v");
			Functions.glGetFloati_vEXTPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetFloati_vEXT");
			Functions.glGetFloati_vNVPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetFloati_vNV");
			Functions.glGetFloati_vOESPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetFloati_vOES");
			Functions.glGetFloatvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetFloatv");
			Functions.glGetFogFuncSGISPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glGetFogFuncSGIS");
			Functions.glGetFragDataIndexPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetFragDataIndex");
			Functions.glGetFragDataIndexEXTPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetFragDataIndexEXT");
			Functions.glGetFragDataLocationPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetFragDataLocation");
			Functions.glGetFragDataLocationEXTPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetFragDataLocationEXT");
			Functions.glGetFragmentLightfvSGIXPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetFragmentLightfvSGIX");
			Functions.glGetFragmentLightivSGIXPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetFragmentLightivSGIX");
			Functions.glGetFragmentMaterialfvSGIXPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetFragmentMaterialfvSGIX");
			Functions.glGetFragmentMaterialivSGIXPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetFragmentMaterialivSGIX");
			Functions.glGetFramebufferAttachmentParameterivPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetFramebufferAttachmentParameteriv");
			Functions.glGetFramebufferAttachmentParameterivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetFramebufferAttachmentParameterivEXT");
			Functions.glGetFramebufferAttachmentParameterivOESPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetFramebufferAttachmentParameterivOES");
			Functions.glGetFramebufferParameterfvAMDPtr = (delegate* unmanaged<int, int, uint, uint, int, float*, void>)Functions.LoadFunction("glGetFramebufferParameterfvAMD");
			Functions.glGetFramebufferParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetFramebufferParameteriv");
			Functions.glGetFramebufferParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetFramebufferParameterivEXT");
			Functions.glGetFramebufferPixelLocalStorageSizeEXTPtr = (delegate* unmanaged<uint, int>)Functions.LoadFunction("glGetFramebufferPixelLocalStorageSizeEXT");
			Functions.glGetGraphicsResetStatusPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetGraphicsResetStatus");
			Functions.glGetGraphicsResetStatusARBPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetGraphicsResetStatusARB");
			Functions.glGetGraphicsResetStatusEXTPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetGraphicsResetStatusEXT");
			Functions.glGetGraphicsResetStatusKHRPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetGraphicsResetStatusKHR");
			Functions.glGetHandleARBPtr = (delegate* unmanaged<int, uint>)Functions.LoadFunction("glGetHandleARB");
			Functions.glGetHistogramPtr = (delegate* unmanaged<int, bool, int, int, IntPtr, void>)Functions.LoadFunction("glGetHistogram");
			Functions.glGetHistogramEXTPtr = (delegate* unmanaged<int, bool, int, int, IntPtr, void>)Functions.LoadFunction("glGetHistogramEXT");
			Functions.glGetHistogramParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetHistogramParameterfv");
			Functions.glGetHistogramParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetHistogramParameterfvEXT");
			Functions.glGetHistogramParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetHistogramParameteriv");
			Functions.glGetHistogramParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetHistogramParameterivEXT");
			Functions.glGetHistogramParameterxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetHistogramParameterxvOES");
			Functions.glGetImageHandleARBPtr = (delegate* unmanaged<uint, int, bool, int, int, ulong>)Functions.LoadFunction("glGetImageHandleARB");
			Functions.glGetImageHandleNVPtr = (delegate* unmanaged<uint, int, bool, int, int, ulong>)Functions.LoadFunction("glGetImageHandleNV");
			Functions.glGetImageTransformParameterfvHPPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetImageTransformParameterfvHP");
			Functions.glGetImageTransformParameterivHPPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetImageTransformParameterivHP");
			Functions.glGetInfoLogARBPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetInfoLogARB");
			Functions.glGetInstrumentsSGIXPtr = (delegate* unmanaged<int>)Functions.LoadFunction("glGetInstrumentsSGIX");
			Functions.glGetInteger64i_vPtr = (delegate* unmanaged<int, uint, long*, void>)Functions.LoadFunction("glGetInteger64i_v");
			Functions.glGetInteger64vPtr = (delegate* unmanaged<int, long*, void>)Functions.LoadFunction("glGetInteger64v");
			Functions.glGetInteger64vAPPLEPtr = (delegate* unmanaged<int, long*, void>)Functions.LoadFunction("glGetInteger64vAPPLE");
			Functions.glGetIntegerIndexedvEXTPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glGetIntegerIndexedvEXT");
			Functions.glGetIntegeri_vPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glGetIntegeri_v");
			Functions.glGetIntegeri_vEXTPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glGetIntegeri_vEXT");
			Functions.glGetIntegerui64i_vNVPtr = (delegate* unmanaged<int, uint, ulong*, void>)Functions.LoadFunction("glGetIntegerui64i_vNV");
			Functions.glGetIntegerui64vNVPtr = (delegate* unmanaged<int, ulong*, void>)Functions.LoadFunction("glGetIntegerui64vNV");
			Functions.glGetIntegervPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glGetIntegerv");
			Functions.glGetInternalformatSampleivNVPtr = (delegate* unmanaged<int, int, int, int, int, int*, void>)Functions.LoadFunction("glGetInternalformatSampleivNV");
			Functions.glGetInternalformati64vPtr = (delegate* unmanaged<int, int, int, int, long*, void>)Functions.LoadFunction("glGetInternalformati64v");
			Functions.glGetInternalformativPtr = (delegate* unmanaged<int, int, int, int, int*, void>)Functions.LoadFunction("glGetInternalformativ");
			Functions.glGetInvariantBooleanvEXTPtr = (delegate* unmanaged<uint, int, bool*, void>)Functions.LoadFunction("glGetInvariantBooleanvEXT");
			Functions.glGetInvariantFloatvEXTPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetInvariantFloatvEXT");
			Functions.glGetInvariantIntegervEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetInvariantIntegervEXT");
			Functions.glGetLightfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetLightfv");
			Functions.glGetLightivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetLightiv");
			Functions.glGetLightxOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetLightxOES");
			Functions.glGetLightxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetLightxv");
			Functions.glGetLightxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetLightxvOES");
			Functions.glGetListParameterfvSGIXPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetListParameterfvSGIX");
			Functions.glGetListParameterivSGIXPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetListParameterivSGIX");
			Functions.glGetLocalConstantBooleanvEXTPtr = (delegate* unmanaged<uint, int, bool*, void>)Functions.LoadFunction("glGetLocalConstantBooleanvEXT");
			Functions.glGetLocalConstantFloatvEXTPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetLocalConstantFloatvEXT");
			Functions.glGetLocalConstantIntegervEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetLocalConstantIntegervEXT");
			Functions.glGetMapAttribParameterfvNVPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glGetMapAttribParameterfvNV");
			Functions.glGetMapAttribParameterivNVPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glGetMapAttribParameterivNV");
			Functions.glGetMapControlPointsNVPtr = (delegate* unmanaged<int, uint, int, int, int, bool, IntPtr, void>)Functions.LoadFunction("glGetMapControlPointsNV");
			Functions.glGetMapParameterfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetMapParameterfvNV");
			Functions.glGetMapParameterivNVPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetMapParameterivNV");
			Functions.glGetMapdvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glGetMapdv");
			Functions.glGetMapfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetMapfv");
			Functions.glGetMapivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetMapiv");
			Functions.glGetMapxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetMapxvOES");
			Functions.glGetMaterialfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetMaterialfv");
			Functions.glGetMaterialivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetMaterialiv");
			Functions.glGetMaterialxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glGetMaterialxOES");
			Functions.glGetMaterialxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetMaterialxv");
			Functions.glGetMaterialxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetMaterialxvOES");
			Functions.glGetMemoryObjectDetachedResourcesuivNVPtr = (delegate* unmanaged<uint, int, int, int, uint*, void>)Functions.LoadFunction("glGetMemoryObjectDetachedResourcesuivNV");
			Functions.glGetMemoryObjectParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetMemoryObjectParameterivEXT");
			Functions.glGetMinmaxPtr = (delegate* unmanaged<int, bool, int, int, IntPtr, void>)Functions.LoadFunction("glGetMinmax");
			Functions.glGetMinmaxEXTPtr = (delegate* unmanaged<int, bool, int, int, IntPtr, void>)Functions.LoadFunction("glGetMinmaxEXT");
			Functions.glGetMinmaxParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetMinmaxParameterfv");
			Functions.glGetMinmaxParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetMinmaxParameterfvEXT");
			Functions.glGetMinmaxParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetMinmaxParameteriv");
			Functions.glGetMinmaxParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetMinmaxParameterivEXT");
			Functions.glGetMultiTexEnvfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetMultiTexEnvfvEXT");
			Functions.glGetMultiTexEnvivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetMultiTexEnvivEXT");
			Functions.glGetMultiTexGendvEXTPtr = (delegate* unmanaged<int, int, int, double*, void>)Functions.LoadFunction("glGetMultiTexGendvEXT");
			Functions.glGetMultiTexGenfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetMultiTexGenfvEXT");
			Functions.glGetMultiTexGenivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetMultiTexGenivEXT");
			Functions.glGetMultiTexImageEXTPtr = (delegate* unmanaged<int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetMultiTexImageEXT");
			Functions.glGetMultiTexLevelParameterfvEXTPtr = (delegate* unmanaged<int, int, int, int, float*, void>)Functions.LoadFunction("glGetMultiTexLevelParameterfvEXT");
			Functions.glGetMultiTexLevelParameterivEXTPtr = (delegate* unmanaged<int, int, int, int, int*, void>)Functions.LoadFunction("glGetMultiTexLevelParameterivEXT");
			Functions.glGetMultiTexParameterIivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetMultiTexParameterIivEXT");
			Functions.glGetMultiTexParameterIuivEXTPtr = (delegate* unmanaged<int, int, int, uint*, void>)Functions.LoadFunction("glGetMultiTexParameterIuivEXT");
			Functions.glGetMultiTexParameterfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetMultiTexParameterfvEXT");
			Functions.glGetMultiTexParameterivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetMultiTexParameterivEXT");
			Functions.glGetMultisamplefvPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetMultisamplefv");
			Functions.glGetMultisamplefvNVPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetMultisamplefvNV");
			Functions.glGetNamedBufferParameteri64vPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetNamedBufferParameteri64v");
			Functions.glGetNamedBufferParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedBufferParameteriv");
			Functions.glGetNamedBufferParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedBufferParameterivEXT");
			Functions.glGetNamedBufferParameterui64vNVPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetNamedBufferParameterui64vNV");
			Functions.glGetNamedBufferPointervPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetNamedBufferPointerv");
			Functions.glGetNamedBufferPointervEXTPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetNamedBufferPointervEXT");
			Functions.glGetNamedBufferSubDataPtr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glGetNamedBufferSubData");
			Functions.glGetNamedBufferSubDataEXTPtr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glGetNamedBufferSubDataEXT");
			Functions.glGetNamedFramebufferParameterfvAMDPtr = (delegate* unmanaged<uint, int, uint, uint, int, float*, void>)Functions.LoadFunction("glGetNamedFramebufferParameterfvAMD");
			Functions.glGetNamedFramebufferAttachmentParameterivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetNamedFramebufferAttachmentParameteriv");
			Functions.glGetNamedFramebufferAttachmentParameterivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetNamedFramebufferAttachmentParameterivEXT");
			Functions.glGetNamedFramebufferParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedFramebufferParameteriv");
			Functions.glGetNamedFramebufferParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedFramebufferParameterivEXT");
			Functions.glGetNamedProgramLocalParameterIivEXTPtr = (delegate* unmanaged<uint, int, uint, int*, void>)Functions.LoadFunction("glGetNamedProgramLocalParameterIivEXT");
			Functions.glGetNamedProgramLocalParameterIuivEXTPtr = (delegate* unmanaged<uint, int, uint, uint*, void>)Functions.LoadFunction("glGetNamedProgramLocalParameterIuivEXT");
			Functions.glGetNamedProgramLocalParameterdvEXTPtr = (delegate* unmanaged<uint, int, uint, double*, void>)Functions.LoadFunction("glGetNamedProgramLocalParameterdvEXT");
			Functions.glGetNamedProgramLocalParameterfvEXTPtr = (delegate* unmanaged<uint, int, uint, float*, void>)Functions.LoadFunction("glGetNamedProgramLocalParameterfvEXT");
			Functions.glGetNamedProgramStringEXTPtr = (delegate* unmanaged<uint, int, int, IntPtr, void>)Functions.LoadFunction("glGetNamedProgramStringEXT");
			Functions.glGetNamedProgramivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetNamedProgramivEXT");
			Functions.glGetNamedRenderbufferParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedRenderbufferParameteriv");
			Functions.glGetNamedRenderbufferParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetNamedRenderbufferParameterivEXT");
			Functions.glGetNamedStringARBPtr = (delegate* unmanaged<int, byte*, int, int*, byte*, void>)Functions.LoadFunction("glGetNamedStringARB");
			Functions.glGetNamedStringivARBPtr = (delegate* unmanaged<int, byte*, int, int*, void>)Functions.LoadFunction("glGetNamedStringivARB");
			Functions.glGetNextPerfQueryIdINTELPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glGetNextPerfQueryIdINTEL");
			Functions.glGetObjectBufferfvATIPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetObjectBufferfvATI");
			Functions.glGetObjectBufferivATIPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetObjectBufferivATI");
			Functions.glGetObjectLabelPtr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetObjectLabel");
			Functions.glGetObjectLabelEXTPtr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetObjectLabelEXT");
			Functions.glGetObjectLabelKHRPtr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetObjectLabelKHR");
			Functions.glGetObjectParameterfvARBPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetObjectParameterfvARB");
			Functions.glGetObjectParameterivAPPLEPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glGetObjectParameterivAPPLE");
			Functions.glGetObjectParameterivARBPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetObjectParameterivARB");
			Functions.glGetObjectPtrLabelPtr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)Functions.LoadFunction("glGetObjectPtrLabel");
			Functions.glGetObjectPtrLabelKHRPtr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)Functions.LoadFunction("glGetObjectPtrLabelKHR");
			Functions.glGetOcclusionQueryivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetOcclusionQueryivNV");
			Functions.glGetOcclusionQueryuivNVPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetOcclusionQueryuivNV");
			Functions.glGetPathColorGenfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetPathColorGenfvNV");
			Functions.glGetPathColorGenivNVPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetPathColorGenivNV");
			Functions.glGetPathCommandsNVPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glGetPathCommandsNV");
			Functions.glGetPathCoordsNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glGetPathCoordsNV");
			Functions.glGetPathDashArrayNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glGetPathDashArrayNV");
			Functions.glGetPathLengthNVPtr = (delegate* unmanaged<uint, int, int, float>)Functions.LoadFunction("glGetPathLengthNV");
			Functions.glGetPathMetricRangeNVPtr = (delegate* unmanaged<uint, uint, int, int, float*, void>)Functions.LoadFunction("glGetPathMetricRangeNV");
			Functions.glGetPathMetricsNVPtr = (delegate* unmanaged<uint, int, int, IntPtr, uint, int, float*, void>)Functions.LoadFunction("glGetPathMetricsNV");
			Functions.glGetPathParameterfvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetPathParameterfvNV");
			Functions.glGetPathParameterivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetPathParameterivNV");
			Functions.glGetPathSpacingNVPtr = (delegate* unmanaged<int, int, int, IntPtr, uint, float, float, int, float*, void>)Functions.LoadFunction("glGetPathSpacingNV");
			Functions.glGetPathTexGenfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetPathTexGenfvNV");
			Functions.glGetPathTexGenivNVPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetPathTexGenivNV");
			Functions.glGetPerfCounterInfoINTELPtr = (delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void>)Functions.LoadFunction("glGetPerfCounterInfoINTEL");
			Functions.glGetPerfMonitorCounterDataAMDPtr = (delegate* unmanaged<uint, int, int, uint*, int*, void>)Functions.LoadFunction("glGetPerfMonitorCounterDataAMD");
			Functions.glGetPerfMonitorCounterInfoAMDPtr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)Functions.LoadFunction("glGetPerfMonitorCounterInfoAMD");
			Functions.glGetPerfMonitorCounterStringAMDPtr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetPerfMonitorCounterStringAMD");
			Functions.glGetPerfMonitorCountersAMDPtr = (delegate* unmanaged<uint, int*, int*, int, uint*, void>)Functions.LoadFunction("glGetPerfMonitorCountersAMD");
			Functions.glGetPerfMonitorGroupStringAMDPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetPerfMonitorGroupStringAMD");
			Functions.glGetPerfMonitorGroupsAMDPtr = (delegate* unmanaged<int*, int, uint*, void>)Functions.LoadFunction("glGetPerfMonitorGroupsAMD");
			Functions.glGetPerfQueryDataINTELPtr = (delegate* unmanaged<uint, uint, int, IntPtr, uint*, void>)Functions.LoadFunction("glGetPerfQueryDataINTEL");
			Functions.glGetPerfQueryIdByNameINTELPtr = (delegate* unmanaged<byte*, uint*, void>)Functions.LoadFunction("glGetPerfQueryIdByNameINTEL");
			Functions.glGetPerfQueryInfoINTELPtr = (delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void>)Functions.LoadFunction("glGetPerfQueryInfoINTEL");
			Functions.glGetPixelMapfvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetPixelMapfv");
			Functions.glGetPixelMapuivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glGetPixelMapuiv");
			Functions.glGetPixelMapusvPtr = (delegate* unmanaged<int, ushort*, void>)Functions.LoadFunction("glGetPixelMapusv");
			Functions.glGetPixelMapxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetPixelMapxv");
			Functions.glGetPixelTexGenParameterfvSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetPixelTexGenParameterfvSGIS");
			Functions.glGetPixelTexGenParameterivSGISPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glGetPixelTexGenParameterivSGIS");
			Functions.glGetPixelTransformParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetPixelTransformParameterfvEXT");
			Functions.glGetPixelTransformParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetPixelTransformParameterivEXT");
			Functions.glGetPointerIndexedvEXTPtr = (delegate* unmanaged<int, uint, IntPtr*, void>)Functions.LoadFunction("glGetPointerIndexedvEXT");
			Functions.glGetPointeri_vEXTPtr = (delegate* unmanaged<int, uint, IntPtr*, void>)Functions.LoadFunction("glGetPointeri_vEXT");
			Functions.glGetPointervPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetPointerv");
			Functions.glGetPointervEXTPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetPointervEXT");
			Functions.glGetPointervKHRPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glGetPointervKHR");
			Functions.glGetPolygonStipplePtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glGetPolygonStipple");
			Functions.glGetProgramBinaryPtr = (delegate* unmanaged<uint, int, int*, int*, IntPtr, void>)Functions.LoadFunction("glGetProgramBinary");
			Functions.glGetProgramBinaryOESPtr = (delegate* unmanaged<uint, int, int*, int*, IntPtr, void>)Functions.LoadFunction("glGetProgramBinaryOES");
			Functions.glGetProgramEnvParameterIivNVPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glGetProgramEnvParameterIivNV");
			Functions.glGetProgramEnvParameterIuivNVPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glGetProgramEnvParameterIuivNV");
			Functions.glGetProgramEnvParameterdvARBPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glGetProgramEnvParameterdvARB");
			Functions.glGetProgramEnvParameterfvARBPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetProgramEnvParameterfvARB");
			Functions.glGetProgramInfoLogPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetProgramInfoLog");
			Functions.glGetProgramInterfaceivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetProgramInterfaceiv");
			Functions.glGetProgramLocalParameterIivNVPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glGetProgramLocalParameterIivNV");
			Functions.glGetProgramLocalParameterIuivNVPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glGetProgramLocalParameterIuivNV");
			Functions.glGetProgramLocalParameterdvARBPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glGetProgramLocalParameterdvARB");
			Functions.glGetProgramLocalParameterfvARBPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glGetProgramLocalParameterfvARB");
			Functions.glGetProgramNamedParameterdvNVPtr = (delegate* unmanaged<uint, int, byte*, double*, void>)Functions.LoadFunction("glGetProgramNamedParameterdvNV");
			Functions.glGetProgramNamedParameterfvNVPtr = (delegate* unmanaged<uint, int, byte*, float*, void>)Functions.LoadFunction("glGetProgramNamedParameterfvNV");
			Functions.glGetProgramParameterdvNVPtr = (delegate* unmanaged<int, uint, int, double*, void>)Functions.LoadFunction("glGetProgramParameterdvNV");
			Functions.glGetProgramParameterfvNVPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glGetProgramParameterfvNV");
			Functions.glGetProgramPipelineInfoLogPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetProgramPipelineInfoLog");
			Functions.glGetProgramPipelineInfoLogEXTPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetProgramPipelineInfoLogEXT");
			Functions.glGetProgramPipelineivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetProgramPipelineiv");
			Functions.glGetProgramPipelineivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetProgramPipelineivEXT");
			Functions.glGetProgramResourceIndexPtr = (delegate* unmanaged<uint, int, byte*, uint>)Functions.LoadFunction("glGetProgramResourceIndex");
			Functions.glGetProgramResourceLocationPtr = (delegate* unmanaged<uint, int, byte*, int>)Functions.LoadFunction("glGetProgramResourceLocation");
			Functions.glGetProgramResourceLocationIndexPtr = (delegate* unmanaged<uint, int, byte*, int>)Functions.LoadFunction("glGetProgramResourceLocationIndex");
			Functions.glGetProgramResourceLocationIndexEXTPtr = (delegate* unmanaged<uint, int, byte*, int>)Functions.LoadFunction("glGetProgramResourceLocationIndexEXT");
			Functions.glGetProgramResourceNamePtr = (delegate* unmanaged<uint, int, uint, int, int*, byte*, void>)Functions.LoadFunction("glGetProgramResourceName");
			Functions.glGetProgramResourcefvNVPtr = (delegate* unmanaged<uint, int, uint, int, uint*, int, int*, float*, void>)Functions.LoadFunction("glGetProgramResourcefvNV");
			Functions.glGetProgramResourceivPtr = (delegate* unmanaged<uint, int, uint, int, uint*, int, int*, int*, void>)Functions.LoadFunction("glGetProgramResourceiv");
			Functions.glGetProgramStageivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetProgramStageiv");
			Functions.glGetProgramStringARBPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glGetProgramStringARB");
			Functions.glGetProgramStringNVPtr = (delegate* unmanaged<uint, int, byte*, void>)Functions.LoadFunction("glGetProgramStringNV");
			Functions.glGetProgramSubroutineParameteruivNVPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glGetProgramSubroutineParameteruivNV");
			Functions.glGetProgramivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetProgramiv");
			Functions.glGetProgramivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetProgramivARB");
			Functions.glGetProgramivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetProgramivNV");
			Functions.glGetQueryBufferObjecti64vPtr = (delegate* unmanaged<uint, uint, int, uint, void>)Functions.LoadFunction("glGetQueryBufferObjecti64v");
			Functions.glGetQueryBufferObjectivPtr = (delegate* unmanaged<uint, uint, int, uint, void>)Functions.LoadFunction("glGetQueryBufferObjectiv");
			Functions.glGetQueryBufferObjectui64vPtr = (delegate* unmanaged<uint, uint, int, uint, void>)Functions.LoadFunction("glGetQueryBufferObjectui64v");
			Functions.glGetQueryBufferObjectuivPtr = (delegate* unmanaged<uint, uint, int, uint, void>)Functions.LoadFunction("glGetQueryBufferObjectuiv");
			Functions.glGetQueryIndexedivPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glGetQueryIndexediv");
			Functions.glGetQueryObjecti64vPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetQueryObjecti64v");
			Functions.glGetQueryObjecti64vEXTPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetQueryObjecti64vEXT");
			Functions.glGetQueryObjectivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetQueryObjectiv");
			Functions.glGetQueryObjectivARBPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetQueryObjectivARB");
			Functions.glGetQueryObjectivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetQueryObjectivEXT");
			Functions.glGetQueryObjectui64vPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetQueryObjectui64v");
			Functions.glGetQueryObjectui64vEXTPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetQueryObjectui64vEXT");
			Functions.glGetQueryObjectuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetQueryObjectuiv");
			Functions.glGetQueryObjectuivARBPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetQueryObjectuivARB");
			Functions.glGetQueryObjectuivEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetQueryObjectuivEXT");
			Functions.glGetQueryivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetQueryiv");
			Functions.glGetQueryivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetQueryivARB");
			Functions.glGetQueryivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetQueryivEXT");
			Functions.glGetRenderbufferParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetRenderbufferParameteriv");
			Functions.glGetRenderbufferParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetRenderbufferParameterivEXT");
			Functions.glGetRenderbufferParameterivOESPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetRenderbufferParameterivOES");
			Functions.glGetSamplerParameterIivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetSamplerParameterIiv");
			Functions.glGetSamplerParameterIivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetSamplerParameterIivEXT");
			Functions.glGetSamplerParameterIivOESPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetSamplerParameterIivOES");
			Functions.glGetSamplerParameterIuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetSamplerParameterIuiv");
			Functions.glGetSamplerParameterIuivEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetSamplerParameterIuivEXT");
			Functions.glGetSamplerParameterIuivOESPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetSamplerParameterIuivOES");
			Functions.glGetSamplerParameterfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetSamplerParameterfv");
			Functions.glGetSamplerParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetSamplerParameteriv");
			Functions.glGetSemaphoreParameterui64vEXTPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetSemaphoreParameterui64vEXT");
			Functions.glGetSeparableFilterPtr = (delegate* unmanaged<int, int, int, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glGetSeparableFilter");
			Functions.glGetSeparableFilterEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glGetSeparableFilterEXT");
			Functions.glGetShaderInfoLogPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetShaderInfoLog");
			Functions.glGetShaderPrecisionFormatPtr = (delegate* unmanaged<int, int, int*, int*, void>)Functions.LoadFunction("glGetShaderPrecisionFormat");
			Functions.glGetShaderSourcePtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetShaderSource");
			Functions.glGetShaderSourceARBPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetShaderSourceARB");
			Functions.glGetShaderivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetShaderiv");
			Functions.glGetShadingRateImagePaletteNVPtr = (delegate* unmanaged<uint, uint, int*, void>)Functions.LoadFunction("glGetShadingRateImagePaletteNV");
			Functions.glGetShadingRateSampleLocationivNVPtr = (delegate* unmanaged<int, uint, uint, int*, void>)Functions.LoadFunction("glGetShadingRateSampleLocationivNV");
			Functions.glGetSharpenTexFuncSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetSharpenTexFuncSGIS");
			Functions.glGetStageIndexNVPtr = (delegate* unmanaged<int, ushort>)Functions.LoadFunction("glGetStageIndexNV");
			Functions.glGetStringPtr = (delegate* unmanaged<int, IntPtr>)Functions.LoadFunction("glGetString");
			Functions.glGetStringiPtr = (delegate* unmanaged<int, uint, IntPtr>)Functions.LoadFunction("glGetStringi");
			Functions.glGetSubroutineIndexPtr = (delegate* unmanaged<uint, int, byte*, uint>)Functions.LoadFunction("glGetSubroutineIndex");
			Functions.glGetSubroutineUniformLocationPtr = (delegate* unmanaged<uint, int, byte*, int>)Functions.LoadFunction("glGetSubroutineUniformLocation");
			Functions.glGetSyncivPtr = (delegate* unmanaged<IntPtr, int, int, int*, int*, void>)Functions.LoadFunction("glGetSynciv");
			Functions.glGetSyncivAPPLEPtr = (delegate* unmanaged<IntPtr, int, int, int*, int*, void>)Functions.LoadFunction("glGetSyncivAPPLE");
			Functions.glGetTexBumpParameterfvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glGetTexBumpParameterfvATI");
			Functions.glGetTexBumpParameterivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glGetTexBumpParameterivATI");
			Functions.glGetTexEnvfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetTexEnvfv");
			Functions.glGetTexEnvivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexEnviv");
			Functions.glGetTexEnvxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexEnvxv");
			Functions.glGetTexEnvxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexEnvxvOES");
			Functions.glGetTexFilterFuncSGISPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetTexFilterFuncSGIS");
			Functions.glGetTexGendvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glGetTexGendv");
			Functions.glGetTexGenfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetTexGenfv");
			Functions.glGetTexGenfvOESPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetTexGenfvOES");
			Functions.glGetTexGenivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexGeniv");
			Functions.glGetTexGenivOESPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexGenivOES");
			Functions.glGetTexGenxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexGenxvOES");
			Functions.glGetTexImagePtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetTexImage");
			Functions.glGetTexLevelParameterfvPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetTexLevelParameterfv");
			Functions.glGetTexLevelParameterivPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetTexLevelParameteriv");
			Functions.glGetTexLevelParameterxvOESPtr = (delegate* unmanaged<int, int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexLevelParameterxvOES");
			Functions.glGetTexParameterIivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexParameterIiv");
			Functions.glGetTexParameterIivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexParameterIivEXT");
			Functions.glGetTexParameterIivOESPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexParameterIivOES");
			Functions.glGetTexParameterIuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetTexParameterIuiv");
			Functions.glGetTexParameterIuivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetTexParameterIuivEXT");
			Functions.glGetTexParameterIuivOESPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetTexParameterIuivOES");
			Functions.glGetTexParameterPointervAPPLEPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexParameterPointervAPPLE");
			Functions.glGetTexParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetTexParameterfv");
			Functions.glGetTexParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glGetTexParameteriv");
			Functions.glGetTexParameterxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexParameterxv");
			Functions.glGetTexParameterxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glGetTexParameterxvOES");
			Functions.glGetTextureHandleARBPtr = (delegate* unmanaged<uint, ulong>)Functions.LoadFunction("glGetTextureHandleARB");
			Functions.glGetTextureHandleIMGPtr = (delegate* unmanaged<uint, ulong>)Functions.LoadFunction("glGetTextureHandleIMG");
			Functions.glGetTextureHandleNVPtr = (delegate* unmanaged<uint, ulong>)Functions.LoadFunction("glGetTextureHandleNV");
			Functions.glGetTextureImagePtr = (delegate* unmanaged<uint, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetTextureImage");
			Functions.glGetTextureImageEXTPtr = (delegate* unmanaged<uint, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetTextureImageEXT");
			Functions.glGetTextureLevelParameterfvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetTextureLevelParameterfv");
			Functions.glGetTextureLevelParameterfvEXTPtr = (delegate* unmanaged<uint, int, int, int, float*, void>)Functions.LoadFunction("glGetTextureLevelParameterfvEXT");
			Functions.glGetTextureLevelParameterivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetTextureLevelParameteriv");
			Functions.glGetTextureLevelParameterivEXTPtr = (delegate* unmanaged<uint, int, int, int, int*, void>)Functions.LoadFunction("glGetTextureLevelParameterivEXT");
			Functions.glGetTextureParameterIivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetTextureParameterIiv");
			Functions.glGetTextureParameterIivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetTextureParameterIivEXT");
			Functions.glGetTextureParameterIuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetTextureParameterIuiv");
			Functions.glGetTextureParameterIuivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glGetTextureParameterIuivEXT");
			Functions.glGetTextureParameterfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetTextureParameterfv");
			Functions.glGetTextureParameterfvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetTextureParameterfvEXT");
			Functions.glGetTextureParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetTextureParameteriv");
			Functions.glGetTextureParameterivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetTextureParameterivEXT");
			Functions.glGetTextureSamplerHandleARBPtr = (delegate* unmanaged<uint, uint, ulong>)Functions.LoadFunction("glGetTextureSamplerHandleARB");
			Functions.glGetTextureSamplerHandleIMGPtr = (delegate* unmanaged<uint, uint, ulong>)Functions.LoadFunction("glGetTextureSamplerHandleIMG");
			Functions.glGetTextureSamplerHandleNVPtr = (delegate* unmanaged<uint, uint, ulong>)Functions.LoadFunction("glGetTextureSamplerHandleNV");
			Functions.glGetTextureSubImagePtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetTextureSubImage");
			Functions.glGetTrackMatrixivNVPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glGetTrackMatrixivNV");
			Functions.glGetTransformFeedbackVaryingPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetTransformFeedbackVarying");
			Functions.glGetTransformFeedbackVaryingEXTPtr = (delegate* unmanaged<uint, uint, int, int*, int*, int*, byte*, void>)Functions.LoadFunction("glGetTransformFeedbackVaryingEXT");
			Functions.glGetTransformFeedbackVaryingNVPtr = (delegate* unmanaged<uint, uint, int*, void>)Functions.LoadFunction("glGetTransformFeedbackVaryingNV");
			Functions.glGetTransformFeedbacki64_vPtr = (delegate* unmanaged<uint, int, uint, long*, void>)Functions.LoadFunction("glGetTransformFeedbacki64_v");
			Functions.glGetTransformFeedbacki_vPtr = (delegate* unmanaged<uint, int, uint, int*, void>)Functions.LoadFunction("glGetTransformFeedbacki_v");
			Functions.glGetTransformFeedbackivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetTransformFeedbackiv");
			Functions.glGetTranslatedShaderSourceANGLEPtr = (delegate* unmanaged<uint, int, int*, byte*, void>)Functions.LoadFunction("glGetTranslatedShaderSourceANGLE");
			Functions.glGetUniformBlockIndexPtr = (delegate* unmanaged<uint, byte*, uint>)Functions.LoadFunction("glGetUniformBlockIndex");
			Functions.glGetUniformBufferSizeEXTPtr = (delegate* unmanaged<uint, int, int>)Functions.LoadFunction("glGetUniformBufferSizeEXT");
			Functions.glGetUniformIndicesPtr = (delegate* unmanaged<uint, int, byte**, uint*, void>)Functions.LoadFunction("glGetUniformIndices");
			Functions.glGetUniformLocationPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetUniformLocation");
			Functions.glGetUniformLocationARBPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetUniformLocationARB");
			Functions.glGetUniformOffsetEXTPtr = (delegate* unmanaged<uint, int, uint>)Functions.LoadFunction("glGetUniformOffsetEXT");
			Functions.glGetUniformSubroutineuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetUniformSubroutineuiv");
			Functions.glGetUniformdvPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetUniformdv");
			Functions.glGetUniformfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetUniformfv");
			Functions.glGetUniformfvARBPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetUniformfvARB");
			Functions.glGetUniformi64vARBPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetUniformi64vARB");
			Functions.glGetUniformi64vNVPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetUniformi64vNV");
			Functions.glGetUniformivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetUniformiv");
			Functions.glGetUniformivARBPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetUniformivARB");
			Functions.glGetUniformui64vARBPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetUniformui64vARB");
			Functions.glGetUniformui64vNVPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetUniformui64vNV");
			Functions.glGetUniformuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetUniformuiv");
			Functions.glGetUniformuivEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetUniformuivEXT");
			Functions.glGetUnsignedBytevEXTPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glGetUnsignedBytevEXT");
			Functions.glGetUnsignedBytei_vEXTPtr = (delegate* unmanaged<int, uint, byte*, void>)Functions.LoadFunction("glGetUnsignedBytei_vEXT");
			Functions.glGetVariantArrayObjectfvATIPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVariantArrayObjectfvATI");
			Functions.glGetVariantArrayObjectivATIPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVariantArrayObjectivATI");
			Functions.glGetVariantBooleanvEXTPtr = (delegate* unmanaged<uint, int, bool*, void>)Functions.LoadFunction("glGetVariantBooleanvEXT");
			Functions.glGetVariantFloatvEXTPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVariantFloatvEXT");
			Functions.glGetVariantIntegervEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVariantIntegervEXT");
			Functions.glGetVariantPointervEXTPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVariantPointervEXT");
			Functions.glGetVaryingLocationNVPtr = (delegate* unmanaged<uint, byte*, int>)Functions.LoadFunction("glGetVaryingLocationNV");
			Functions.glGetVertexArrayIndexed64ivPtr = (delegate* unmanaged<uint, uint, int, long*, void>)Functions.LoadFunction("glGetVertexArrayIndexed64iv");
			Functions.glGetVertexArrayIndexedivPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glGetVertexArrayIndexediv");
			Functions.glGetVertexArrayIntegeri_vEXTPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glGetVertexArrayIntegeri_vEXT");
			Functions.glGetVertexArrayIntegervEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexArrayIntegervEXT");
			Functions.glGetVertexArrayPointeri_vEXTPtr = (delegate* unmanaged<uint, uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVertexArrayPointeri_vEXT");
			Functions.glGetVertexArrayPointervEXTPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVertexArrayPointervEXT");
			Functions.glGetVertexArrayivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexArrayiv");
			Functions.glGetVertexAttribArrayObjectfvATIPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVertexAttribArrayObjectfvATI");
			Functions.glGetVertexAttribArrayObjectivATIPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribArrayObjectivATI");
			Functions.glGetVertexAttribIivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribIiv");
			Functions.glGetVertexAttribIivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribIivEXT");
			Functions.glGetVertexAttribIuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetVertexAttribIuiv");
			Functions.glGetVertexAttribIuivEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetVertexAttribIuivEXT");
			Functions.glGetVertexAttribLdvPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetVertexAttribLdv");
			Functions.glGetVertexAttribLdvEXTPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetVertexAttribLdvEXT");
			Functions.glGetVertexAttribLi64vNVPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetVertexAttribLi64vNV");
			Functions.glGetVertexAttribLui64vARBPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetVertexAttribLui64vARB");
			Functions.glGetVertexAttribLui64vNVPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetVertexAttribLui64vNV");
			Functions.glGetVertexAttribPointervPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVertexAttribPointerv");
			Functions.glGetVertexAttribPointervARBPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVertexAttribPointervARB");
			Functions.glGetVertexAttribPointervNVPtr = (delegate* unmanaged<uint, int, IntPtr*, void>)Functions.LoadFunction("glGetVertexAttribPointervNV");
			Functions.glGetVertexAttribdvPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetVertexAttribdv");
			Functions.glGetVertexAttribdvARBPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetVertexAttribdvARB");
			Functions.glGetVertexAttribdvNVPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glGetVertexAttribdvNV");
			Functions.glGetVertexAttribfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVertexAttribfv");
			Functions.glGetVertexAttribfvARBPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVertexAttribfvARB");
			Functions.glGetVertexAttribfvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glGetVertexAttribfvNV");
			Functions.glGetVertexAttribivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribiv");
			Functions.glGetVertexAttribivARBPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribivARB");
			Functions.glGetVertexAttribivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVertexAttribivNV");
			Functions.glGetVideoCaptureStreamdvNVPtr = (delegate* unmanaged<uint, uint, int, double*, void>)Functions.LoadFunction("glGetVideoCaptureStreamdvNV");
			Functions.glGetVideoCaptureStreamfvNVPtr = (delegate* unmanaged<uint, uint, int, float*, void>)Functions.LoadFunction("glGetVideoCaptureStreamfvNV");
			Functions.glGetVideoCaptureStreamivNVPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glGetVideoCaptureStreamivNV");
			Functions.glGetVideoCaptureivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVideoCaptureivNV");
			Functions.glGetVideoi64vNVPtr = (delegate* unmanaged<uint, int, long*, void>)Functions.LoadFunction("glGetVideoi64vNV");
			Functions.glGetVideoivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glGetVideoivNV");
			Functions.glGetVideoui64vNVPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glGetVideoui64vNV");
			Functions.glGetVideouivNVPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glGetVideouivNV");
			Functions.glGetnColorTablePtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnColorTable");
			Functions.glGetnColorTableARBPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnColorTableARB");
			Functions.glGetnCompressedTexImagePtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnCompressedTexImage");
			Functions.glGetnCompressedTexImageARBPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnCompressedTexImageARB");
			Functions.glGetnConvolutionFilterPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnConvolutionFilter");
			Functions.glGetnConvolutionFilterARBPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnConvolutionFilterARB");
			Functions.glGetnHistogramPtr = (delegate* unmanaged<int, bool, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnHistogram");
			Functions.glGetnHistogramARBPtr = (delegate* unmanaged<int, bool, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnHistogramARB");
			Functions.glGetnMapdvPtr = (delegate* unmanaged<int, int, int, double*, void>)Functions.LoadFunction("glGetnMapdv");
			Functions.glGetnMapdvARBPtr = (delegate* unmanaged<int, int, int, double*, void>)Functions.LoadFunction("glGetnMapdvARB");
			Functions.glGetnMapfvPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetnMapfv");
			Functions.glGetnMapfvARBPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glGetnMapfvARB");
			Functions.glGetnMapivPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetnMapiv");
			Functions.glGetnMapivARBPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glGetnMapivARB");
			Functions.glGetnMinmaxPtr = (delegate* unmanaged<int, bool, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnMinmax");
			Functions.glGetnMinmaxARBPtr = (delegate* unmanaged<int, bool, int, int, int, IntPtr, void>)Functions.LoadFunction("glGetnMinmaxARB");
			Functions.glGetnPixelMapfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetnPixelMapfv");
			Functions.glGetnPixelMapfvARBPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glGetnPixelMapfvARB");
			Functions.glGetnPixelMapuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetnPixelMapuiv");
			Functions.glGetnPixelMapuivARBPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glGetnPixelMapuivARB");
			Functions.glGetnPixelMapusvPtr = (delegate* unmanaged<int, int, ushort*, void>)Functions.LoadFunction("glGetnPixelMapusv");
			Functions.glGetnPixelMapusvARBPtr = (delegate* unmanaged<int, int, ushort*, void>)Functions.LoadFunction("glGetnPixelMapusvARB");
			Functions.glGetnPolygonStipplePtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glGetnPolygonStipple");
			Functions.glGetnPolygonStippleARBPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glGetnPolygonStippleARB");
			Functions.glGetnSeparableFilterPtr = (delegate* unmanaged<int, int, int, int, IntPtr, int, IntPtr, IntPtr, void>)Functions.LoadFunction("glGetnSeparableFilter");
			Functions.glGetnSeparableFilterARBPtr = (delegate* unmanaged<int, int, int, int, IntPtr, int, IntPtr, IntPtr, void>)Functions.LoadFunction("glGetnSeparableFilterARB");
			Functions.glGetnTexImagePtr = (delegate* unmanaged<int, int, int, int, uint, IntPtr, void>)Functions.LoadFunction("glGetnTexImage");
			Functions.glGetnTexImageARBPtr = (delegate* unmanaged<int, int, int, int, uint, IntPtr, void>)Functions.LoadFunction("glGetnTexImageARB");
			Functions.glGetnUniformdvPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glGetnUniformdv");
			Functions.glGetnUniformdvARBPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glGetnUniformdvARB");
			Functions.glGetnUniformfvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetnUniformfv");
			Functions.glGetnUniformfvARBPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetnUniformfvARB");
			Functions.glGetnUniformfvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetnUniformfvEXT");
			Functions.glGetnUniformfvKHRPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glGetnUniformfvKHR");
			Functions.glGetnUniformi64vARBPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glGetnUniformi64vARB");
			Functions.glGetnUniformivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetnUniformiv");
			Functions.glGetnUniformivARBPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetnUniformivARB");
			Functions.glGetnUniformivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetnUniformivEXT");
			Functions.glGetnUniformivKHRPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glGetnUniformivKHR");
			Functions.glGetnUniformui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glGetnUniformui64vARB");
			Functions.glGetnUniformuivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glGetnUniformuiv");
			Functions.glGetnUniformuivARBPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glGetnUniformuivARB");
			Functions.glGetnUniformuivKHRPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glGetnUniformuivKHR");
			Functions.glGlobalAlphaFactorbSUNPtr = (delegate* unmanaged<sbyte, void>)Functions.LoadFunction("glGlobalAlphaFactorbSUN");
			Functions.glGlobalAlphaFactordSUNPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glGlobalAlphaFactordSUN");
			Functions.glGlobalAlphaFactorfSUNPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glGlobalAlphaFactorfSUN");
			Functions.glGlobalAlphaFactoriSUNPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glGlobalAlphaFactoriSUN");
			Functions.glGlobalAlphaFactorsSUNPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glGlobalAlphaFactorsSUN");
			Functions.glGlobalAlphaFactorubSUNPtr = (delegate* unmanaged<byte, void>)Functions.LoadFunction("glGlobalAlphaFactorubSUN");
			Functions.glGlobalAlphaFactoruiSUNPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glGlobalAlphaFactoruiSUN");
			Functions.glGlobalAlphaFactorusSUNPtr = (delegate* unmanaged<ushort, void>)Functions.LoadFunction("glGlobalAlphaFactorusSUN");
			Functions.glHintPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glHint");
			Functions.glHintPGIPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glHintPGI");
			Functions.glHistogramPtr = (delegate* unmanaged<int, int, int, bool, void>)Functions.LoadFunction("glHistogram");
			Functions.glHistogramEXTPtr = (delegate* unmanaged<int, int, int, bool, void>)Functions.LoadFunction("glHistogramEXT");
			Functions.glIglooInterfaceSGIXPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glIglooInterfaceSGIX");
			Functions.glImageTransformParameterfHPPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glImageTransformParameterfHP");
			Functions.glImageTransformParameterfvHPPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glImageTransformParameterfvHP");
			Functions.glImageTransformParameteriHPPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glImageTransformParameteriHP");
			Functions.glImageTransformParameterivHPPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glImageTransformParameterivHP");
			Functions.glImportMemoryFdEXTPtr = (delegate* unmanaged<uint, ulong, int, int, void>)Functions.LoadFunction("glImportMemoryFdEXT");
			Functions.glImportMemoryWin32HandleEXTPtr = (delegate* unmanaged<uint, ulong, int, IntPtr, void>)Functions.LoadFunction("glImportMemoryWin32HandleEXT");
			Functions.glImportMemoryWin32NameEXTPtr = (delegate* unmanaged<uint, ulong, int, IntPtr, void>)Functions.LoadFunction("glImportMemoryWin32NameEXT");
			Functions.glImportSemaphoreFdEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glImportSemaphoreFdEXT");
			Functions.glImportSemaphoreWin32HandleEXTPtr = (delegate* unmanaged<uint, int, IntPtr, void>)Functions.LoadFunction("glImportSemaphoreWin32HandleEXT");
			Functions.glImportSemaphoreWin32NameEXTPtr = (delegate* unmanaged<uint, int, IntPtr, void>)Functions.LoadFunction("glImportSemaphoreWin32NameEXT");
			Functions.glImportSyncEXTPtr = (delegate* unmanaged<int, uint, uint, IntPtr>)Functions.LoadFunction("glImportSyncEXT");
			Functions.glIndexFormatNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glIndexFormatNV");
			Functions.glIndexFuncEXTPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glIndexFuncEXT");
			Functions.glIndexMaskPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glIndexMask");
			Functions.glIndexMaterialEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glIndexMaterialEXT");
			Functions.glIndexPointerPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glIndexPointer");
			Functions.glIndexPointerEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glIndexPointerEXT");
			Functions.glIndexPointerListIBMPtr = (delegate* unmanaged<int, int, IntPtr*, int, void>)Functions.LoadFunction("glIndexPointerListIBM");
			Functions.glIndexdPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glIndexd");
			Functions.glIndexdvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glIndexdv");
			Functions.glIndexfPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glIndexf");
			Functions.glIndexfvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glIndexfv");
			Functions.glIndexiPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glIndexi");
			Functions.glIndexivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glIndexiv");
			Functions.glIndexsPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glIndexs");
			Functions.glIndexsvPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glIndexsv");
			Functions.glIndexubPtr = (delegate* unmanaged<byte, void>)Functions.LoadFunction("glIndexub");
			Functions.glIndexubvPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glIndexubv");
			Functions.glIndexxOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glIndexxOES");
			Functions.glIndexxvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glIndexxvOES");
			Functions.glInitNamesPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glInitNames");
			Functions.glInsertComponentEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glInsertComponentEXT");
			Functions.glInsertEventMarkerEXTPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glInsertEventMarkerEXT");
			Functions.glInstrumentsBufferSGIXPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glInstrumentsBufferSGIX");
			Functions.glInterleavedArraysPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glInterleavedArrays");
			Functions.glInterpolatePathsNVPtr = (delegate* unmanaged<uint, uint, uint, float, void>)Functions.LoadFunction("glInterpolatePathsNV");
			Functions.glInvalidateBufferDataPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glInvalidateBufferData");
			Functions.glInvalidateBufferSubDataPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glInvalidateBufferSubData");
			Functions.glInvalidateFramebufferPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glInvalidateFramebuffer");
			Functions.glInvalidateNamedFramebufferDataPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glInvalidateNamedFramebufferData");
			Functions.glInvalidateNamedFramebufferSubDataPtr = (delegate* unmanaged<uint, int, uint*, int, int, int, int, void>)Functions.LoadFunction("glInvalidateNamedFramebufferSubData");
			Functions.glInvalidateSubFramebufferPtr = (delegate* unmanaged<int, int, uint*, int, int, int, int, void>)Functions.LoadFunction("glInvalidateSubFramebuffer");
			Functions.glInvalidateTexImagePtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glInvalidateTexImage");
			Functions.glInvalidateTexSubImagePtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glInvalidateTexSubImage");
			Functions.glIsAsyncMarkerSGIXPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsAsyncMarkerSGIX");
			Functions.glIsBufferPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsBuffer");
			Functions.glIsBufferARBPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsBufferARB");
			Functions.glIsBufferResidentNVPtr = (delegate* unmanaged<int, bool>)Functions.LoadFunction("glIsBufferResidentNV");
			Functions.glIsCommandListNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsCommandListNV");
			Functions.glIsEnabledPtr = (delegate* unmanaged<int, bool>)Functions.LoadFunction("glIsEnabled");
			Functions.glIsEnabledIndexedEXTPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsEnabledIndexedEXT");
			Functions.glIsEnablediPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsEnabledi");
			Functions.glIsEnablediEXTPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsEnablediEXT");
			Functions.glIsEnablediNVPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsEnablediNV");
			Functions.glIsEnablediOESPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsEnablediOES");
			Functions.glIsFenceAPPLEPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsFenceAPPLE");
			Functions.glIsFenceNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsFenceNV");
			Functions.glIsFramebufferPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsFramebuffer");
			Functions.glIsFramebufferEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsFramebufferEXT");
			Functions.glIsFramebufferOESPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsFramebufferOES");
			Functions.glIsImageHandleResidentARBPtr = (delegate* unmanaged<ulong, bool>)Functions.LoadFunction("glIsImageHandleResidentARB");
			Functions.glIsImageHandleResidentNVPtr = (delegate* unmanaged<ulong, bool>)Functions.LoadFunction("glIsImageHandleResidentNV");
			Functions.glIsListPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsList");
			Functions.glIsMemoryObjectEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsMemoryObjectEXT");
			Functions.glIsNameAMDPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glIsNameAMD");
			Functions.glIsNamedBufferResidentNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsNamedBufferResidentNV");
			Functions.glIsNamedStringARBPtr = (delegate* unmanaged<int, byte*, bool>)Functions.LoadFunction("glIsNamedStringARB");
			Functions.glIsObjectBufferATIPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsObjectBufferATI");
			Functions.glIsOcclusionQueryNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsOcclusionQueryNV");
			Functions.glIsPathNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsPathNV");
			Functions.glIsPointInFillPathNVPtr = (delegate* unmanaged<uint, uint, float, float, bool>)Functions.LoadFunction("glIsPointInFillPathNV");
			Functions.glIsPointInStrokePathNVPtr = (delegate* unmanaged<uint, float, float, bool>)Functions.LoadFunction("glIsPointInStrokePathNV");
			Functions.glIsProgramPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsProgram");
			Functions.glIsProgramARBPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsProgramARB");
			Functions.glIsProgramNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsProgramNV");
			Functions.glIsProgramPipelinePtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsProgramPipeline");
			Functions.glIsProgramPipelineEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsProgramPipelineEXT");
			Functions.glIsQueryPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsQuery");
			Functions.glIsQueryARBPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsQueryARB");
			Functions.glIsQueryEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsQueryEXT");
			Functions.glIsRenderbufferPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsRenderbuffer");
			Functions.glIsRenderbufferEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsRenderbufferEXT");
			Functions.glIsRenderbufferOESPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsRenderbufferOES");
			Functions.glIsSemaphoreEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsSemaphoreEXT");
			Functions.glIsSamplerPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsSampler");
			Functions.glIsShaderPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsShader");
			Functions.glIsStateNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsStateNV");
			Functions.glIsSyncPtr = (delegate* unmanaged<IntPtr, bool>)Functions.LoadFunction("glIsSync");
			Functions.glIsSyncAPPLEPtr = (delegate* unmanaged<IntPtr, bool>)Functions.LoadFunction("glIsSyncAPPLE");
			Functions.glIsTexturePtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsTexture");
			Functions.glIsTextureEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsTextureEXT");
			Functions.glIsTextureHandleResidentARBPtr = (delegate* unmanaged<ulong, bool>)Functions.LoadFunction("glIsTextureHandleResidentARB");
			Functions.glIsTextureHandleResidentNVPtr = (delegate* unmanaged<ulong, bool>)Functions.LoadFunction("glIsTextureHandleResidentNV");
			Functions.glIsTransformFeedbackPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsTransformFeedback");
			Functions.glIsTransformFeedbackNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsTransformFeedbackNV");
			Functions.glIsVariantEnabledEXTPtr = (delegate* unmanaged<uint, int, bool>)Functions.LoadFunction("glIsVariantEnabledEXT");
			Functions.glIsVertexArrayPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsVertexArray");
			Functions.glIsVertexArrayAPPLEPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsVertexArrayAPPLE");
			Functions.glIsVertexArrayOESPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glIsVertexArrayOES");
			Functions.glIsVertexAttribEnabledAPPLEPtr = (delegate* unmanaged<uint, int, bool>)Functions.LoadFunction("glIsVertexAttribEnabledAPPLE");
			Functions.glLGPUCopyImageSubDataNVXPtr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glLGPUCopyImageSubDataNVX");
			Functions.glLGPUInterlockNVXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glLGPUInterlockNVX");
			Functions.glLGPUNamedBufferSubDataNVXPtr = (delegate* unmanaged<uint, uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glLGPUNamedBufferSubDataNVX");
			Functions.glLabelObjectEXTPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glLabelObjectEXT");
			Functions.glLightEnviSGIXPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glLightEnviSGIX");
			Functions.glLightModelfPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glLightModelf");
			Functions.glLightModelfvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glLightModelfv");
			Functions.glLightModeliPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glLightModeli");
			Functions.glLightModelivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glLightModeliv");
			Functions.glLightModelxPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glLightModelx");
			Functions.glLightModelxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glLightModelxOES");
			Functions.glLightModelxvPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glLightModelxv");
			Functions.glLightModelxvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glLightModelxvOES");
			Functions.glLightfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glLightf");
			Functions.glLightfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glLightfv");
			Functions.glLightiPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glLighti");
			Functions.glLightivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glLightiv");
			Functions.glLightxPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glLightx");
			Functions.glLightxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glLightxOES");
			Functions.glLightxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glLightxv");
			Functions.glLightxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glLightxvOES");
			Functions.glLineStipplePtr = (delegate* unmanaged<int, ushort, void>)Functions.LoadFunction("glLineStipple");
			Functions.glLineWidthPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glLineWidth");
			Functions.glLineWidthxPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glLineWidthx");
			Functions.glLineWidthxOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glLineWidthxOES");
			Functions.glLinkProgramPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glLinkProgram");
			Functions.glLinkProgramARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glLinkProgramARB");
			Functions.glListBasePtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glListBase");
			Functions.glListDrawCommandsStatesClientNVPtr = (delegate* unmanaged<uint, uint, IntPtr*, int*, uint*, uint*, uint, void>)Functions.LoadFunction("glListDrawCommandsStatesClientNV");
			Functions.glListParameterfSGIXPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glListParameterfSGIX");
			Functions.glListParameterfvSGIXPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glListParameterfvSGIX");
			Functions.glListParameteriSGIXPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glListParameteriSGIX");
			Functions.glListParameterivSGIXPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glListParameterivSGIX");
			Functions.glLoadIdentityPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glLoadIdentity");
			Functions.glLoadIdentityDeformationMapSGIXPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glLoadIdentityDeformationMapSGIX");
			Functions.glLoadMatrixdPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glLoadMatrixd");
			Functions.glLoadMatrixfPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glLoadMatrixf");
			Functions.glLoadMatrixxPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glLoadMatrixx");
			Functions.glLoadMatrixxOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glLoadMatrixxOES");
			Functions.glLoadNamePtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glLoadName");
			Functions.glLoadPaletteFromModelViewMatrixOESPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glLoadPaletteFromModelViewMatrixOES");
			Functions.glLoadProgramNVPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glLoadProgramNV");
			Functions.glLoadTransposeMatrixdPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glLoadTransposeMatrixd");
			Functions.glLoadTransposeMatrixdARBPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glLoadTransposeMatrixdARB");
			Functions.glLoadTransposeMatrixfPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glLoadTransposeMatrixf");
			Functions.glLoadTransposeMatrixfARBPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glLoadTransposeMatrixfARB");
			Functions.glLoadTransposeMatrixxOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glLoadTransposeMatrixxOES");
			Functions.glLockArraysEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glLockArraysEXT");
			Functions.glLogicOpPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glLogicOp");
			Functions.glMakeBufferNonResidentNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glMakeBufferNonResidentNV");
			Functions.glMakeBufferResidentNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glMakeBufferResidentNV");
			Functions.glMakeImageHandleNonResidentARBPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeImageHandleNonResidentARB");
			Functions.glMakeImageHandleNonResidentNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeImageHandleNonResidentNV");
			Functions.glMakeImageHandleResidentARBPtr = (delegate* unmanaged<ulong, int, void>)Functions.LoadFunction("glMakeImageHandleResidentARB");
			Functions.glMakeImageHandleResidentNVPtr = (delegate* unmanaged<ulong, int, void>)Functions.LoadFunction("glMakeImageHandleResidentNV");
			Functions.glMakeNamedBufferNonResidentNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMakeNamedBufferNonResidentNV");
			Functions.glMakeNamedBufferResidentNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glMakeNamedBufferResidentNV");
			Functions.glMakeTextureHandleNonResidentARBPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeTextureHandleNonResidentARB");
			Functions.glMakeTextureHandleNonResidentNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeTextureHandleNonResidentNV");
			Functions.glMakeTextureHandleResidentARBPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeTextureHandleResidentARB");
			Functions.glMakeTextureHandleResidentNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glMakeTextureHandleResidentNV");
			Functions.glMap1dPtr = (delegate* unmanaged<int, double, double, int, int, double*, void>)Functions.LoadFunction("glMap1d");
			Functions.glMap1fPtr = (delegate* unmanaged<int, float, float, int, int, float*, void>)Functions.LoadFunction("glMap1f");
			Functions.glMap1xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, int, int, IntPtr, void>)Functions.LoadFunction("glMap1xOES");
			Functions.glMap2dPtr = (delegate* unmanaged<int, double, double, int, int, double, double, int, int, double*, void>)Functions.LoadFunction("glMap2d");
			Functions.glMap2fPtr = (delegate* unmanaged<int, float, float, int, int, float, float, int, int, float*, void>)Functions.LoadFunction("glMap2f");
			Functions.glMap2xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, int, int, IntPtr, IntPtr, int, int, IntPtr, void>)Functions.LoadFunction("glMap2xOES");
			Functions.glMapBufferPtr = (delegate* unmanaged<int, int, IntPtr>)Functions.LoadFunction("glMapBuffer");
			Functions.glMapBufferARBPtr = (delegate* unmanaged<int, int, IntPtr>)Functions.LoadFunction("glMapBufferARB");
			Functions.glMapBufferOESPtr = (delegate* unmanaged<int, int, IntPtr>)Functions.LoadFunction("glMapBufferOES");
			Functions.glMapBufferRangePtr = (delegate* unmanaged<int, uint, uint, uint, IntPtr>)Functions.LoadFunction("glMapBufferRange");
			Functions.glMapBufferRangeEXTPtr = (delegate* unmanaged<int, uint, uint, uint, IntPtr>)Functions.LoadFunction("glMapBufferRangeEXT");
			Functions.glMapControlPointsNVPtr = (delegate* unmanaged<int, uint, int, int, int, int, int, bool, IntPtr, void>)Functions.LoadFunction("glMapControlPointsNV");
			Functions.glMapGrid1dPtr = (delegate* unmanaged<int, double, double, void>)Functions.LoadFunction("glMapGrid1d");
			Functions.glMapGrid1fPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glMapGrid1f");
			Functions.glMapGrid1xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, void>)Functions.LoadFunction("glMapGrid1xOES");
			Functions.glMapGrid2dPtr = (delegate* unmanaged<int, double, double, int, double, double, void>)Functions.LoadFunction("glMapGrid2d");
			Functions.glMapGrid2fPtr = (delegate* unmanaged<int, float, float, int, float, float, void>)Functions.LoadFunction("glMapGrid2f");
			Functions.glMapGrid2xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glMapGrid2xOES");
			Functions.glMapNamedBufferPtr = (delegate* unmanaged<uint, int, IntPtr>)Functions.LoadFunction("glMapNamedBuffer");
			Functions.glMapNamedBufferEXTPtr = (delegate* unmanaged<uint, int, IntPtr>)Functions.LoadFunction("glMapNamedBufferEXT");
			Functions.glMapNamedBufferRangePtr = (delegate* unmanaged<uint, uint, uint, uint, IntPtr>)Functions.LoadFunction("glMapNamedBufferRange");
			Functions.glMapNamedBufferRangeEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, IntPtr>)Functions.LoadFunction("glMapNamedBufferRangeEXT");
			Functions.glMapObjectBufferATIPtr = (delegate* unmanaged<uint, IntPtr>)Functions.LoadFunction("glMapObjectBufferATI");
			Functions.glMapParameterfvNVPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glMapParameterfvNV");
			Functions.glMapParameterivNVPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glMapParameterivNV");
			Functions.glMapTexture2DINTELPtr = (delegate* unmanaged<uint, int, uint, int*, int*, IntPtr>)Functions.LoadFunction("glMapTexture2DINTEL");
			Functions.glMapVertexAttrib1dAPPLEPtr = (delegate* unmanaged<uint, uint, double, double, int, int, double*, void>)Functions.LoadFunction("glMapVertexAttrib1dAPPLE");
			Functions.glMapVertexAttrib1fAPPLEPtr = (delegate* unmanaged<uint, uint, float, float, int, int, float*, void>)Functions.LoadFunction("glMapVertexAttrib1fAPPLE");
			Functions.glMapVertexAttrib2dAPPLEPtr = (delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void>)Functions.LoadFunction("glMapVertexAttrib2dAPPLE");
			Functions.glMapVertexAttrib2fAPPLEPtr = (delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void>)Functions.LoadFunction("glMapVertexAttrib2fAPPLE");
			Functions.glMaterialfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glMaterialf");
			Functions.glMaterialfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glMaterialfv");
			Functions.glMaterialiPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glMateriali");
			Functions.glMaterialivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glMaterialiv");
			Functions.glMaterialxPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glMaterialx");
			Functions.glMaterialxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glMaterialxOES");
			Functions.glMaterialxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glMaterialxv");
			Functions.glMaterialxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glMaterialxvOES");
			Functions.glMatrixFrustumEXTPtr = (delegate* unmanaged<int, double, double, double, double, double, double, void>)Functions.LoadFunction("glMatrixFrustumEXT");
			Functions.glMatrixIndexPointerARBPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glMatrixIndexPointerARB");
			Functions.glMatrixIndexPointerOESPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glMatrixIndexPointerOES");
			Functions.glMatrixIndexubvARBPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glMatrixIndexubvARB");
			Functions.glMatrixIndexuivARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glMatrixIndexuivARB");
			Functions.glMatrixIndexusvARBPtr = (delegate* unmanaged<int, ushort*, void>)Functions.LoadFunction("glMatrixIndexusvARB");
			Functions.glMatrixLoad3x2fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixLoad3x2fNV");
			Functions.glMatrixLoad3x3fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixLoad3x3fNV");
			Functions.glMatrixLoadIdentityEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glMatrixLoadIdentityEXT");
			Functions.glMatrixLoadTranspose3x3fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixLoadTranspose3x3fNV");
			Functions.glMatrixLoadTransposedEXTPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMatrixLoadTransposedEXT");
			Functions.glMatrixLoadTransposefEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixLoadTransposefEXT");
			Functions.glMatrixLoaddEXTPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMatrixLoaddEXT");
			Functions.glMatrixLoadfEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixLoadfEXT");
			Functions.glMatrixModePtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glMatrixMode");
			Functions.glMatrixMult3x2fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixMult3x2fNV");
			Functions.glMatrixMult3x3fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixMult3x3fNV");
			Functions.glMatrixMultTranspose3x3fNVPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixMultTranspose3x3fNV");
			Functions.glMatrixMultTransposedEXTPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMatrixMultTransposedEXT");
			Functions.glMatrixMultTransposefEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixMultTransposefEXT");
			Functions.glMatrixMultdEXTPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMatrixMultdEXT");
			Functions.glMatrixMultfEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMatrixMultfEXT");
			Functions.glMatrixOrthoEXTPtr = (delegate* unmanaged<int, double, double, double, double, double, double, void>)Functions.LoadFunction("glMatrixOrthoEXT");
			Functions.glMatrixPopEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glMatrixPopEXT");
			Functions.glMatrixPushEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glMatrixPushEXT");
			Functions.glMatrixRotatedEXTPtr = (delegate* unmanaged<int, double, double, double, double, void>)Functions.LoadFunction("glMatrixRotatedEXT");
			Functions.glMatrixRotatefEXTPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glMatrixRotatefEXT");
			Functions.glMatrixScaledEXTPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glMatrixScaledEXT");
			Functions.glMatrixScalefEXTPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glMatrixScalefEXT");
			Functions.glMatrixTranslatedEXTPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glMatrixTranslatedEXT");
			Functions.glMatrixTranslatefEXTPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glMatrixTranslatefEXT");
			Functions.glMaxShaderCompilerThreadsKHRPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMaxShaderCompilerThreadsKHR");
			Functions.glMaxShaderCompilerThreadsARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMaxShaderCompilerThreadsARB");
			Functions.glMemoryBarrierPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMemoryBarrier");
			Functions.glMemoryBarrierByRegionPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMemoryBarrierByRegion");
			Functions.glMemoryBarrierEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glMemoryBarrierEXT");
			Functions.glMemoryObjectParameterivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glMemoryObjectParameterivEXT");
			Functions.glMinSampleShadingPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glMinSampleShading");
			Functions.glMinSampleShadingARBPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glMinSampleShadingARB");
			Functions.glMinSampleShadingOESPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glMinSampleShadingOES");
			Functions.glMinmaxPtr = (delegate* unmanaged<int, int, bool, void>)Functions.LoadFunction("glMinmax");
			Functions.glMinmaxEXTPtr = (delegate* unmanaged<int, int, bool, void>)Functions.LoadFunction("glMinmaxEXT");
			Functions.glMultMatrixdPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glMultMatrixd");
			Functions.glMultMatrixfPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glMultMatrixf");
			Functions.glMultMatrixxPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glMultMatrixx");
			Functions.glMultMatrixxOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glMultMatrixxOES");
			Functions.glMultTransposeMatrixdPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glMultTransposeMatrixd");
			Functions.glMultTransposeMatrixdARBPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glMultTransposeMatrixdARB");
			Functions.glMultTransposeMatrixfPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glMultTransposeMatrixf");
			Functions.glMultTransposeMatrixfARBPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glMultTransposeMatrixfARB");
			Functions.glMultTransposeMatrixxOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glMultTransposeMatrixxOES");
			Functions.glMultiDrawArraysPtr = (delegate* unmanaged<int, int*, int*, int, void>)Functions.LoadFunction("glMultiDrawArrays");
			Functions.glMultiDrawArraysEXTPtr = (delegate* unmanaged<int, int*, int*, int, void>)Functions.LoadFunction("glMultiDrawArraysEXT");
			Functions.glMultiDrawArraysIndirectPtr = (delegate* unmanaged<int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirect");
			Functions.glMultiDrawArraysIndirectAMDPtr = (delegate* unmanaged<int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectAMD");
			Functions.glMultiDrawArraysIndirectBindlessCountNVPtr = (delegate* unmanaged<int, IntPtr, int, int, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectBindlessCountNV");
			Functions.glMultiDrawArraysIndirectBindlessNVPtr = (delegate* unmanaged<int, IntPtr, int, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectBindlessNV");
			Functions.glMultiDrawArraysIndirectCountPtr = (delegate* unmanaged<int, IntPtr, uint, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectCount");
			Functions.glMultiDrawArraysIndirectCountARBPtr = (delegate* unmanaged<int, IntPtr, uint, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectCountARB");
			Functions.glMultiDrawArraysIndirectEXTPtr = (delegate* unmanaged<int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawArraysIndirectEXT");
			Functions.glMultiDrawElementArrayAPPLEPtr = (delegate* unmanaged<int, int*, int*, int, void>)Functions.LoadFunction("glMultiDrawElementArrayAPPLE");
			Functions.glMultiDrawElementsPtr = (delegate* unmanaged<int, int*, int, IntPtr*, int, void>)Functions.LoadFunction("glMultiDrawElements");
			Functions.glMultiDrawElementsBaseVertexPtr = (delegate* unmanaged<int, int*, int, IntPtr*, int, int*, void>)Functions.LoadFunction("glMultiDrawElementsBaseVertex");
			Functions.glMultiDrawElementsBaseVertexEXTPtr = (delegate* unmanaged<int, int*, int, IntPtr*, int, int*, void>)Functions.LoadFunction("glMultiDrawElementsBaseVertexEXT");
			Functions.glMultiDrawElementsEXTPtr = (delegate* unmanaged<int, int*, int, IntPtr*, int, void>)Functions.LoadFunction("glMultiDrawElementsEXT");
			Functions.glMultiDrawElementsIndirectPtr = (delegate* unmanaged<int, int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirect");
			Functions.glMultiDrawElementsIndirectAMDPtr = (delegate* unmanaged<int, int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectAMD");
			Functions.glMultiDrawElementsIndirectBindlessCountNVPtr = (delegate* unmanaged<int, int, IntPtr, int, int, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectBindlessCountNV");
			Functions.glMultiDrawElementsIndirectBindlessNVPtr = (delegate* unmanaged<int, int, IntPtr, int, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectBindlessNV");
			Functions.glMultiDrawElementsIndirectCountPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectCount");
			Functions.glMultiDrawElementsIndirectCountARBPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectCountARB");
			Functions.glMultiDrawElementsIndirectEXTPtr = (delegate* unmanaged<int, int, IntPtr, int, int, void>)Functions.LoadFunction("glMultiDrawElementsIndirectEXT");
			Functions.glMultiDrawMeshTasksIndirectNVPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glMultiDrawMeshTasksIndirectNV");
			Functions.glMultiDrawMeshTasksIndirectCountNVPtr = (delegate* unmanaged<uint, uint, int, int, void>)Functions.LoadFunction("glMultiDrawMeshTasksIndirectCountNV");
			Functions.glMultiDrawRangeElementArrayAPPLEPtr = (delegate* unmanaged<int, uint, uint, int*, int*, int, void>)Functions.LoadFunction("glMultiDrawRangeElementArrayAPPLE");
			Functions.glMultiModeDrawArraysIBMPtr = (delegate* unmanaged<uint*, int*, int*, int, int, void>)Functions.LoadFunction("glMultiModeDrawArraysIBM");
			Functions.glMultiModeDrawElementsIBMPtr = (delegate* unmanaged<uint*, int*, int, IntPtr*, int, int, void>)Functions.LoadFunction("glMultiModeDrawElementsIBM");
			Functions.glMultiTexBufferEXTPtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glMultiTexBufferEXT");
			Functions.glMultiTexCoord1bOESPtr = (delegate* unmanaged<int, sbyte, void>)Functions.LoadFunction("glMultiTexCoord1bOES");
			Functions.glMultiTexCoord1bvOESPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glMultiTexCoord1bvOES");
			Functions.glMultiTexCoord1dPtr = (delegate* unmanaged<int, double, void>)Functions.LoadFunction("glMultiTexCoord1d");
			Functions.glMultiTexCoord1dARBPtr = (delegate* unmanaged<int, double, void>)Functions.LoadFunction("glMultiTexCoord1dARB");
			Functions.glMultiTexCoord1dvPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord1dv");
			Functions.glMultiTexCoord1dvARBPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord1dvARB");
			Functions.glMultiTexCoord1fPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glMultiTexCoord1f");
			Functions.glMultiTexCoord1fARBPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glMultiTexCoord1fARB");
			Functions.glMultiTexCoord1fvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord1fv");
			Functions.glMultiTexCoord1fvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord1fvARB");
			Functions.glMultiTexCoord1hNVPtr = (delegate* unmanaged<int, short, void>)Functions.LoadFunction("glMultiTexCoord1hNV");
			Functions.glMultiTexCoord1hvNVPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord1hvNV");
			Functions.glMultiTexCoord1iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glMultiTexCoord1i");
			Functions.glMultiTexCoord1iARBPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glMultiTexCoord1iARB");
			Functions.glMultiTexCoord1ivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord1iv");
			Functions.glMultiTexCoord1ivARBPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord1ivARB");
			Functions.glMultiTexCoord1sPtr = (delegate* unmanaged<int, short, void>)Functions.LoadFunction("glMultiTexCoord1s");
			Functions.glMultiTexCoord1sARBPtr = (delegate* unmanaged<int, short, void>)Functions.LoadFunction("glMultiTexCoord1sARB");
			Functions.glMultiTexCoord1svPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord1sv");
			Functions.glMultiTexCoord1svARBPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord1svARB");
			Functions.glMultiTexCoord1xOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glMultiTexCoord1xOES");
			Functions.glMultiTexCoord1xvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glMultiTexCoord1xvOES");
			Functions.glMultiTexCoord2bOESPtr = (delegate* unmanaged<int, sbyte, sbyte, void>)Functions.LoadFunction("glMultiTexCoord2bOES");
			Functions.glMultiTexCoord2bvOESPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glMultiTexCoord2bvOES");
			Functions.glMultiTexCoord2dPtr = (delegate* unmanaged<int, double, double, void>)Functions.LoadFunction("glMultiTexCoord2d");
			Functions.glMultiTexCoord2dARBPtr = (delegate* unmanaged<int, double, double, void>)Functions.LoadFunction("glMultiTexCoord2dARB");
			Functions.glMultiTexCoord2dvPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord2dv");
			Functions.glMultiTexCoord2dvARBPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord2dvARB");
			Functions.glMultiTexCoord2fPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glMultiTexCoord2f");
			Functions.glMultiTexCoord2fARBPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glMultiTexCoord2fARB");
			Functions.glMultiTexCoord2fvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord2fv");
			Functions.glMultiTexCoord2fvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord2fvARB");
			Functions.glMultiTexCoord2hNVPtr = (delegate* unmanaged<int, short, short, void>)Functions.LoadFunction("glMultiTexCoord2hNV");
			Functions.glMultiTexCoord2hvNVPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord2hvNV");
			Functions.glMultiTexCoord2iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glMultiTexCoord2i");
			Functions.glMultiTexCoord2iARBPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glMultiTexCoord2iARB");
			Functions.glMultiTexCoord2ivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord2iv");
			Functions.glMultiTexCoord2ivARBPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord2ivARB");
			Functions.glMultiTexCoord2sPtr = (delegate* unmanaged<int, short, short, void>)Functions.LoadFunction("glMultiTexCoord2s");
			Functions.glMultiTexCoord2sARBPtr = (delegate* unmanaged<int, short, short, void>)Functions.LoadFunction("glMultiTexCoord2sARB");
			Functions.glMultiTexCoord2svPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord2sv");
			Functions.glMultiTexCoord2svARBPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord2svARB");
			Functions.glMultiTexCoord2xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, void>)Functions.LoadFunction("glMultiTexCoord2xOES");
			Functions.glMultiTexCoord2xvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glMultiTexCoord2xvOES");
			Functions.glMultiTexCoord3bOESPtr = (delegate* unmanaged<int, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glMultiTexCoord3bOES");
			Functions.glMultiTexCoord3bvOESPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glMultiTexCoord3bvOES");
			Functions.glMultiTexCoord3dPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glMultiTexCoord3d");
			Functions.glMultiTexCoord3dARBPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glMultiTexCoord3dARB");
			Functions.glMultiTexCoord3dvPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord3dv");
			Functions.glMultiTexCoord3dvARBPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord3dvARB");
			Functions.glMultiTexCoord3fPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glMultiTexCoord3f");
			Functions.glMultiTexCoord3fARBPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glMultiTexCoord3fARB");
			Functions.glMultiTexCoord3fvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord3fv");
			Functions.glMultiTexCoord3fvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord3fvARB");
			Functions.glMultiTexCoord3hNVPtr = (delegate* unmanaged<int, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord3hNV");
			Functions.glMultiTexCoord3hvNVPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord3hvNV");
			Functions.glMultiTexCoord3iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glMultiTexCoord3i");
			Functions.glMultiTexCoord3iARBPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glMultiTexCoord3iARB");
			Functions.glMultiTexCoord3ivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord3iv");
			Functions.glMultiTexCoord3ivARBPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord3ivARB");
			Functions.glMultiTexCoord3sPtr = (delegate* unmanaged<int, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord3s");
			Functions.glMultiTexCoord3sARBPtr = (delegate* unmanaged<int, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord3sARB");
			Functions.glMultiTexCoord3svPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord3sv");
			Functions.glMultiTexCoord3svARBPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord3svARB");
			Functions.glMultiTexCoord3xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glMultiTexCoord3xOES");
			Functions.glMultiTexCoord3xvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glMultiTexCoord3xvOES");
			Functions.glMultiTexCoord4bOESPtr = (delegate* unmanaged<int, sbyte, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glMultiTexCoord4bOES");
			Functions.glMultiTexCoord4bvOESPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glMultiTexCoord4bvOES");
			Functions.glMultiTexCoord4dPtr = (delegate* unmanaged<int, double, double, double, double, void>)Functions.LoadFunction("glMultiTexCoord4d");
			Functions.glMultiTexCoord4dARBPtr = (delegate* unmanaged<int, double, double, double, double, void>)Functions.LoadFunction("glMultiTexCoord4dARB");
			Functions.glMultiTexCoord4dvPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord4dv");
			Functions.glMultiTexCoord4dvARBPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glMultiTexCoord4dvARB");
			Functions.glMultiTexCoord4fPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glMultiTexCoord4f");
			Functions.glMultiTexCoord4fARBPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glMultiTexCoord4fARB");
			Functions.glMultiTexCoord4fvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord4fv");
			Functions.glMultiTexCoord4fvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glMultiTexCoord4fvARB");
			Functions.glMultiTexCoord4hNVPtr = (delegate* unmanaged<int, short, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord4hNV");
			Functions.glMultiTexCoord4hvNVPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord4hvNV");
			Functions.glMultiTexCoord4iPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glMultiTexCoord4i");
			Functions.glMultiTexCoord4iARBPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glMultiTexCoord4iARB");
			Functions.glMultiTexCoord4ivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord4iv");
			Functions.glMultiTexCoord4ivARBPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glMultiTexCoord4ivARB");
			Functions.glMultiTexCoord4sPtr = (delegate* unmanaged<int, short, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord4s");
			Functions.glMultiTexCoord4sARBPtr = (delegate* unmanaged<int, short, short, short, short, void>)Functions.LoadFunction("glMultiTexCoord4sARB");
			Functions.glMultiTexCoord4svPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord4sv");
			Functions.glMultiTexCoord4svARBPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glMultiTexCoord4svARB");
			Functions.glMultiTexCoord4xPtr = (delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glMultiTexCoord4x");
			Functions.glMultiTexCoord4xOESPtr = (delegate* unmanaged<int, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glMultiTexCoord4xOES");
			Functions.glMultiTexCoord4xvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glMultiTexCoord4xvOES");
			Functions.glMultiTexCoordP1uiPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glMultiTexCoordP1ui");
			Functions.glMultiTexCoordP1uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glMultiTexCoordP1uiv");
			Functions.glMultiTexCoordP2uiPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glMultiTexCoordP2ui");
			Functions.glMultiTexCoordP2uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glMultiTexCoordP2uiv");
			Functions.glMultiTexCoordP3uiPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glMultiTexCoordP3ui");
			Functions.glMultiTexCoordP3uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glMultiTexCoordP3uiv");
			Functions.glMultiTexCoordP4uiPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glMultiTexCoordP4ui");
			Functions.glMultiTexCoordP4uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glMultiTexCoordP4uiv");
			Functions.glMultiTexCoordPointerEXTPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexCoordPointerEXT");
			Functions.glMultiTexEnvfEXTPtr = (delegate* unmanaged<int, int, int, float, void>)Functions.LoadFunction("glMultiTexEnvfEXT");
			Functions.glMultiTexEnvfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glMultiTexEnvfvEXT");
			Functions.glMultiTexEnviEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glMultiTexEnviEXT");
			Functions.glMultiTexEnvivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glMultiTexEnvivEXT");
			Functions.glMultiTexGendEXTPtr = (delegate* unmanaged<int, int, int, double, void>)Functions.LoadFunction("glMultiTexGendEXT");
			Functions.glMultiTexGendvEXTPtr = (delegate* unmanaged<int, int, int, double*, void>)Functions.LoadFunction("glMultiTexGendvEXT");
			Functions.glMultiTexGenfEXTPtr = (delegate* unmanaged<int, int, int, float, void>)Functions.LoadFunction("glMultiTexGenfEXT");
			Functions.glMultiTexGenfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glMultiTexGenfvEXT");
			Functions.glMultiTexGeniEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glMultiTexGeniEXT");
			Functions.glMultiTexGenivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glMultiTexGenivEXT");
			Functions.glMultiTexImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexImage1DEXT");
			Functions.glMultiTexImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexImage2DEXT");
			Functions.glMultiTexImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexImage3DEXT");
			Functions.glMultiTexParameterIivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glMultiTexParameterIivEXT");
			Functions.glMultiTexParameterIuivEXTPtr = (delegate* unmanaged<int, int, int, uint*, void>)Functions.LoadFunction("glMultiTexParameterIuivEXT");
			Functions.glMultiTexParameterfEXTPtr = (delegate* unmanaged<int, int, int, float, void>)Functions.LoadFunction("glMultiTexParameterfEXT");
			Functions.glMultiTexParameterfvEXTPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glMultiTexParameterfvEXT");
			Functions.glMultiTexParameteriEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glMultiTexParameteriEXT");
			Functions.glMultiTexParameterivEXTPtr = (delegate* unmanaged<int, int, int, int*, void>)Functions.LoadFunction("glMultiTexParameterivEXT");
			Functions.glMultiTexRenderbufferEXTPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glMultiTexRenderbufferEXT");
			Functions.glMultiTexSubImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexSubImage1DEXT");
			Functions.glMultiTexSubImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexSubImage2DEXT");
			Functions.glMultiTexSubImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glMultiTexSubImage3DEXT");
			Functions.glMulticastBarrierNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glMulticastBarrierNV");
			Functions.glMulticastBlitFramebufferNVPtr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, int, void>)Functions.LoadFunction("glMulticastBlitFramebufferNV");
			Functions.glMulticastBufferSubDataNVPtr = (delegate* unmanaged<uint, uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glMulticastBufferSubDataNV");
			Functions.glMulticastCopyBufferSubDataNVPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glMulticastCopyBufferSubDataNV");
			Functions.glMulticastCopyImageSubDataNVPtr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, int, uint, int, int, int, int, int, int, int, int, void>)Functions.LoadFunction("glMulticastCopyImageSubDataNV");
			Functions.glMulticastFramebufferSampleLocationsfvNVPtr = (delegate* unmanaged<uint, uint, uint, int, float*, void>)Functions.LoadFunction("glMulticastFramebufferSampleLocationsfvNV");
			Functions.glMulticastGetQueryObjecti64vNVPtr = (delegate* unmanaged<uint, uint, int, long*, void>)Functions.LoadFunction("glMulticastGetQueryObjecti64vNV");
			Functions.glMulticastGetQueryObjectivNVPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glMulticastGetQueryObjectivNV");
			Functions.glMulticastGetQueryObjectui64vNVPtr = (delegate* unmanaged<uint, uint, int, ulong*, void>)Functions.LoadFunction("glMulticastGetQueryObjectui64vNV");
			Functions.glMulticastGetQueryObjectuivNVPtr = (delegate* unmanaged<uint, uint, int, uint*, void>)Functions.LoadFunction("glMulticastGetQueryObjectuivNV");
			Functions.glMulticastWaitSyncNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glMulticastWaitSyncNV");
			Functions.glNamedBufferAttachMemoryNVPtr = (delegate* unmanaged<uint, uint, ulong, void>)Functions.LoadFunction("glNamedBufferAttachMemoryNV");
			Functions.glNamedBufferDataPtr = (delegate* unmanaged<uint, uint, IntPtr, int, void>)Functions.LoadFunction("glNamedBufferData");
			Functions.glNamedBufferDataEXTPtr = (delegate* unmanaged<uint, uint, IntPtr, int, void>)Functions.LoadFunction("glNamedBufferDataEXT");
			Functions.glNamedBufferPageCommitmentARBPtr = (delegate* unmanaged<uint, uint, uint, bool, void>)Functions.LoadFunction("glNamedBufferPageCommitmentARB");
			Functions.glNamedBufferPageCommitmentEXTPtr = (delegate* unmanaged<uint, uint, uint, bool, void>)Functions.LoadFunction("glNamedBufferPageCommitmentEXT");
			Functions.glNamedBufferStoragePtr = (delegate* unmanaged<uint, uint, IntPtr, uint, void>)Functions.LoadFunction("glNamedBufferStorage");
			Functions.glNamedBufferStorageExternalEXTPtr = (delegate* unmanaged<uint, uint, uint, IntPtr, uint, void>)Functions.LoadFunction("glNamedBufferStorageExternalEXT");
			Functions.glNamedBufferStorageEXTPtr = (delegate* unmanaged<uint, uint, IntPtr, uint, void>)Functions.LoadFunction("glNamedBufferStorageEXT");
			Functions.glNamedBufferStorageMemEXTPtr = (delegate* unmanaged<uint, uint, uint, ulong, void>)Functions.LoadFunction("glNamedBufferStorageMemEXT");
			Functions.glNamedBufferSubDataPtr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glNamedBufferSubData");
			Functions.glNamedBufferSubDataEXTPtr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)Functions.LoadFunction("glNamedBufferSubDataEXT");
			Functions.glNamedCopyBufferSubDataEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glNamedCopyBufferSubDataEXT");
			Functions.glNamedFramebufferDrawBufferPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glNamedFramebufferDrawBuffer");
			Functions.glNamedFramebufferDrawBuffersPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glNamedFramebufferDrawBuffers");
			Functions.glNamedFramebufferParameteriPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferParameteri");
			Functions.glNamedFramebufferParameteriEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferParameteriEXT");
			Functions.glNamedFramebufferReadBufferPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glNamedFramebufferReadBuffer");
			Functions.glNamedFramebufferRenderbufferPtr = (delegate* unmanaged<uint, int, int, uint, void>)Functions.LoadFunction("glNamedFramebufferRenderbuffer");
			Functions.glNamedFramebufferRenderbufferEXTPtr = (delegate* unmanaged<uint, int, int, uint, void>)Functions.LoadFunction("glNamedFramebufferRenderbufferEXT");
			Functions.glNamedFramebufferSampleLocationsfvARBPtr = (delegate* unmanaged<uint, uint, int, float*, void>)Functions.LoadFunction("glNamedFramebufferSampleLocationsfvARB");
			Functions.glNamedFramebufferSampleLocationsfvNVPtr = (delegate* unmanaged<uint, uint, int, float*, void>)Functions.LoadFunction("glNamedFramebufferSampleLocationsfvNV");
			Functions.glNamedFramebufferTexturePtr = (delegate* unmanaged<uint, int, uint, int, void>)Functions.LoadFunction("glNamedFramebufferTexture");
			Functions.glNamedFramebufferSamplePositionsfvAMDPtr = (delegate* unmanaged<uint, uint, uint, float*, void>)Functions.LoadFunction("glNamedFramebufferSamplePositionsfvAMD");
			Functions.glNamedFramebufferTexture1DEXTPtr = (delegate* unmanaged<uint, int, int, uint, int, void>)Functions.LoadFunction("glNamedFramebufferTexture1DEXT");
			Functions.glNamedFramebufferTexture2DEXTPtr = (delegate* unmanaged<uint, int, int, uint, int, void>)Functions.LoadFunction("glNamedFramebufferTexture2DEXT");
			Functions.glNamedFramebufferTexture3DEXTPtr = (delegate* unmanaged<uint, int, int, uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferTexture3DEXT");
			Functions.glNamedFramebufferTextureEXTPtr = (delegate* unmanaged<uint, int, uint, int, void>)Functions.LoadFunction("glNamedFramebufferTextureEXT");
			Functions.glNamedFramebufferTextureFaceEXTPtr = (delegate* unmanaged<uint, int, uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferTextureFaceEXT");
			Functions.glNamedFramebufferTextureLayerPtr = (delegate* unmanaged<uint, int, uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferTextureLayer");
			Functions.glNamedFramebufferTextureLayerEXTPtr = (delegate* unmanaged<uint, int, uint, int, int, void>)Functions.LoadFunction("glNamedFramebufferTextureLayerEXT");
			Functions.glNamedProgramLocalParameter4dEXTPtr = (delegate* unmanaged<uint, int, uint, double, double, double, double, void>)Functions.LoadFunction("glNamedProgramLocalParameter4dEXT");
			Functions.glNamedProgramLocalParameter4dvEXTPtr = (delegate* unmanaged<uint, int, uint, double*, void>)Functions.LoadFunction("glNamedProgramLocalParameter4dvEXT");
			Functions.glNamedProgramLocalParameter4fEXTPtr = (delegate* unmanaged<uint, int, uint, float, float, float, float, void>)Functions.LoadFunction("glNamedProgramLocalParameter4fEXT");
			Functions.glNamedProgramLocalParameter4fvEXTPtr = (delegate* unmanaged<uint, int, uint, float*, void>)Functions.LoadFunction("glNamedProgramLocalParameter4fvEXT");
			Functions.glNamedProgramLocalParameterI4iEXTPtr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)Functions.LoadFunction("glNamedProgramLocalParameterI4iEXT");
			Functions.glNamedProgramLocalParameterI4ivEXTPtr = (delegate* unmanaged<uint, int, uint, int*, void>)Functions.LoadFunction("glNamedProgramLocalParameterI4ivEXT");
			Functions.glNamedProgramLocalParameterI4uiEXTPtr = (delegate* unmanaged<uint, int, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glNamedProgramLocalParameterI4uiEXT");
			Functions.glNamedProgramLocalParameterI4uivEXTPtr = (delegate* unmanaged<uint, int, uint, uint*, void>)Functions.LoadFunction("glNamedProgramLocalParameterI4uivEXT");
			Functions.glNamedProgramLocalParameters4fvEXTPtr = (delegate* unmanaged<uint, int, uint, int, float*, void>)Functions.LoadFunction("glNamedProgramLocalParameters4fvEXT");
			Functions.glNamedProgramLocalParametersI4ivEXTPtr = (delegate* unmanaged<uint, int, uint, int, int*, void>)Functions.LoadFunction("glNamedProgramLocalParametersI4ivEXT");
			Functions.glNamedProgramLocalParametersI4uivEXTPtr = (delegate* unmanaged<uint, int, uint, int, uint*, void>)Functions.LoadFunction("glNamedProgramLocalParametersI4uivEXT");
			Functions.glNamedProgramStringEXTPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glNamedProgramStringEXT");
			Functions.glNamedRenderbufferStoragePtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorage");
			Functions.glNamedRenderbufferStorageEXTPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorageEXT");
			Functions.glNamedRenderbufferStorageMultisamplePtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorageMultisample");
			Functions.glNamedRenderbufferStorageMultisampleAdvancedAMDPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorageMultisampleAdvancedAMD");
			Functions.glNamedRenderbufferStorageMultisampleCoverageEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorageMultisampleCoverageEXT");
			Functions.glNamedRenderbufferStorageMultisampleEXTPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glNamedRenderbufferStorageMultisampleEXT");
			Functions.glNamedStringARBPtr = (delegate* unmanaged<int, int, byte*, int, byte*, void>)Functions.LoadFunction("glNamedStringARB");
			Functions.glNewListPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glNewList");
			Functions.glNewObjectBufferATIPtr = (delegate* unmanaged<int, IntPtr, int, uint>)Functions.LoadFunction("glNewObjectBufferATI");
			Functions.glNormal3bPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glNormal3b");
			Functions.glNormal3bvPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glNormal3bv");
			Functions.glNormal3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glNormal3d");
			Functions.glNormal3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glNormal3dv");
			Functions.glNormal3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glNormal3f");
			Functions.glNormal3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glNormal3fVertex3fSUN");
			Functions.glNormal3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, void>)Functions.LoadFunction("glNormal3fVertex3fvSUN");
			Functions.glNormal3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glNormal3fv");
			Functions.glNormal3hNVPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glNormal3hNV");
			Functions.glNormal3hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glNormal3hvNV");
			Functions.glNormal3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glNormal3i");
			Functions.glNormal3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glNormal3iv");
			Functions.glNormal3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glNormal3s");
			Functions.glNormal3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glNormal3sv");
			Functions.glNormal3xPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glNormal3x");
			Functions.glNormal3xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glNormal3xOES");
			Functions.glNormal3xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glNormal3xvOES");
			Functions.glNormalFormatNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glNormalFormatNV");
			Functions.glNormalP3uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glNormalP3ui");
			Functions.glNormalP3uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glNormalP3uiv");
			Functions.glNormalPointerPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glNormalPointer");
			Functions.glNormalPointerEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glNormalPointerEXT");
			Functions.glNormalPointerListIBMPtr = (delegate* unmanaged<int, int, IntPtr*, int, void>)Functions.LoadFunction("glNormalPointerListIBM");
			Functions.glNormalPointervINTELPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glNormalPointervINTEL");
			Functions.glNormalStream3bATIPtr = (delegate* unmanaged<int, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glNormalStream3bATI");
			Functions.glNormalStream3bvATIPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glNormalStream3bvATI");
			Functions.glNormalStream3dATIPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glNormalStream3dATI");
			Functions.glNormalStream3dvATIPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glNormalStream3dvATI");
			Functions.glNormalStream3fATIPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glNormalStream3fATI");
			Functions.glNormalStream3fvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glNormalStream3fvATI");
			Functions.glNormalStream3iATIPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glNormalStream3iATI");
			Functions.glNormalStream3ivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glNormalStream3ivATI");
			Functions.glNormalStream3sATIPtr = (delegate* unmanaged<int, short, short, short, void>)Functions.LoadFunction("glNormalStream3sATI");
			Functions.glNormalStream3svATIPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glNormalStream3svATI");
			Functions.glObjectLabelPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glObjectLabel");
			Functions.glObjectLabelKHRPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glObjectLabelKHR");
			Functions.glObjectPtrLabelPtr = (delegate* unmanaged<IntPtr, int, byte*, void>)Functions.LoadFunction("glObjectPtrLabel");
			Functions.glObjectPtrLabelKHRPtr = (delegate* unmanaged<IntPtr, int, byte*, void>)Functions.LoadFunction("glObjectPtrLabelKHR");
			Functions.glObjectPurgeableAPPLEPtr = (delegate* unmanaged<int, uint, int, int>)Functions.LoadFunction("glObjectPurgeableAPPLE");
			Functions.glObjectUnpurgeableAPPLEPtr = (delegate* unmanaged<int, uint, int, int>)Functions.LoadFunction("glObjectUnpurgeableAPPLE");
			Functions.glOrthoPtr = (delegate* unmanaged<double, double, double, double, double, double, void>)Functions.LoadFunction("glOrtho");
			Functions.glOrthofPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glOrthof");
			Functions.glOrthofOESPtr = (delegate* unmanaged<float, float, float, float, float, float, void>)Functions.LoadFunction("glOrthofOES");
			Functions.glOrthoxPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glOrthox");
			Functions.glOrthoxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glOrthoxOES");
			Functions.glPNTrianglesfATIPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPNTrianglesfATI");
			Functions.glPNTrianglesiATIPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPNTrianglesiATI");
			Functions.glPassTexCoordATIPtr = (delegate* unmanaged<uint, uint, int, void>)Functions.LoadFunction("glPassTexCoordATI");
			Functions.glPassThroughPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glPassThrough");
			Functions.glPassThroughxOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glPassThroughxOES");
			Functions.glPatchParameterfvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPatchParameterfv");
			Functions.glPatchParameteriPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPatchParameteri");
			Functions.glPatchParameteriEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPatchParameteriEXT");
			Functions.glPatchParameteriOESPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPatchParameteriOES");
			Functions.glPathColorGenNVPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glPathColorGenNV");
			Functions.glPathCommandsNVPtr = (delegate* unmanaged<uint, int, byte*, int, int, IntPtr, void>)Functions.LoadFunction("glPathCommandsNV");
			Functions.glPathCoordsNVPtr = (delegate* unmanaged<uint, int, int, IntPtr, void>)Functions.LoadFunction("glPathCoordsNV");
			Functions.glPathCoverDepthFuncNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glPathCoverDepthFuncNV");
			Functions.glPathDashArrayNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glPathDashArrayNV");
			Functions.glPathFogGenNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glPathFogGenNV");
			Functions.glPathGlyphIndexArrayNVPtr = (delegate* unmanaged<uint, int, IntPtr, uint, uint, int, uint, float, int>)Functions.LoadFunction("glPathGlyphIndexArrayNV");
			Functions.glPathGlyphIndexRangeNVPtr = (delegate* unmanaged<int, IntPtr, uint, uint, float, uint*, int>)Functions.LoadFunction("glPathGlyphIndexRangeNV");
			Functions.glPathGlyphRangeNVPtr = (delegate* unmanaged<uint, int, IntPtr, uint, uint, int, int, uint, float, void>)Functions.LoadFunction("glPathGlyphRangeNV");
			Functions.glPathGlyphsNVPtr = (delegate* unmanaged<uint, int, IntPtr, uint, int, int, IntPtr, int, uint, float, void>)Functions.LoadFunction("glPathGlyphsNV");
			Functions.glPathMemoryGlyphIndexArrayNVPtr = (delegate* unmanaged<uint, int, uint, IntPtr, int, uint, int, uint, float, int>)Functions.LoadFunction("glPathMemoryGlyphIndexArrayNV");
			Functions.glPathParameterfNVPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glPathParameterfNV");
			Functions.glPathParameterfvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glPathParameterfvNV");
			Functions.glPathParameteriNVPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glPathParameteriNV");
			Functions.glPathParameterivNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glPathParameterivNV");
			Functions.glPathStencilDepthOffsetNVPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glPathStencilDepthOffsetNV");
			Functions.glPathStencilFuncNVPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glPathStencilFuncNV");
			Functions.glPathStringNVPtr = (delegate* unmanaged<uint, int, int, IntPtr, void>)Functions.LoadFunction("glPathStringNV");
			Functions.glPathSubCommandsNVPtr = (delegate* unmanaged<uint, int, int, int, byte*, int, int, IntPtr, void>)Functions.LoadFunction("glPathSubCommandsNV");
			Functions.glPathSubCoordsNVPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glPathSubCoordsNV");
			Functions.glPathTexGenNVPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glPathTexGenNV");
			Functions.glPauseTransformFeedbackPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPauseTransformFeedback");
			Functions.glPauseTransformFeedbackNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPauseTransformFeedbackNV");
			Functions.glPixelDataRangeNVPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glPixelDataRangeNV");
			Functions.glPixelMapfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glPixelMapfv");
			Functions.glPixelMapuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glPixelMapuiv");
			Functions.glPixelMapusvPtr = (delegate* unmanaged<int, int, ushort*, void>)Functions.LoadFunction("glPixelMapusv");
			Functions.glPixelMapxPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glPixelMapx");
			Functions.glPixelStorefPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPixelStoref");
			Functions.glPixelStoreiPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPixelStorei");
			Functions.glPixelStorexPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glPixelStorex");
			Functions.glPixelTexGenParameterfSGISPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPixelTexGenParameterfSGIS");
			Functions.glPixelTexGenParameterfvSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPixelTexGenParameterfvSGIS");
			Functions.glPixelTexGenParameteriSGISPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPixelTexGenParameteriSGIS");
			Functions.glPixelTexGenParameterivSGISPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glPixelTexGenParameterivSGIS");
			Functions.glPixelTexGenSGIXPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glPixelTexGenSGIX");
			Functions.glPixelTransferfPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPixelTransferf");
			Functions.glPixelTransferiPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPixelTransferi");
			Functions.glPixelTransferxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glPixelTransferxOES");
			Functions.glPixelTransformParameterfEXTPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glPixelTransformParameterfEXT");
			Functions.glPixelTransformParameterfvEXTPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glPixelTransformParameterfvEXT");
			Functions.glPixelTransformParameteriEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glPixelTransformParameteriEXT");
			Functions.glPixelTransformParameterivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glPixelTransformParameterivEXT");
			Functions.glPixelZoomPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glPixelZoom");
			Functions.glPixelZoomxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glPixelZoomxOES");
			Functions.glPointAlongPathNVPtr = (delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, bool>)Functions.LoadFunction("glPointAlongPathNV");
			Functions.glPointParameterfPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPointParameterf");
			Functions.glPointParameterfARBPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPointParameterfARB");
			Functions.glPointParameterfEXTPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPointParameterfEXT");
			Functions.glPointParameterfSGISPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glPointParameterfSGIS");
			Functions.glPointParameterfvPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPointParameterfv");
			Functions.glPointParameterfvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPointParameterfvARB");
			Functions.glPointParameterfvEXTPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPointParameterfvEXT");
			Functions.glPointParameterfvSGISPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glPointParameterfvSGIS");
			Functions.glPointParameteriPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPointParameteri");
			Functions.glPointParameteriNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPointParameteriNV");
			Functions.glPointParameterivPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glPointParameteriv");
			Functions.glPointParameterivNVPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glPointParameterivNV");
			Functions.glPointParameterxPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glPointParameterx");
			Functions.glPointParameterxOESPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glPointParameterxOES");
			Functions.glPointParameterxvPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glPointParameterxv");
			Functions.glPointParameterxvOESPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glPointParameterxvOES");
			Functions.glPointSizePtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glPointSize");
			Functions.glPointSizePointerOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glPointSizePointerOES");
			Functions.glPointSizexPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glPointSizex");
			Functions.glPointSizexOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glPointSizexOES");
			Functions.glPollAsyncSGIXPtr = (delegate* unmanaged<uint*, int>)Functions.LoadFunction("glPollAsyncSGIX");
			Functions.glPollInstrumentsSGIXPtr = (delegate* unmanaged<int*, int>)Functions.LoadFunction("glPollInstrumentsSGIX");
			Functions.glPolygonModePtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPolygonMode");
			Functions.glPolygonModeNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glPolygonModeNV");
			Functions.glPolygonOffsetPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glPolygonOffset");
			Functions.glPolygonOffsetClampPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glPolygonOffsetClamp");
			Functions.glPolygonOffsetClampEXTPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glPolygonOffsetClampEXT");
			Functions.glPolygonOffsetEXTPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glPolygonOffsetEXT");
			Functions.glPolygonOffsetxPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glPolygonOffsetx");
			Functions.glPolygonOffsetxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glPolygonOffsetxOES");
			Functions.glPolygonStipplePtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glPolygonStipple");
			Functions.glPopAttribPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopAttrib");
			Functions.glPopClientAttribPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopClientAttrib");
			Functions.glPopDebugGroupPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopDebugGroup");
			Functions.glPopDebugGroupKHRPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopDebugGroupKHR");
			Functions.glPopGroupMarkerEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopGroupMarkerEXT");
			Functions.glPopMatrixPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopMatrix");
			Functions.glPopNamePtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPopName");
			Functions.glPresentFrameDualFillNVPtr = (delegate* unmanaged<uint, ulong, uint, uint, int, int, uint, int, uint, int, uint, int, uint, void>)Functions.LoadFunction("glPresentFrameDualFillNV");
			Functions.glPresentFrameKeyedNVPtr = (delegate* unmanaged<uint, ulong, uint, uint, int, int, uint, uint, int, uint, uint, void>)Functions.LoadFunction("glPresentFrameKeyedNV");
			Functions.glPrimitiveBoundingBoxPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glPrimitiveBoundingBox");
			Functions.glPrimitiveBoundingBoxARBPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glPrimitiveBoundingBoxARB");
			Functions.glPrimitiveBoundingBoxEXTPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glPrimitiveBoundingBoxEXT");
			Functions.glPrimitiveBoundingBoxOESPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glPrimitiveBoundingBoxOES");
			Functions.glPrimitiveRestartIndexPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPrimitiveRestartIndex");
			Functions.glPrimitiveRestartIndexNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPrimitiveRestartIndexNV");
			Functions.glPrimitiveRestartNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPrimitiveRestartNV");
			Functions.glPrioritizeTexturesPtr = (delegate* unmanaged<int, uint*, float*, void>)Functions.LoadFunction("glPrioritizeTextures");
			Functions.glPrioritizeTexturesEXTPtr = (delegate* unmanaged<int, uint*, float*, void>)Functions.LoadFunction("glPrioritizeTexturesEXT");
			Functions.glPrioritizeTexturesxOESPtr = (delegate* unmanaged<int, uint*, IntPtr*, void>)Functions.LoadFunction("glPrioritizeTexturesxOES");
			Functions.glProgramBinaryPtr = (delegate* unmanaged<uint, int, IntPtr, int, void>)Functions.LoadFunction("glProgramBinary");
			Functions.glProgramBinaryOESPtr = (delegate* unmanaged<uint, int, IntPtr, int, void>)Functions.LoadFunction("glProgramBinaryOES");
			Functions.glProgramBufferParametersIivNVPtr = (delegate* unmanaged<int, uint, uint, int, int*, void>)Functions.LoadFunction("glProgramBufferParametersIivNV");
			Functions.glProgramBufferParametersIuivNVPtr = (delegate* unmanaged<int, uint, uint, int, uint*, void>)Functions.LoadFunction("glProgramBufferParametersIuivNV");
			Functions.glProgramBufferParametersfvNVPtr = (delegate* unmanaged<int, uint, uint, int, float*, void>)Functions.LoadFunction("glProgramBufferParametersfvNV");
			Functions.glProgramEnvParameter4dARBPtr = (delegate* unmanaged<int, uint, double, double, double, double, void>)Functions.LoadFunction("glProgramEnvParameter4dARB");
			Functions.glProgramEnvParameter4dvARBPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glProgramEnvParameter4dvARB");
			Functions.glProgramEnvParameter4fARBPtr = (delegate* unmanaged<int, uint, float, float, float, float, void>)Functions.LoadFunction("glProgramEnvParameter4fARB");
			Functions.glProgramEnvParameter4fvARBPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glProgramEnvParameter4fvARB");
			Functions.glProgramEnvParameterI4iNVPtr = (delegate* unmanaged<int, uint, int, int, int, int, void>)Functions.LoadFunction("glProgramEnvParameterI4iNV");
			Functions.glProgramEnvParameterI4ivNVPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glProgramEnvParameterI4ivNV");
			Functions.glProgramEnvParameterI4uiNVPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glProgramEnvParameterI4uiNV");
			Functions.glProgramEnvParameterI4uivNVPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glProgramEnvParameterI4uivNV");
			Functions.glProgramEnvParameters4fvEXTPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glProgramEnvParameters4fvEXT");
			Functions.glProgramEnvParametersI4ivNVPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glProgramEnvParametersI4ivNV");
			Functions.glProgramEnvParametersI4uivNVPtr = (delegate* unmanaged<int, uint, int, uint*, void>)Functions.LoadFunction("glProgramEnvParametersI4uivNV");
			Functions.glProgramLocalParameter4dARBPtr = (delegate* unmanaged<int, uint, double, double, double, double, void>)Functions.LoadFunction("glProgramLocalParameter4dARB");
			Functions.glProgramLocalParameter4dvARBPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glProgramLocalParameter4dvARB");
			Functions.glProgramLocalParameter4fARBPtr = (delegate* unmanaged<int, uint, float, float, float, float, void>)Functions.LoadFunction("glProgramLocalParameter4fARB");
			Functions.glProgramLocalParameter4fvARBPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glProgramLocalParameter4fvARB");
			Functions.glProgramLocalParameterI4iNVPtr = (delegate* unmanaged<int, uint, int, int, int, int, void>)Functions.LoadFunction("glProgramLocalParameterI4iNV");
			Functions.glProgramLocalParameterI4ivNVPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glProgramLocalParameterI4ivNV");
			Functions.glProgramLocalParameterI4uiNVPtr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glProgramLocalParameterI4uiNV");
			Functions.glProgramLocalParameterI4uivNVPtr = (delegate* unmanaged<int, uint, uint*, void>)Functions.LoadFunction("glProgramLocalParameterI4uivNV");
			Functions.glProgramLocalParameters4fvEXTPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glProgramLocalParameters4fvEXT");
			Functions.glProgramLocalParametersI4ivNVPtr = (delegate* unmanaged<int, uint, int, int*, void>)Functions.LoadFunction("glProgramLocalParametersI4ivNV");
			Functions.glProgramLocalParametersI4uivNVPtr = (delegate* unmanaged<int, uint, int, uint*, void>)Functions.LoadFunction("glProgramLocalParametersI4uivNV");
			Functions.glProgramNamedParameter4dNVPtr = (delegate* unmanaged<uint, int, byte*, double, double, double, double, void>)Functions.LoadFunction("glProgramNamedParameter4dNV");
			Functions.glProgramNamedParameter4dvNVPtr = (delegate* unmanaged<uint, int, byte*, double*, void>)Functions.LoadFunction("glProgramNamedParameter4dvNV");
			Functions.glProgramNamedParameter4fNVPtr = (delegate* unmanaged<uint, int, byte*, float, float, float, float, void>)Functions.LoadFunction("glProgramNamedParameter4fNV");
			Functions.glProgramNamedParameter4fvNVPtr = (delegate* unmanaged<uint, int, byte*, float*, void>)Functions.LoadFunction("glProgramNamedParameter4fvNV");
			Functions.glProgramParameter4dNVPtr = (delegate* unmanaged<int, uint, double, double, double, double, void>)Functions.LoadFunction("glProgramParameter4dNV");
			Functions.glProgramParameter4dvNVPtr = (delegate* unmanaged<int, uint, double*, void>)Functions.LoadFunction("glProgramParameter4dvNV");
			Functions.glProgramParameter4fNVPtr = (delegate* unmanaged<int, uint, float, float, float, float, void>)Functions.LoadFunction("glProgramParameter4fNV");
			Functions.glProgramParameter4fvNVPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glProgramParameter4fvNV");
			Functions.glProgramParameteriPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glProgramParameteri");
			Functions.glProgramParameteriARBPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glProgramParameteriARB");
			Functions.glProgramParameteriEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glProgramParameteriEXT");
			Functions.glProgramParameters4dvNVPtr = (delegate* unmanaged<int, uint, int, double*, void>)Functions.LoadFunction("glProgramParameters4dvNV");
			Functions.glProgramParameters4fvNVPtr = (delegate* unmanaged<int, uint, int, float*, void>)Functions.LoadFunction("glProgramParameters4fvNV");
			Functions.glProgramPathFragmentInputGenNVPtr = (delegate* unmanaged<uint, int, int, int, float*, void>)Functions.LoadFunction("glProgramPathFragmentInputGenNV");
			Functions.glProgramStringARBPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glProgramStringARB");
			Functions.glProgramSubroutineParametersuivNVPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glProgramSubroutineParametersuivNV");
			Functions.glProgramUniform1dPtr = (delegate* unmanaged<uint, int, double, void>)Functions.LoadFunction("glProgramUniform1d");
			Functions.glProgramUniform1dEXTPtr = (delegate* unmanaged<uint, int, double, void>)Functions.LoadFunction("glProgramUniform1dEXT");
			Functions.glProgramUniform1dvPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform1dv");
			Functions.glProgramUniform1dvEXTPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform1dvEXT");
			Functions.glProgramUniform1fPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glProgramUniform1f");
			Functions.glProgramUniform1fEXTPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glProgramUniform1fEXT");
			Functions.glProgramUniform1fvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform1fv");
			Functions.glProgramUniform1fvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform1fvEXT");
			Functions.glProgramUniform1iPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glProgramUniform1i");
			Functions.glProgramUniform1i64ARBPtr = (delegate* unmanaged<uint, int, long, void>)Functions.LoadFunction("glProgramUniform1i64ARB");
			Functions.glProgramUniform1i64NVPtr = (delegate* unmanaged<uint, int, long, void>)Functions.LoadFunction("glProgramUniform1i64NV");
			Functions.glProgramUniform1i64vARBPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform1i64vARB");
			Functions.glProgramUniform1i64vNVPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform1i64vNV");
			Functions.glProgramUniform1iEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glProgramUniform1iEXT");
			Functions.glProgramUniform1ivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform1iv");
			Functions.glProgramUniform1ivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform1ivEXT");
			Functions.glProgramUniform1uiPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glProgramUniform1ui");
			Functions.glProgramUniform1ui64ARBPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniform1ui64ARB");
			Functions.glProgramUniform1ui64NVPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniform1ui64NV");
			Functions.glProgramUniform1ui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform1ui64vARB");
			Functions.glProgramUniform1ui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform1ui64vNV");
			Functions.glProgramUniform1uiEXTPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glProgramUniform1uiEXT");
			Functions.glProgramUniform1uivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform1uiv");
			Functions.glProgramUniform1uivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform1uivEXT");
			Functions.glProgramUniform2dPtr = (delegate* unmanaged<uint, int, double, double, void>)Functions.LoadFunction("glProgramUniform2d");
			Functions.glProgramUniform2dEXTPtr = (delegate* unmanaged<uint, int, double, double, void>)Functions.LoadFunction("glProgramUniform2dEXT");
			Functions.glProgramUniform2dvPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform2dv");
			Functions.glProgramUniform2dvEXTPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform2dvEXT");
			Functions.glProgramUniform2fPtr = (delegate* unmanaged<uint, int, float, float, void>)Functions.LoadFunction("glProgramUniform2f");
			Functions.glProgramUniform2fEXTPtr = (delegate* unmanaged<uint, int, float, float, void>)Functions.LoadFunction("glProgramUniform2fEXT");
			Functions.glProgramUniform2fvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform2fv");
			Functions.glProgramUniform2fvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform2fvEXT");
			Functions.glProgramUniform2iPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glProgramUniform2i");
			Functions.glProgramUniform2i64ARBPtr = (delegate* unmanaged<uint, int, long, long, void>)Functions.LoadFunction("glProgramUniform2i64ARB");
			Functions.glProgramUniform2i64NVPtr = (delegate* unmanaged<uint, int, long, long, void>)Functions.LoadFunction("glProgramUniform2i64NV");
			Functions.glProgramUniform2i64vARBPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform2i64vARB");
			Functions.glProgramUniform2i64vNVPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform2i64vNV");
			Functions.glProgramUniform2iEXTPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glProgramUniform2iEXT");
			Functions.glProgramUniform2ivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform2iv");
			Functions.glProgramUniform2ivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform2ivEXT");
			Functions.glProgramUniform2uiPtr = (delegate* unmanaged<uint, int, uint, uint, void>)Functions.LoadFunction("glProgramUniform2ui");
			Functions.glProgramUniform2ui64ARBPtr = (delegate* unmanaged<uint, int, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform2ui64ARB");
			Functions.glProgramUniform2ui64NVPtr = (delegate* unmanaged<uint, int, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform2ui64NV");
			Functions.glProgramUniform2ui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform2ui64vARB");
			Functions.glProgramUniform2ui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform2ui64vNV");
			Functions.glProgramUniform2uiEXTPtr = (delegate* unmanaged<uint, int, uint, uint, void>)Functions.LoadFunction("glProgramUniform2uiEXT");
			Functions.glProgramUniform2uivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform2uiv");
			Functions.glProgramUniform2uivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform2uivEXT");
			Functions.glProgramUniform3dPtr = (delegate* unmanaged<uint, int, double, double, double, void>)Functions.LoadFunction("glProgramUniform3d");
			Functions.glProgramUniform3dEXTPtr = (delegate* unmanaged<uint, int, double, double, double, void>)Functions.LoadFunction("glProgramUniform3dEXT");
			Functions.glProgramUniform3dvPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform3dv");
			Functions.glProgramUniform3dvEXTPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform3dvEXT");
			Functions.glProgramUniform3fPtr = (delegate* unmanaged<uint, int, float, float, float, void>)Functions.LoadFunction("glProgramUniform3f");
			Functions.glProgramUniform3fEXTPtr = (delegate* unmanaged<uint, int, float, float, float, void>)Functions.LoadFunction("glProgramUniform3fEXT");
			Functions.glProgramUniform3fvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform3fv");
			Functions.glProgramUniform3fvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform3fvEXT");
			Functions.glProgramUniform3iPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glProgramUniform3i");
			Functions.glProgramUniform3i64ARBPtr = (delegate* unmanaged<uint, int, long, long, long, void>)Functions.LoadFunction("glProgramUniform3i64ARB");
			Functions.glProgramUniform3i64NVPtr = (delegate* unmanaged<uint, int, long, long, long, void>)Functions.LoadFunction("glProgramUniform3i64NV");
			Functions.glProgramUniform3i64vARBPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform3i64vARB");
			Functions.glProgramUniform3i64vNVPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform3i64vNV");
			Functions.glProgramUniform3iEXTPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glProgramUniform3iEXT");
			Functions.glProgramUniform3ivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform3iv");
			Functions.glProgramUniform3ivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform3ivEXT");
			Functions.glProgramUniform3uiPtr = (delegate* unmanaged<uint, int, uint, uint, uint, void>)Functions.LoadFunction("glProgramUniform3ui");
			Functions.glProgramUniform3ui64ARBPtr = (delegate* unmanaged<uint, int, ulong, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform3ui64ARB");
			Functions.glProgramUniform3ui64NVPtr = (delegate* unmanaged<uint, int, ulong, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform3ui64NV");
			Functions.glProgramUniform3ui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform3ui64vARB");
			Functions.glProgramUniform3ui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform3ui64vNV");
			Functions.glProgramUniform3uiEXTPtr = (delegate* unmanaged<uint, int, uint, uint, uint, void>)Functions.LoadFunction("glProgramUniform3uiEXT");
			Functions.glProgramUniform3uivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform3uiv");
			Functions.glProgramUniform3uivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform3uivEXT");
			Functions.glProgramUniform4dPtr = (delegate* unmanaged<uint, int, double, double, double, double, void>)Functions.LoadFunction("glProgramUniform4d");
			Functions.glProgramUniform4dEXTPtr = (delegate* unmanaged<uint, int, double, double, double, double, void>)Functions.LoadFunction("glProgramUniform4dEXT");
			Functions.glProgramUniform4dvPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform4dv");
			Functions.glProgramUniform4dvEXTPtr = (delegate* unmanaged<uint, int, int, double*, void>)Functions.LoadFunction("glProgramUniform4dvEXT");
			Functions.glProgramUniform4fPtr = (delegate* unmanaged<uint, int, float, float, float, float, void>)Functions.LoadFunction("glProgramUniform4f");
			Functions.glProgramUniform4fEXTPtr = (delegate* unmanaged<uint, int, float, float, float, float, void>)Functions.LoadFunction("glProgramUniform4fEXT");
			Functions.glProgramUniform4fvPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform4fv");
			Functions.glProgramUniform4fvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glProgramUniform4fvEXT");
			Functions.glProgramUniform4iPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glProgramUniform4i");
			Functions.glProgramUniform4i64ARBPtr = (delegate* unmanaged<uint, int, long, long, long, long, void>)Functions.LoadFunction("glProgramUniform4i64ARB");
			Functions.glProgramUniform4i64NVPtr = (delegate* unmanaged<uint, int, long, long, long, long, void>)Functions.LoadFunction("glProgramUniform4i64NV");
			Functions.glProgramUniform4i64vARBPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform4i64vARB");
			Functions.glProgramUniform4i64vNVPtr = (delegate* unmanaged<uint, int, int, long*, void>)Functions.LoadFunction("glProgramUniform4i64vNV");
			Functions.glProgramUniform4iEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glProgramUniform4iEXT");
			Functions.glProgramUniform4ivPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform4iv");
			Functions.glProgramUniform4ivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glProgramUniform4ivEXT");
			Functions.glProgramUniform4uiPtr = (delegate* unmanaged<uint, int, uint, uint, uint, uint, void>)Functions.LoadFunction("glProgramUniform4ui");
			Functions.glProgramUniform4ui64ARBPtr = (delegate* unmanaged<uint, int, ulong, ulong, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform4ui64ARB");
			Functions.glProgramUniform4ui64NVPtr = (delegate* unmanaged<uint, int, ulong, ulong, ulong, ulong, void>)Functions.LoadFunction("glProgramUniform4ui64NV");
			Functions.glProgramUniform4ui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform4ui64vARB");
			Functions.glProgramUniform4ui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniform4ui64vNV");
			Functions.glProgramUniform4uiEXTPtr = (delegate* unmanaged<uint, int, uint, uint, uint, uint, void>)Functions.LoadFunction("glProgramUniform4uiEXT");
			Functions.glProgramUniform4uivPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform4uiv");
			Functions.glProgramUniform4uivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glProgramUniform4uivEXT");
			Functions.glProgramUniformHandleui64ARBPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniformHandleui64ARB");
			Functions.glProgramUniformHandleui64IMGPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniformHandleui64IMG");
			Functions.glProgramUniformHandleui64NVPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniformHandleui64NV");
			Functions.glProgramUniformHandleui64vARBPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniformHandleui64vARB");
			Functions.glProgramUniformHandleui64vIMGPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniformHandleui64vIMG");
			Functions.glProgramUniformHandleui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniformHandleui64vNV");
			Functions.glProgramUniformMatrix2dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2dv");
			Functions.glProgramUniformMatrix2dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2dvEXT");
			Functions.glProgramUniformMatrix2fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2fv");
			Functions.glProgramUniformMatrix2fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2fvEXT");
			Functions.glProgramUniformMatrix2x3dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2x3dv");
			Functions.glProgramUniformMatrix2x3dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2x3dvEXT");
			Functions.glProgramUniformMatrix2x3fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2x3fv");
			Functions.glProgramUniformMatrix2x3fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2x3fvEXT");
			Functions.glProgramUniformMatrix2x4dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2x4dv");
			Functions.glProgramUniformMatrix2x4dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix2x4dvEXT");
			Functions.glProgramUniformMatrix2x4fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2x4fv");
			Functions.glProgramUniformMatrix2x4fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix2x4fvEXT");
			Functions.glProgramUniformMatrix3dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3dv");
			Functions.glProgramUniformMatrix3dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3dvEXT");
			Functions.glProgramUniformMatrix3fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3fv");
			Functions.glProgramUniformMatrix3fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3fvEXT");
			Functions.glProgramUniformMatrix3x2dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3x2dv");
			Functions.glProgramUniformMatrix3x2dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3x2dvEXT");
			Functions.glProgramUniformMatrix3x2fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3x2fv");
			Functions.glProgramUniformMatrix3x2fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3x2fvEXT");
			Functions.glProgramUniformMatrix3x4dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3x4dv");
			Functions.glProgramUniformMatrix3x4dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix3x4dvEXT");
			Functions.glProgramUniformMatrix3x4fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3x4fv");
			Functions.glProgramUniformMatrix3x4fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix3x4fvEXT");
			Functions.glProgramUniformMatrix4dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4dv");
			Functions.glProgramUniformMatrix4dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4dvEXT");
			Functions.glProgramUniformMatrix4fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4fv");
			Functions.glProgramUniformMatrix4fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4fvEXT");
			Functions.glProgramUniformMatrix4x2dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4x2dv");
			Functions.glProgramUniformMatrix4x2dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4x2dvEXT");
			Functions.glProgramUniformMatrix4x2fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4x2fv");
			Functions.glProgramUniformMatrix4x2fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4x2fvEXT");
			Functions.glProgramUniformMatrix4x3dvPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4x3dv");
			Functions.glProgramUniformMatrix4x3dvEXTPtr = (delegate* unmanaged<uint, int, int, bool, double*, void>)Functions.LoadFunction("glProgramUniformMatrix4x3dvEXT");
			Functions.glProgramUniformMatrix4x3fvPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4x3fv");
			Functions.glProgramUniformMatrix4x3fvEXTPtr = (delegate* unmanaged<uint, int, int, bool, float*, void>)Functions.LoadFunction("glProgramUniformMatrix4x3fvEXT");
			Functions.glProgramUniformui64NVPtr = (delegate* unmanaged<uint, int, ulong, void>)Functions.LoadFunction("glProgramUniformui64NV");
			Functions.glProgramUniformui64vNVPtr = (delegate* unmanaged<uint, int, int, ulong*, void>)Functions.LoadFunction("glProgramUniformui64vNV");
			Functions.glProgramVertexLimitNVPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glProgramVertexLimitNV");
			Functions.glProvokingVertexPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glProvokingVertex");
			Functions.glProvokingVertexEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glProvokingVertexEXT");
			Functions.glPushAttribPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPushAttrib");
			Functions.glPushClientAttribPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPushClientAttrib");
			Functions.glPushClientAttribDefaultEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPushClientAttribDefaultEXT");
			Functions.glPushDebugGroupPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glPushDebugGroup");
			Functions.glPushDebugGroupKHRPtr = (delegate* unmanaged<int, uint, int, byte*, void>)Functions.LoadFunction("glPushDebugGroupKHR");
			Functions.glPushGroupMarkerEXTPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glPushGroupMarkerEXT");
			Functions.glPushMatrixPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glPushMatrix");
			Functions.glPushNamePtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glPushName");
			Functions.glQueryCounterPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glQueryCounter");
			Functions.glQueryCounterEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glQueryCounterEXT");
			Functions.glQueryMatrixxOESPtr = (delegate* unmanaged<IntPtr*, int*, uint>)Functions.LoadFunction("glQueryMatrixxOES");
			Functions.glQueryObjectParameteruiAMDPtr = (delegate* unmanaged<int, uint, int, uint, void>)Functions.LoadFunction("glQueryObjectParameteruiAMD");
			Functions.glQueryResourceNVPtr = (delegate* unmanaged<int, int, uint, int*, int>)Functions.LoadFunction("glQueryResourceNV");
			Functions.glQueryResourceTagNVPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glQueryResourceTagNV");
			Functions.glRasterPos2dPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glRasterPos2d");
			Functions.glRasterPos2dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glRasterPos2dv");
			Functions.glRasterPos2fPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glRasterPos2f");
			Functions.glRasterPos2fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glRasterPos2fv");
			Functions.glRasterPos2iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glRasterPos2i");
			Functions.glRasterPos2ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glRasterPos2iv");
			Functions.glRasterPos2sPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glRasterPos2s");
			Functions.glRasterPos2svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glRasterPos2sv");
			Functions.glRasterPos2xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glRasterPos2xOES");
			Functions.glRasterPos2xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glRasterPos2xvOES");
			Functions.glRasterPos3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glRasterPos3d");
			Functions.glRasterPos3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glRasterPos3dv");
			Functions.glRasterPos3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glRasterPos3f");
			Functions.glRasterPos3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glRasterPos3fv");
			Functions.glRasterPos3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glRasterPos3i");
			Functions.glRasterPos3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glRasterPos3iv");
			Functions.glRasterPos3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glRasterPos3s");
			Functions.glRasterPos3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glRasterPos3sv");
			Functions.glRasterPos3xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glRasterPos3xOES");
			Functions.glRasterPos3xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glRasterPos3xvOES");
			Functions.glRasterPos4dPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glRasterPos4d");
			Functions.glRasterPos4dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glRasterPos4dv");
			Functions.glRasterPos4fPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glRasterPos4f");
			Functions.glRasterPos4fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glRasterPos4fv");
			Functions.glRasterPos4iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glRasterPos4i");
			Functions.glRasterPos4ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glRasterPos4iv");
			Functions.glRasterPos4sPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glRasterPos4s");
			Functions.glRasterPos4svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glRasterPos4sv");
			Functions.glRasterPos4xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glRasterPos4xOES");
			Functions.glRasterPos4xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glRasterPos4xvOES");
			Functions.glRasterSamplesEXTPtr = (delegate* unmanaged<uint, bool, void>)Functions.LoadFunction("glRasterSamplesEXT");
			Functions.glReadBufferPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glReadBuffer");
			Functions.glReadBufferIndexedEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glReadBufferIndexedEXT");
			Functions.glReadBufferNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glReadBufferNV");
			Functions.glReadInstrumentsSGIXPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glReadInstrumentsSGIX");
			Functions.glReadPixelsPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glReadPixels");
			Functions.glReadnPixelsPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glReadnPixels");
			Functions.glReadnPixelsARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glReadnPixelsARB");
			Functions.glReadnPixelsEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glReadnPixelsEXT");
			Functions.glReadnPixelsKHRPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glReadnPixelsKHR");
			Functions.glReleaseKeyedMutexWin32EXTPtr = (delegate* unmanaged<uint, ulong, bool>)Functions.LoadFunction("glReleaseKeyedMutexWin32EXT");
			Functions.glRectdPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glRectd");
			Functions.glRectdvPtr = (delegate* unmanaged<double*, double*, void>)Functions.LoadFunction("glRectdv");
			Functions.glRectfPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glRectf");
			Functions.glRectfvPtr = (delegate* unmanaged<float*, float*, void>)Functions.LoadFunction("glRectfv");
			Functions.glRectiPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glRecti");
			Functions.glRectivPtr = (delegate* unmanaged<int*, int*, void>)Functions.LoadFunction("glRectiv");
			Functions.glRectsPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glRects");
			Functions.glRectsvPtr = (delegate* unmanaged<short*, short*, void>)Functions.LoadFunction("glRectsv");
			Functions.glRectxOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glRectxOES");
			Functions.glRectxvOESPtr = (delegate* unmanaged<IntPtr*, IntPtr*, void>)Functions.LoadFunction("glRectxvOES");
			Functions.glReferencePlaneSGIXPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glReferencePlaneSGIX");
			Functions.glReleaseShaderCompilerPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glReleaseShaderCompiler");
			Functions.glRenderGpuMaskNVPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glRenderGpuMaskNV");
			Functions.glRenderModePtr = (delegate* unmanaged<int, int>)Functions.LoadFunction("glRenderMode");
			Functions.glRenderbufferStoragePtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorage");
			Functions.glRenderbufferStorageEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageEXT");
			Functions.glRenderbufferStorageMultisamplePtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisample");
			Functions.glRenderbufferStorageMultisampleANGLEPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleANGLE");
			Functions.glRenderbufferStorageMultisampleAPPLEPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleAPPLE");
			Functions.glRenderbufferStorageMultisampleAdvancedAMDPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleAdvancedAMD");
			Functions.glRenderbufferStorageMultisampleCoverageNVPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleCoverageNV");
			Functions.glRenderbufferStorageMultisampleEXTPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleEXT");
			Functions.glRenderbufferStorageMultisampleIMGPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleIMG");
			Functions.glRenderbufferStorageMultisampleNVPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageMultisampleNV");
			Functions.glRenderbufferStorageOESPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glRenderbufferStorageOES");
			Functions.glReplacementCodePointerSUNPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glReplacementCodePointerSUN");
			Functions.glReplacementCodeubSUNPtr = (delegate* unmanaged<byte, void>)Functions.LoadFunction("glReplacementCodeubSUN");
			Functions.glReplacementCodeubvSUNPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glReplacementCodeubvSUN");
			Functions.glReplacementCodeuiColor3fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiColor3fVertex3fSUN");
			Functions.glReplacementCodeuiColor3fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiColor3fVertex3fvSUN");
			Functions.glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
			Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
			Functions.glReplacementCodeuiColor4ubVertex3fSUNPtr = (delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiColor4ubVertex3fSUN");
			Functions.glReplacementCodeuiColor4ubVertex3fvSUNPtr = (delegate* unmanaged<uint*, byte*, float*, void>)Functions.LoadFunction("glReplacementCodeuiColor4ubVertex3fvSUN");
			Functions.glReplacementCodeuiNormal3fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiNormal3fVertex3fSUN");
			Functions.glReplacementCodeuiNormal3fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiNormal3fVertex3fvSUN");
			Functions.glReplacementCodeuiSUNPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glReplacementCodeuiSUN");
			Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
			Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
			Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
			Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
			Functions.glReplacementCodeuiTexCoord2fVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fVertex3fSUN");
			Functions.glReplacementCodeuiTexCoord2fVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, float*, void>)Functions.LoadFunction("glReplacementCodeuiTexCoord2fVertex3fvSUN");
			Functions.glReplacementCodeuiVertex3fSUNPtr = (delegate* unmanaged<uint, float, float, float, void>)Functions.LoadFunction("glReplacementCodeuiVertex3fSUN");
			Functions.glReplacementCodeuiVertex3fvSUNPtr = (delegate* unmanaged<uint*, float*, void>)Functions.LoadFunction("glReplacementCodeuiVertex3fvSUN");
			Functions.glReplacementCodeuivSUNPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glReplacementCodeuivSUN");
			Functions.glReplacementCodeusSUNPtr = (delegate* unmanaged<ushort, void>)Functions.LoadFunction("glReplacementCodeusSUN");
			Functions.glReplacementCodeusvSUNPtr = (delegate* unmanaged<ushort*, void>)Functions.LoadFunction("glReplacementCodeusvSUN");
			Functions.glRequestResidentProgramsNVPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glRequestResidentProgramsNV");
			Functions.glResetHistogramPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glResetHistogram");
			Functions.glResetHistogramEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glResetHistogramEXT");
			Functions.glResetMemoryObjectParameterNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glResetMemoryObjectParameterNV");
			Functions.glResetMinmaxPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glResetMinmax");
			Functions.glResetMinmaxEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glResetMinmaxEXT");
			Functions.glResizeBuffersMESAPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glResizeBuffersMESA");
			Functions.glResolveDepthValuesNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glResolveDepthValuesNV");
			Functions.glResolveMultisampleFramebufferAPPLEPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glResolveMultisampleFramebufferAPPLE");
			Functions.glResumeTransformFeedbackPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glResumeTransformFeedback");
			Functions.glResumeTransformFeedbackNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glResumeTransformFeedbackNV");
			Functions.glRotatedPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glRotated");
			Functions.glRotatefPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glRotatef");
			Functions.glRotatexPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glRotatex");
			Functions.glRotatexOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glRotatexOES");
			Functions.glSampleCoveragePtr = (delegate* unmanaged<float, bool, void>)Functions.LoadFunction("glSampleCoverage");
			Functions.glSampleCoverageARBPtr = (delegate* unmanaged<float, bool, void>)Functions.LoadFunction("glSampleCoverageARB");
			Functions.glSampleCoveragexPtr = (delegate* unmanaged<int, bool, void>)Functions.LoadFunction("glSampleCoveragex");
			Functions.glSampleCoveragexOESPtr = (delegate* unmanaged<int, bool, void>)Functions.LoadFunction("glSampleCoveragexOES");
			Functions.glSampleMapATIPtr = (delegate* unmanaged<uint, uint, int, void>)Functions.LoadFunction("glSampleMapATI");
			Functions.glSampleMaskEXTPtr = (delegate* unmanaged<float, bool, void>)Functions.LoadFunction("glSampleMaskEXT");
			Functions.glSampleMaskIndexedNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glSampleMaskIndexedNV");
			Functions.glSampleMaskSGISPtr = (delegate* unmanaged<float, bool, void>)Functions.LoadFunction("glSampleMaskSGIS");
			Functions.glSampleMaskiPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glSampleMaski");
			Functions.glSamplePatternEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glSamplePatternEXT");
			Functions.glSamplePatternSGISPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glSamplePatternSGIS");
			Functions.glSamplerParameterIivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glSamplerParameterIiv");
			Functions.glSamplerParameterIivEXTPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glSamplerParameterIivEXT");
			Functions.glSamplerParameterIivOESPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glSamplerParameterIivOES");
			Functions.glSamplerParameterIuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glSamplerParameterIuiv");
			Functions.glSamplerParameterIuivEXTPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glSamplerParameterIuivEXT");
			Functions.glSamplerParameterIuivOESPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glSamplerParameterIuivOES");
			Functions.glSamplerParameterfPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glSamplerParameterf");
			Functions.glSamplerParameterfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glSamplerParameterfv");
			Functions.glSamplerParameteriPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glSamplerParameteri");
			Functions.glSamplerParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glSamplerParameteriv");
			Functions.glScaledPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glScaled");
			Functions.glScalefPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glScalef");
			Functions.glScalexPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glScalex");
			Functions.glScalexOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glScalexOES");
			Functions.glScissorPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glScissor");
			Functions.glScissorArrayvPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glScissorArrayv");
			Functions.glScissorArrayvNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glScissorArrayvNV");
			Functions.glScissorArrayvOESPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glScissorArrayvOES");
			Functions.glScissorExclusiveArrayvNVPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glScissorExclusiveArrayvNV");
			Functions.glScissorExclusiveNVPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glScissorExclusiveNV");
			Functions.glScissorIndexedPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glScissorIndexed");
			Functions.glScissorIndexedNVPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glScissorIndexedNV");
			Functions.glScissorIndexedOESPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glScissorIndexedOES");
			Functions.glScissorIndexedvPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glScissorIndexedv");
			Functions.glScissorIndexedvNVPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glScissorIndexedvNV");
			Functions.glScissorIndexedvOESPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glScissorIndexedvOES");
			Functions.glSecondaryColor3bPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glSecondaryColor3b");
			Functions.glSecondaryColor3bEXTPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glSecondaryColor3bEXT");
			Functions.glSecondaryColor3bvPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glSecondaryColor3bv");
			Functions.glSecondaryColor3bvEXTPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glSecondaryColor3bvEXT");
			Functions.glSecondaryColor3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glSecondaryColor3d");
			Functions.glSecondaryColor3dEXTPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glSecondaryColor3dEXT");
			Functions.glSecondaryColor3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glSecondaryColor3dv");
			Functions.glSecondaryColor3dvEXTPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glSecondaryColor3dvEXT");
			Functions.glSecondaryColor3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glSecondaryColor3f");
			Functions.glSecondaryColor3fEXTPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glSecondaryColor3fEXT");
			Functions.glSecondaryColor3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glSecondaryColor3fv");
			Functions.glSecondaryColor3fvEXTPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glSecondaryColor3fvEXT");
			Functions.glSecondaryColor3hNVPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glSecondaryColor3hNV");
			Functions.glSecondaryColor3hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glSecondaryColor3hvNV");
			Functions.glSecondaryColor3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glSecondaryColor3i");
			Functions.glSecondaryColor3iEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glSecondaryColor3iEXT");
			Functions.glSecondaryColor3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glSecondaryColor3iv");
			Functions.glSecondaryColor3ivEXTPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glSecondaryColor3ivEXT");
			Functions.glSecondaryColor3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glSecondaryColor3s");
			Functions.glSecondaryColor3sEXTPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glSecondaryColor3sEXT");
			Functions.glSecondaryColor3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glSecondaryColor3sv");
			Functions.glSecondaryColor3svEXTPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glSecondaryColor3svEXT");
			Functions.glSecondaryColor3ubPtr = (delegate* unmanaged<byte, byte, byte, void>)Functions.LoadFunction("glSecondaryColor3ub");
			Functions.glSecondaryColor3ubEXTPtr = (delegate* unmanaged<byte, byte, byte, void>)Functions.LoadFunction("glSecondaryColor3ubEXT");
			Functions.glSecondaryColor3ubvPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glSecondaryColor3ubv");
			Functions.glSecondaryColor3ubvEXTPtr = (delegate* unmanaged<byte*, void>)Functions.LoadFunction("glSecondaryColor3ubvEXT");
			Functions.glSecondaryColor3uiPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glSecondaryColor3ui");
			Functions.glSecondaryColor3uiEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glSecondaryColor3uiEXT");
			Functions.glSecondaryColor3uivPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glSecondaryColor3uiv");
			Functions.glSecondaryColor3uivEXTPtr = (delegate* unmanaged<uint*, void>)Functions.LoadFunction("glSecondaryColor3uivEXT");
			Functions.glSecondaryColor3usPtr = (delegate* unmanaged<ushort, ushort, ushort, void>)Functions.LoadFunction("glSecondaryColor3us");
			Functions.glSecondaryColor3usEXTPtr = (delegate* unmanaged<ushort, ushort, ushort, void>)Functions.LoadFunction("glSecondaryColor3usEXT");
			Functions.glSecondaryColor3usvPtr = (delegate* unmanaged<ushort*, void>)Functions.LoadFunction("glSecondaryColor3usv");
			Functions.glSecondaryColor3usvEXTPtr = (delegate* unmanaged<ushort*, void>)Functions.LoadFunction("glSecondaryColor3usvEXT");
			Functions.glSecondaryColorFormatNVPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glSecondaryColorFormatNV");
			Functions.glSecondaryColorP3uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glSecondaryColorP3ui");
			Functions.glSecondaryColorP3uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glSecondaryColorP3uiv");
			Functions.glSecondaryColorPointerPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glSecondaryColorPointer");
			Functions.glSecondaryColorPointerEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glSecondaryColorPointerEXT");
			Functions.glSecondaryColorPointerListIBMPtr = (delegate* unmanaged<int, int, int, IntPtr*, int, void>)Functions.LoadFunction("glSecondaryColorPointerListIBM");
			Functions.glSelectBufferPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glSelectBuffer");
			Functions.glSelectPerfMonitorCountersAMDPtr = (delegate* unmanaged<uint, bool, uint, int, uint*, void>)Functions.LoadFunction("glSelectPerfMonitorCountersAMD");
			Functions.glSemaphoreParameterui64vEXTPtr = (delegate* unmanaged<uint, int, ulong*, void>)Functions.LoadFunction("glSemaphoreParameterui64vEXT");
			Functions.glSeparableFilter2DPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, IntPtr, void>)Functions.LoadFunction("glSeparableFilter2D");
			Functions.glSeparableFilter2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, IntPtr, void>)Functions.LoadFunction("glSeparableFilter2DEXT");
			Functions.glSetFenceAPPLEPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glSetFenceAPPLE");
			Functions.glSetFenceNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glSetFenceNV");
			Functions.glSetFragmentShaderConstantATIPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glSetFragmentShaderConstantATI");
			Functions.glSetInvariantEXTPtr = (delegate* unmanaged<uint, int, IntPtr, void>)Functions.LoadFunction("glSetInvariantEXT");
			Functions.glSetLocalConstantEXTPtr = (delegate* unmanaged<uint, int, IntPtr, void>)Functions.LoadFunction("glSetLocalConstantEXT");
			Functions.glSetMultisamplefvAMDPtr = (delegate* unmanaged<int, uint, float*, void>)Functions.LoadFunction("glSetMultisamplefvAMD");
			Functions.glShadeModelPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glShadeModel");
			Functions.glShaderBinaryPtr = (delegate* unmanaged<int, uint*, int, IntPtr, int, void>)Functions.LoadFunction("glShaderBinary");
			Functions.glShaderOp1EXTPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glShaderOp1EXT");
			Functions.glShaderOp2EXTPtr = (delegate* unmanaged<int, uint, uint, uint, void>)Functions.LoadFunction("glShaderOp2EXT");
			Functions.glShaderOp3EXTPtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glShaderOp3EXT");
			Functions.glShaderSourcePtr = (delegate* unmanaged<uint, int, byte**, int*, void>)Functions.LoadFunction("glShaderSource");
			Functions.glShaderSourceARBPtr = (delegate* unmanaged<uint, int, byte**, int*, void>)Functions.LoadFunction("glShaderSourceARB");
			Functions.glShaderStorageBlockBindingPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glShaderStorageBlockBinding");
			Functions.glShadingRateImageBarrierNVPtr = (delegate* unmanaged<bool, void>)Functions.LoadFunction("glShadingRateImageBarrierNV");
			Functions.glShadingRateImagePaletteNVPtr = (delegate* unmanaged<uint, uint, int, uint*, void>)Functions.LoadFunction("glShadingRateImagePaletteNV");
			Functions.glShadingRateSampleOrderNVPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glShadingRateSampleOrderNV");
			Functions.glShadingRateSampleOrderCustomNVPtr = (delegate* unmanaged<int, uint, int*, void>)Functions.LoadFunction("glShadingRateSampleOrderCustomNV");
			Functions.glSharpenTexFuncSGISPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glSharpenTexFuncSGIS");
			Functions.glSignalSemaphoreEXTPtr = (delegate* unmanaged<uint, uint, uint*, uint, uint*, uint*, void>)Functions.LoadFunction("glSignalSemaphoreEXT");
			Functions.glSpecializeShaderPtr = (delegate* unmanaged<uint, byte*, uint, uint*, uint*, void>)Functions.LoadFunction("glSpecializeShader");
			Functions.glSpecializeShaderARBPtr = (delegate* unmanaged<uint, byte*, uint, uint*, uint*, void>)Functions.LoadFunction("glSpecializeShaderARB");
			Functions.glSpriteParameterfSGIXPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glSpriteParameterfSGIX");
			Functions.glSpriteParameterfvSGIXPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glSpriteParameterfvSGIX");
			Functions.glSpriteParameteriSGIXPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glSpriteParameteriSGIX");
			Functions.glSpriteParameterivSGIXPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glSpriteParameterivSGIX");
			Functions.glStartInstrumentsSGIXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glStartInstrumentsSGIX");
			Functions.glStartTilingQCOMPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glStartTilingQCOM");
			Functions.glStateCaptureNVPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glStateCaptureNV");
			Functions.glStencilClearTagEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glStencilClearTagEXT");
			Functions.glStencilFillPathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, float*, void>)Functions.LoadFunction("glStencilFillPathInstancedNV");
			Functions.glStencilFillPathNVPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glStencilFillPathNV");
			Functions.glStencilFuncPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glStencilFunc");
			Functions.glStencilFuncSeparatePtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glStencilFuncSeparate");
			Functions.glStencilFuncSeparateATIPtr = (delegate* unmanaged<int, int, int, uint, void>)Functions.LoadFunction("glStencilFuncSeparateATI");
			Functions.glStencilMaskPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glStencilMask");
			Functions.glStencilMaskSeparatePtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glStencilMaskSeparate");
			Functions.glStencilOpPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glStencilOp");
			Functions.glStencilOpSeparatePtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glStencilOpSeparate");
			Functions.glStencilOpSeparateATIPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glStencilOpSeparateATI");
			Functions.glStencilOpValueAMDPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glStencilOpValueAMD");
			Functions.glStencilStrokePathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, float*, void>)Functions.LoadFunction("glStencilStrokePathInstancedNV");
			Functions.glStencilStrokePathNVPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glStencilStrokePathNV");
			Functions.glStencilThenCoverFillPathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, int, float*, void>)Functions.LoadFunction("glStencilThenCoverFillPathInstancedNV");
			Functions.glStencilThenCoverFillPathNVPtr = (delegate* unmanaged<uint, int, uint, int, void>)Functions.LoadFunction("glStencilThenCoverFillPathNV");
			Functions.glStencilThenCoverStrokePathInstancedNVPtr = (delegate* unmanaged<int, int, IntPtr, uint, int, uint, int, int, float*, void>)Functions.LoadFunction("glStencilThenCoverStrokePathInstancedNV");
			Functions.glStencilThenCoverStrokePathNVPtr = (delegate* unmanaged<uint, int, uint, int, void>)Functions.LoadFunction("glStencilThenCoverStrokePathNV");
			Functions.glStopInstrumentsSGIXPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glStopInstrumentsSGIX");
			Functions.glStringMarkerGREMEDYPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glStringMarkerGREMEDY");
			Functions.glSubpixelPrecisionBiasNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glSubpixelPrecisionBiasNV");
			Functions.glSwizzleEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)Functions.LoadFunction("glSwizzleEXT");
			Functions.glSyncTextureINTELPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glSyncTextureINTEL");
			Functions.glTagSampleBufferSGIXPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glTagSampleBufferSGIX");
			Functions.glTangent3bEXTPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glTangent3bEXT");
			Functions.glTangent3bvEXTPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glTangent3bvEXT");
			Functions.glTangent3dEXTPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glTangent3dEXT");
			Functions.glTangent3dvEXTPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glTangent3dvEXT");
			Functions.glTangent3fEXTPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glTangent3fEXT");
			Functions.glTangent3fvEXTPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glTangent3fvEXT");
			Functions.glTangent3iEXTPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTangent3iEXT");
			Functions.glTangent3ivEXTPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glTangent3ivEXT");
			Functions.glTangent3sEXTPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glTangent3sEXT");
			Functions.glTangent3svEXTPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTangent3svEXT");
			Functions.glTangentPointerEXTPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTangentPointerEXT");
			Functions.glTbufferMask3DFXPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glTbufferMask3DFX");
			Functions.glTessellationFactorAMDPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glTessellationFactorAMD");
			Functions.glTessellationModeAMDPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glTessellationModeAMD");
			Functions.glTestFenceAPPLEPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glTestFenceAPPLE");
			Functions.glTestFenceNVPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glTestFenceNV");
			Functions.glTestObjectAPPLEPtr = (delegate* unmanaged<int, uint, bool>)Functions.LoadFunction("glTestObjectAPPLE");
			Functions.glTexAttachMemoryNVPtr = (delegate* unmanaged<int, uint, ulong, void>)Functions.LoadFunction("glTexAttachMemoryNV");
			Functions.glTexBufferPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glTexBuffer");
			Functions.glTexBufferARBPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glTexBufferARB");
			Functions.glTexBufferEXTPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glTexBufferEXT");
			Functions.glTexBufferOESPtr = (delegate* unmanaged<int, int, uint, void>)Functions.LoadFunction("glTexBufferOES");
			Functions.glTexBufferRangePtr = (delegate* unmanaged<int, int, uint, uint, uint, void>)Functions.LoadFunction("glTexBufferRange");
			Functions.glTexBufferRangeEXTPtr = (delegate* unmanaged<int, int, uint, uint, uint, void>)Functions.LoadFunction("glTexBufferRangeEXT");
			Functions.glTexBufferRangeOESPtr = (delegate* unmanaged<int, int, uint, uint, uint, void>)Functions.LoadFunction("glTexBufferRangeOES");
			Functions.glTexBumpParameterfvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glTexBumpParameterfvATI");
			Functions.glTexBumpParameterivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glTexBumpParameterivATI");
			Functions.glTexCoord1bOESPtr = (delegate* unmanaged<sbyte, void>)Functions.LoadFunction("glTexCoord1bOES");
			Functions.glTexCoord1bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glTexCoord1bvOES");
			Functions.glTexCoord1dPtr = (delegate* unmanaged<double, void>)Functions.LoadFunction("glTexCoord1d");
			Functions.glTexCoord1dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glTexCoord1dv");
			Functions.glTexCoord1fPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glTexCoord1f");
			Functions.glTexCoord1fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glTexCoord1fv");
			Functions.glTexCoord1hNVPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glTexCoord1hNV");
			Functions.glTexCoord1hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord1hvNV");
			Functions.glTexCoord1iPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glTexCoord1i");
			Functions.glTexCoord1ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glTexCoord1iv");
			Functions.glTexCoord1sPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glTexCoord1s");
			Functions.glTexCoord1svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord1sv");
			Functions.glTexCoord1xOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glTexCoord1xOES");
			Functions.glTexCoord1xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glTexCoord1xvOES");
			Functions.glTexCoord2bOESPtr = (delegate* unmanaged<sbyte, sbyte, void>)Functions.LoadFunction("glTexCoord2bOES");
			Functions.glTexCoord2bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glTexCoord2bvOES");
			Functions.glTexCoord2dPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glTexCoord2d");
			Functions.glTexCoord2dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glTexCoord2dv");
			Functions.glTexCoord2fPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glTexCoord2f");
			Functions.glTexCoord2fColor3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord2fColor3fVertex3fSUN");
			Functions.glTexCoord2fColor3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, float*, void>)Functions.LoadFunction("glTexCoord2fColor3fVertex3fvSUN");
			Functions.glTexCoord2fColor4fNormal3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord2fColor4fNormal3fVertex3fSUN");
			Functions.glTexCoord2fColor4fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, float*, float*, void>)Functions.LoadFunction("glTexCoord2fColor4fNormal3fVertex3fvSUN");
			Functions.glTexCoord2fColor4ubVertex3fSUNPtr = (delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void>)Functions.LoadFunction("glTexCoord2fColor4ubVertex3fSUN");
			Functions.glTexCoord2fColor4ubVertex3fvSUNPtr = (delegate* unmanaged<float*, byte*, float*, void>)Functions.LoadFunction("glTexCoord2fColor4ubVertex3fvSUN");
			Functions.glTexCoord2fNormal3fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord2fNormal3fVertex3fSUN");
			Functions.glTexCoord2fNormal3fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, float*, void>)Functions.LoadFunction("glTexCoord2fNormal3fVertex3fvSUN");
			Functions.glTexCoord2fVertex3fSUNPtr = (delegate* unmanaged<float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord2fVertex3fSUN");
			Functions.glTexCoord2fVertex3fvSUNPtr = (delegate* unmanaged<float*, float*, void>)Functions.LoadFunction("glTexCoord2fVertex3fvSUN");
			Functions.glTexCoord2fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glTexCoord2fv");
			Functions.glTexCoord2hNVPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glTexCoord2hNV");
			Functions.glTexCoord2hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord2hvNV");
			Functions.glTexCoord2iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glTexCoord2i");
			Functions.glTexCoord2ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glTexCoord2iv");
			Functions.glTexCoord2sPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glTexCoord2s");
			Functions.glTexCoord2svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord2sv");
			Functions.glTexCoord2xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glTexCoord2xOES");
			Functions.glTexCoord2xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glTexCoord2xvOES");
			Functions.glTexCoord3bOESPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glTexCoord3bOES");
			Functions.glTexCoord3bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glTexCoord3bvOES");
			Functions.glTexCoord3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glTexCoord3d");
			Functions.glTexCoord3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glTexCoord3dv");
			Functions.glTexCoord3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glTexCoord3f");
			Functions.glTexCoord3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glTexCoord3fv");
			Functions.glTexCoord3hNVPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glTexCoord3hNV");
			Functions.glTexCoord3hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord3hvNV");
			Functions.glTexCoord3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexCoord3i");
			Functions.glTexCoord3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glTexCoord3iv");
			Functions.glTexCoord3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glTexCoord3s");
			Functions.glTexCoord3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord3sv");
			Functions.glTexCoord3xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glTexCoord3xOES");
			Functions.glTexCoord3xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glTexCoord3xvOES");
			Functions.glTexCoord4bOESPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glTexCoord4bOES");
			Functions.glTexCoord4bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glTexCoord4bvOES");
			Functions.glTexCoord4dPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glTexCoord4d");
			Functions.glTexCoord4dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glTexCoord4dv");
			Functions.glTexCoord4fPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glTexCoord4f");
			Functions.glTexCoord4fColor4fNormal3fVertex4fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord4fColor4fNormal3fVertex4fSUN");
			Functions.glTexCoord4fColor4fNormal3fVertex4fvSUNPtr = (delegate* unmanaged<float*, float*, float*, float*, void>)Functions.LoadFunction("glTexCoord4fColor4fNormal3fVertex4fvSUN");
			Functions.glTexCoord4fVertex4fSUNPtr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glTexCoord4fVertex4fSUN");
			Functions.glTexCoord4fVertex4fvSUNPtr = (delegate* unmanaged<float*, float*, void>)Functions.LoadFunction("glTexCoord4fVertex4fvSUN");
			Functions.glTexCoord4fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glTexCoord4fv");
			Functions.glTexCoord4hNVPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glTexCoord4hNV");
			Functions.glTexCoord4hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord4hvNV");
			Functions.glTexCoord4iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glTexCoord4i");
			Functions.glTexCoord4ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glTexCoord4iv");
			Functions.glTexCoord4sPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glTexCoord4s");
			Functions.glTexCoord4svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glTexCoord4sv");
			Functions.glTexCoord4xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glTexCoord4xOES");
			Functions.glTexCoord4xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glTexCoord4xvOES");
			Functions.glTexCoordFormatNVPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexCoordFormatNV");
			Functions.glTexCoordP1uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glTexCoordP1ui");
			Functions.glTexCoordP1uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glTexCoordP1uiv");
			Functions.glTexCoordP2uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glTexCoordP2ui");
			Functions.glTexCoordP2uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glTexCoordP2uiv");
			Functions.glTexCoordP3uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glTexCoordP3ui");
			Functions.glTexCoordP3uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glTexCoordP3uiv");
			Functions.glTexCoordP4uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glTexCoordP4ui");
			Functions.glTexCoordP4uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glTexCoordP4uiv");
			Functions.glTexCoordPointerPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glTexCoordPointer");
			Functions.glTexCoordPointerEXTPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexCoordPointerEXT");
			Functions.glTexCoordPointerListIBMPtr = (delegate* unmanaged<int, int, int, IntPtr*, int, void>)Functions.LoadFunction("glTexCoordPointerListIBM");
			Functions.glTexCoordPointervINTELPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexCoordPointervINTEL");
			Functions.glTexEnvfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glTexEnvf");
			Functions.glTexEnvfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glTexEnvfv");
			Functions.glTexEnviPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexEnvi");
			Functions.glTexEnvivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexEnviv");
			Functions.glTexEnvxPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTexEnvx");
			Functions.glTexEnvxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTexEnvxOES");
			Functions.glTexEnvxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexEnvxv");
			Functions.glTexEnvxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexEnvxvOES");
			Functions.glTexFilterFuncSGISPtr = (delegate* unmanaged<int, int, int, float*, void>)Functions.LoadFunction("glTexFilterFuncSGIS");
			Functions.glTexGendPtr = (delegate* unmanaged<int, int, double, void>)Functions.LoadFunction("glTexGend");
			Functions.glTexGendvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glTexGendv");
			Functions.glTexGenfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glTexGenf");
			Functions.glTexGenfOESPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glTexGenfOES");
			Functions.glTexGenfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glTexGenfv");
			Functions.glTexGenfvOESPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glTexGenfvOES");
			Functions.glTexGeniPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexGeni");
			Functions.glTexGeniOESPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexGeniOES");
			Functions.glTexGenivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexGeniv");
			Functions.glTexGenivOESPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexGenivOES");
			Functions.glTexGenxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTexGenxOES");
			Functions.glTexGenxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexGenxvOES");
			Functions.glTexImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage1D");
			Functions.glTexImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage2D");
			Functions.glTexImage2DMultisamplePtr = (delegate* unmanaged<int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexImage2DMultisample");
			Functions.glTexImage2DMultisampleCoverageNVPtr = (delegate* unmanaged<int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexImage2DMultisampleCoverageNV");
			Functions.glTexImage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage3D");
			Functions.glTexImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage3DEXT");
			Functions.glTexImage3DMultisamplePtr = (delegate* unmanaged<int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexImage3DMultisample");
			Functions.glTexImage3DMultisampleCoverageNVPtr = (delegate* unmanaged<int, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexImage3DMultisampleCoverageNV");
			Functions.glTexImage3DOESPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage3DOES");
			Functions.glTexImage4DSGISPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexImage4DSGIS");
			Functions.glTexPageCommitmentARBPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexPageCommitmentARB");
			Functions.glTexPageCommitmentEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexPageCommitmentEXT");
			Functions.glTexParameterIivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexParameterIiv");
			Functions.glTexParameterIivEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexParameterIivEXT");
			Functions.glTexParameterIivOESPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexParameterIivOES");
			Functions.glTexParameterIuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glTexParameterIuiv");
			Functions.glTexParameterIuivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glTexParameterIuivEXT");
			Functions.glTexParameterIuivOESPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glTexParameterIuivOES");
			Functions.glTexParameterfPtr = (delegate* unmanaged<int, int, float, void>)Functions.LoadFunction("glTexParameterf");
			Functions.glTexParameterfvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glTexParameterfv");
			Functions.glTexParameteriPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glTexParameteri");
			Functions.glTexParameterivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glTexParameteriv");
			Functions.glTexParameterxPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTexParameterx");
			Functions.glTexParameterxOESPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTexParameterxOES");
			Functions.glTexParameterxvPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexParameterxv");
			Functions.glTexParameterxvOESPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glTexParameterxvOES");
			Functions.glTexRenderbufferNVPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glTexRenderbufferNV");
			Functions.glTexStorage1DPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glTexStorage1D");
			Functions.glTexStorage1DEXTPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glTexStorage1DEXT");
			Functions.glTexStorage2DPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glTexStorage2D");
			Functions.glTexStorage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glTexStorage2DEXT");
			Functions.glTexStorage2DMultisamplePtr = (delegate* unmanaged<int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexStorage2DMultisample");
			Functions.glTexStorage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glTexStorage3D");
			Functions.glTexStorage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, void>)Functions.LoadFunction("glTexStorage3DEXT");
			Functions.glTexStorage3DMultisamplePtr = (delegate* unmanaged<int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexStorage3DMultisample");
			Functions.glTexStorage3DMultisampleOESPtr = (delegate* unmanaged<int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexStorage3DMultisampleOES");
			Functions.glTexStorageMem1DEXTPtr = (delegate* unmanaged<int, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTexStorageMem1DEXT");
			Functions.glTexStorageMem2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTexStorageMem2DEXT");
			Functions.glTexStorageMem2DMultisampleEXTPtr = (delegate* unmanaged<int, int, int, int, int, bool, uint, ulong, void>)Functions.LoadFunction("glTexStorageMem2DMultisampleEXT");
			Functions.glTexStorageMem3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTexStorageMem3DEXT");
			Functions.glTexStorageMem3DMultisampleEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, bool, uint, ulong, void>)Functions.LoadFunction("glTexStorageMem3DMultisampleEXT");
			Functions.glTexStorageSparseAMDPtr = (delegate* unmanaged<int, int, int, int, int, int, uint, void>)Functions.LoadFunction("glTexStorageSparseAMD");
			Functions.glTexSubImage1DPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage1D");
			Functions.glTexSubImage1DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage1DEXT");
			Functions.glTexSubImage2DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage2D");
			Functions.glTexSubImage2DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage2DEXT");
			Functions.glTexSubImage3DPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage3D");
			Functions.glTexSubImage3DEXTPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage3DEXT");
			Functions.glTexSubImage3DOESPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage3DOES");
			Functions.glTexSubImage4DSGISPtr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTexSubImage4DSGIS");
			Functions.glTextureAttachMemoryNVPtr = (delegate* unmanaged<uint, uint, ulong, void>)Functions.LoadFunction("glTextureAttachMemoryNV");
			Functions.glTextureBarrierPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glTextureBarrier");
			Functions.glTextureBarrierNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glTextureBarrierNV");
			Functions.glTextureBufferPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glTextureBuffer");
			Functions.glTextureBufferEXTPtr = (delegate* unmanaged<uint, int, int, uint, void>)Functions.LoadFunction("glTextureBufferEXT");
			Functions.glTextureBufferRangePtr = (delegate* unmanaged<uint, int, uint, uint, uint, void>)Functions.LoadFunction("glTextureBufferRange");
			Functions.glTextureBufferRangeEXTPtr = (delegate* unmanaged<uint, int, int, uint, uint, uint, void>)Functions.LoadFunction("glTextureBufferRangeEXT");
			Functions.glTextureColorMaskSGISPtr = (delegate* unmanaged<bool, bool, bool, bool, void>)Functions.LoadFunction("glTextureColorMaskSGIS");
			Functions.glTextureFoveationParametersQCOMPtr = (delegate* unmanaged<uint, uint, uint, float, float, float, float, float, void>)Functions.LoadFunction("glTextureFoveationParametersQCOM");
			Functions.glTextureImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureImage1DEXT");
			Functions.glTextureImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureImage2DEXT");
			Functions.glTextureImage2DMultisampleCoverageNVPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureImage2DMultisampleCoverageNV");
			Functions.glTextureImage2DMultisampleNVPtr = (delegate* unmanaged<uint, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureImage2DMultisampleNV");
			Functions.glTextureImage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureImage3DEXT");
			Functions.glTextureImage3DMultisampleCoverageNVPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureImage3DMultisampleCoverageNV");
			Functions.glTextureImage3DMultisampleNVPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureImage3DMultisampleNV");
			Functions.glTextureLightEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glTextureLightEXT");
			Functions.glTextureMaterialEXTPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glTextureMaterialEXT");
			Functions.glTextureNormalEXTPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glTextureNormalEXT");
			Functions.glTexturePageCommitmentEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTexturePageCommitmentEXT");
			Functions.glTextureParameterIivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glTextureParameterIiv");
			Functions.glTextureParameterIivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glTextureParameterIivEXT");
			Functions.glTextureParameterIuivPtr = (delegate* unmanaged<uint, int, uint*, void>)Functions.LoadFunction("glTextureParameterIuiv");
			Functions.glTextureParameterIuivEXTPtr = (delegate* unmanaged<uint, int, int, uint*, void>)Functions.LoadFunction("glTextureParameterIuivEXT");
			Functions.glTextureParameterfPtr = (delegate* unmanaged<uint, int, float, void>)Functions.LoadFunction("glTextureParameterf");
			Functions.glTextureParameterfEXTPtr = (delegate* unmanaged<uint, int, int, float, void>)Functions.LoadFunction("glTextureParameterfEXT");
			Functions.glTextureParameterfvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glTextureParameterfv");
			Functions.glTextureParameterfvEXTPtr = (delegate* unmanaged<uint, int, int, float*, void>)Functions.LoadFunction("glTextureParameterfvEXT");
			Functions.glTextureParameteriPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glTextureParameteri");
			Functions.glTextureParameteriEXTPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glTextureParameteriEXT");
			Functions.glTextureParameterivPtr = (delegate* unmanaged<uint, int, int*, void>)Functions.LoadFunction("glTextureParameteriv");
			Functions.glTextureParameterivEXTPtr = (delegate* unmanaged<uint, int, int, int*, void>)Functions.LoadFunction("glTextureParameterivEXT");
			Functions.glTextureRangeAPPLEPtr = (delegate* unmanaged<int, int, IntPtr, void>)Functions.LoadFunction("glTextureRangeAPPLE");
			Functions.glTextureRenderbufferEXTPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glTextureRenderbufferEXT");
			Functions.glTextureStorage1DPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glTextureStorage1D");
			Functions.glTextureStorage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glTextureStorage1DEXT");
			Functions.glTextureStorage2DPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glTextureStorage2D");
			Functions.glTextureStorage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glTextureStorage2DEXT");
			Functions.glTextureStorage2DMultisamplePtr = (delegate* unmanaged<uint, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureStorage2DMultisample");
			Functions.glTextureStorage2DMultisampleEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureStorage2DMultisampleEXT");
			Functions.glTextureStorage3DPtr = (delegate* unmanaged<uint, int, int, int, int, int, void>)Functions.LoadFunction("glTextureStorage3D");
			Functions.glTextureStorage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, void>)Functions.LoadFunction("glTextureStorage3DEXT");
			Functions.glTextureStorage3DMultisamplePtr = (delegate* unmanaged<uint, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureStorage3DMultisample");
			Functions.glTextureStorage3DMultisampleEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, bool, void>)Functions.LoadFunction("glTextureStorage3DMultisampleEXT");
			Functions.glTextureStorageMem1DEXTPtr = (delegate* unmanaged<uint, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTextureStorageMem1DEXT");
			Functions.glTextureStorageMem2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTextureStorageMem2DEXT");
			Functions.glTextureStorageMem2DMultisampleEXTPtr = (delegate* unmanaged<uint, int, int, int, int, bool, uint, ulong, void>)Functions.LoadFunction("glTextureStorageMem2DMultisampleEXT");
			Functions.glTextureStorageMem3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, uint, ulong, void>)Functions.LoadFunction("glTextureStorageMem3DEXT");
			Functions.glTextureStorageMem3DMultisampleEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, bool, uint, ulong, void>)Functions.LoadFunction("glTextureStorageMem3DMultisampleEXT");
			Functions.glTextureStorageSparseAMDPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, uint, void>)Functions.LoadFunction("glTextureStorageSparseAMD");
			Functions.glTextureSubImage1DPtr = (delegate* unmanaged<uint, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage1D");
			Functions.glTextureSubImage1DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage1DEXT");
			Functions.glTextureSubImage2DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage2D");
			Functions.glTextureSubImage2DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage2DEXT");
			Functions.glTextureSubImage3DPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage3D");
			Functions.glTextureSubImage3DEXTPtr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, int, IntPtr, void>)Functions.LoadFunction("glTextureSubImage3DEXT");
			Functions.glTextureViewPtr = (delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void>)Functions.LoadFunction("glTextureView");
			Functions.glTextureViewEXTPtr = (delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void>)Functions.LoadFunction("glTextureViewEXT");
			Functions.glTextureViewOESPtr = (delegate* unmanaged<uint, int, uint, int, uint, uint, uint, uint, void>)Functions.LoadFunction("glTextureViewOES");
			Functions.glTrackMatrixNVPtr = (delegate* unmanaged<int, uint, int, int, void>)Functions.LoadFunction("glTrackMatrixNV");
			Functions.glTransformFeedbackAttribsNVPtr = (delegate* unmanaged<int, int*, int, void>)Functions.LoadFunction("glTransformFeedbackAttribsNV");
			Functions.glTransformFeedbackBufferBasePtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glTransformFeedbackBufferBase");
			Functions.glTransformFeedbackBufferRangePtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glTransformFeedbackBufferRange");
			Functions.glTransformFeedbackStreamAttribsNVPtr = (delegate* unmanaged<int, int*, int, int*, int, void>)Functions.LoadFunction("glTransformFeedbackStreamAttribsNV");
			Functions.glTransformFeedbackVaryingsPtr = (delegate* unmanaged<uint, int, byte**, int, void>)Functions.LoadFunction("glTransformFeedbackVaryings");
			Functions.glTransformFeedbackVaryingsEXTPtr = (delegate* unmanaged<uint, int, byte**, int, void>)Functions.LoadFunction("glTransformFeedbackVaryingsEXT");
			Functions.glTransformFeedbackVaryingsNVPtr = (delegate* unmanaged<uint, int, int*, int, void>)Functions.LoadFunction("glTransformFeedbackVaryingsNV");
			Functions.glTransformPathNVPtr = (delegate* unmanaged<uint, uint, int, float*, void>)Functions.LoadFunction("glTransformPathNV");
			Functions.glTranslatedPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glTranslated");
			Functions.glTranslatefPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glTranslatef");
			Functions.glTranslatexPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glTranslatex");
			Functions.glTranslatexOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glTranslatexOES");
			Functions.glUniform1dPtr = (delegate* unmanaged<int, double, void>)Functions.LoadFunction("glUniform1d");
			Functions.glUniform1dvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glUniform1dv");
			Functions.glUniform1fPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glUniform1f");
			Functions.glUniform1fARBPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glUniform1fARB");
			Functions.glUniform1fvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform1fv");
			Functions.glUniform1fvARBPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform1fvARB");
			Functions.glUniform1iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glUniform1i");
			Functions.glUniform1i64ARBPtr = (delegate* unmanaged<int, long, void>)Functions.LoadFunction("glUniform1i64ARB");
			Functions.glUniform1i64NVPtr = (delegate* unmanaged<int, long, void>)Functions.LoadFunction("glUniform1i64NV");
			Functions.glUniform1i64vARBPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform1i64vARB");
			Functions.glUniform1i64vNVPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform1i64vNV");
			Functions.glUniform1iARBPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glUniform1iARB");
			Functions.glUniform1ivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform1iv");
			Functions.glUniform1ivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform1ivARB");
			Functions.glUniform1uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glUniform1ui");
			Functions.glUniform1ui64ARBPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniform1ui64ARB");
			Functions.glUniform1ui64NVPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniform1ui64NV");
			Functions.glUniform1ui64vARBPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform1ui64vARB");
			Functions.glUniform1ui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform1ui64vNV");
			Functions.glUniform1uiEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glUniform1uiEXT");
			Functions.glUniform1uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform1uiv");
			Functions.glUniform1uivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform1uivEXT");
			Functions.glUniform2dPtr = (delegate* unmanaged<int, double, double, void>)Functions.LoadFunction("glUniform2d");
			Functions.glUniform2dvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glUniform2dv");
			Functions.glUniform2fPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glUniform2f");
			Functions.glUniform2fARBPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glUniform2fARB");
			Functions.glUniform2fvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform2fv");
			Functions.glUniform2fvARBPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform2fvARB");
			Functions.glUniform2iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glUniform2i");
			Functions.glUniform2i64ARBPtr = (delegate* unmanaged<int, long, long, void>)Functions.LoadFunction("glUniform2i64ARB");
			Functions.glUniform2i64NVPtr = (delegate* unmanaged<int, long, long, void>)Functions.LoadFunction("glUniform2i64NV");
			Functions.glUniform2i64vARBPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform2i64vARB");
			Functions.glUniform2i64vNVPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform2i64vNV");
			Functions.glUniform2iARBPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glUniform2iARB");
			Functions.glUniform2ivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform2iv");
			Functions.glUniform2ivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform2ivARB");
			Functions.glUniform2uiPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glUniform2ui");
			Functions.glUniform2ui64ARBPtr = (delegate* unmanaged<int, ulong, ulong, void>)Functions.LoadFunction("glUniform2ui64ARB");
			Functions.glUniform2ui64NVPtr = (delegate* unmanaged<int, ulong, ulong, void>)Functions.LoadFunction("glUniform2ui64NV");
			Functions.glUniform2ui64vARBPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform2ui64vARB");
			Functions.glUniform2ui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform2ui64vNV");
			Functions.glUniform2uiEXTPtr = (delegate* unmanaged<int, uint, uint, void>)Functions.LoadFunction("glUniform2uiEXT");
			Functions.glUniform2uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform2uiv");
			Functions.glUniform2uivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform2uivEXT");
			Functions.glUniform3dPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glUniform3d");
			Functions.glUniform3dvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glUniform3dv");
			Functions.glUniform3fPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glUniform3f");
			Functions.glUniform3fARBPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glUniform3fARB");
			Functions.glUniform3fvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform3fv");
			Functions.glUniform3fvARBPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform3fvARB");
			Functions.glUniform3iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glUniform3i");
			Functions.glUniform3i64ARBPtr = (delegate* unmanaged<int, long, long, long, void>)Functions.LoadFunction("glUniform3i64ARB");
			Functions.glUniform3i64NVPtr = (delegate* unmanaged<int, long, long, long, void>)Functions.LoadFunction("glUniform3i64NV");
			Functions.glUniform3i64vARBPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform3i64vARB");
			Functions.glUniform3i64vNVPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform3i64vNV");
			Functions.glUniform3iARBPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glUniform3iARB");
			Functions.glUniform3ivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform3iv");
			Functions.glUniform3ivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform3ivARB");
			Functions.glUniform3uiPtr = (delegate* unmanaged<int, uint, uint, uint, void>)Functions.LoadFunction("glUniform3ui");
			Functions.glUniform3ui64ARBPtr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)Functions.LoadFunction("glUniform3ui64ARB");
			Functions.glUniform3ui64NVPtr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)Functions.LoadFunction("glUniform3ui64NV");
			Functions.glUniform3ui64vARBPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform3ui64vARB");
			Functions.glUniform3ui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform3ui64vNV");
			Functions.glUniform3uiEXTPtr = (delegate* unmanaged<int, uint, uint, uint, void>)Functions.LoadFunction("glUniform3uiEXT");
			Functions.glUniform3uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform3uiv");
			Functions.glUniform3uivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform3uivEXT");
			Functions.glUniform4dPtr = (delegate* unmanaged<int, double, double, double, double, void>)Functions.LoadFunction("glUniform4d");
			Functions.glUniform4dvPtr = (delegate* unmanaged<int, int, double*, void>)Functions.LoadFunction("glUniform4dv");
			Functions.glUniform4fPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glUniform4f");
			Functions.glUniform4fARBPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glUniform4fARB");
			Functions.glUniform4fvPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform4fv");
			Functions.glUniform4fvARBPtr = (delegate* unmanaged<int, int, float*, void>)Functions.LoadFunction("glUniform4fvARB");
			Functions.glUniform4iPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glUniform4i");
			Functions.glUniform4i64ARBPtr = (delegate* unmanaged<int, long, long, long, long, void>)Functions.LoadFunction("glUniform4i64ARB");
			Functions.glUniform4i64NVPtr = (delegate* unmanaged<int, long, long, long, long, void>)Functions.LoadFunction("glUniform4i64NV");
			Functions.glUniform4i64vARBPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform4i64vARB");
			Functions.glUniform4i64vNVPtr = (delegate* unmanaged<int, int, long*, void>)Functions.LoadFunction("glUniform4i64vNV");
			Functions.glUniform4iARBPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glUniform4iARB");
			Functions.glUniform4ivPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform4iv");
			Functions.glUniform4ivARBPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glUniform4ivARB");
			Functions.glUniform4uiPtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glUniform4ui");
			Functions.glUniform4ui64ARBPtr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)Functions.LoadFunction("glUniform4ui64ARB");
			Functions.glUniform4ui64NVPtr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)Functions.LoadFunction("glUniform4ui64NV");
			Functions.glUniform4ui64vARBPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform4ui64vARB");
			Functions.glUniform4ui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniform4ui64vNV");
			Functions.glUniform4uiEXTPtr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)Functions.LoadFunction("glUniform4uiEXT");
			Functions.glUniform4uivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform4uiv");
			Functions.glUniform4uivEXTPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniform4uivEXT");
			Functions.glUniformBlockBindingPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glUniformBlockBinding");
			Functions.glUniformBufferEXTPtr = (delegate* unmanaged<uint, int, uint, void>)Functions.LoadFunction("glUniformBufferEXT");
			Functions.glUniformHandleui64ARBPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniformHandleui64ARB");
			Functions.glUniformHandleui64IMGPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniformHandleui64IMG");
			Functions.glUniformHandleui64NVPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniformHandleui64NV");
			Functions.glUniformHandleui64vARBPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniformHandleui64vARB");
			Functions.glUniformHandleui64vIMGPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniformHandleui64vIMG");
			Functions.glUniformHandleui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniformHandleui64vNV");
			Functions.glUniformMatrix2dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix2dv");
			Functions.glUniformMatrix2fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2fv");
			Functions.glUniformMatrix2fvARBPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2fvARB");
			Functions.glUniformMatrix2x3dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix2x3dv");
			Functions.glUniformMatrix2x3fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2x3fv");
			Functions.glUniformMatrix2x3fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2x3fvNV");
			Functions.glUniformMatrix2x4dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix2x4dv");
			Functions.glUniformMatrix2x4fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2x4fv");
			Functions.glUniformMatrix2x4fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix2x4fvNV");
			Functions.glUniformMatrix3dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix3dv");
			Functions.glUniformMatrix3fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3fv");
			Functions.glUniformMatrix3fvARBPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3fvARB");
			Functions.glUniformMatrix3x2dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix3x2dv");
			Functions.glUniformMatrix3x2fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3x2fv");
			Functions.glUniformMatrix3x2fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3x2fvNV");
			Functions.glUniformMatrix3x4dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix3x4dv");
			Functions.glUniformMatrix3x4fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3x4fv");
			Functions.glUniformMatrix3x4fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix3x4fvNV");
			Functions.glUniformMatrix4dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix4dv");
			Functions.glUniformMatrix4fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4fv");
			Functions.glUniformMatrix4fvARBPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4fvARB");
			Functions.glUniformMatrix4x2dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix4x2dv");
			Functions.glUniformMatrix4x2fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4x2fv");
			Functions.glUniformMatrix4x2fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4x2fvNV");
			Functions.glUniformMatrix4x3dvPtr = (delegate* unmanaged<int, int, bool, double*, void>)Functions.LoadFunction("glUniformMatrix4x3dv");
			Functions.glUniformMatrix4x3fvPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4x3fv");
			Functions.glUniformMatrix4x3fvNVPtr = (delegate* unmanaged<int, int, bool, float*, void>)Functions.LoadFunction("glUniformMatrix4x3fvNV");
			Functions.glUniformSubroutinesuivPtr = (delegate* unmanaged<int, int, uint*, void>)Functions.LoadFunction("glUniformSubroutinesuiv");
			Functions.glUniformui64NVPtr = (delegate* unmanaged<int, ulong, void>)Functions.LoadFunction("glUniformui64NV");
			Functions.glUniformui64vNVPtr = (delegate* unmanaged<int, int, ulong*, void>)Functions.LoadFunction("glUniformui64vNV");
			Functions.glUnlockArraysEXTPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glUnlockArraysEXT");
			Functions.glUnmapBufferPtr = (delegate* unmanaged<int, bool>)Functions.LoadFunction("glUnmapBuffer");
			Functions.glUnmapBufferARBPtr = (delegate* unmanaged<int, bool>)Functions.LoadFunction("glUnmapBufferARB");
			Functions.glUnmapBufferOESPtr = (delegate* unmanaged<int, bool>)Functions.LoadFunction("glUnmapBufferOES");
			Functions.glUnmapNamedBufferPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glUnmapNamedBuffer");
			Functions.glUnmapNamedBufferEXTPtr = (delegate* unmanaged<uint, bool>)Functions.LoadFunction("glUnmapNamedBufferEXT");
			Functions.glUnmapObjectBufferATIPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glUnmapObjectBufferATI");
			Functions.glUnmapTexture2DINTELPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glUnmapTexture2DINTEL");
			Functions.glUpdateObjectBufferATIPtr = (delegate* unmanaged<uint, uint, int, IntPtr, int, void>)Functions.LoadFunction("glUpdateObjectBufferATI");
			Functions.glUseProgramPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glUseProgram");
			Functions.glUseProgramObjectARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glUseProgramObjectARB");
			Functions.glUseProgramStagesPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glUseProgramStages");
			Functions.glUseProgramStagesEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glUseProgramStagesEXT");
			Functions.glUseShaderProgramEXTPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glUseShaderProgramEXT");
			Functions.glVDPAUFiniNVPtr = (delegate* unmanaged<void>)Functions.LoadFunction("glVDPAUFiniNV");
			Functions.glVDPAUGetSurfaceivNVPtr = (delegate* unmanaged<IntPtr, int, int, int*, int*, void>)Functions.LoadFunction("glVDPAUGetSurfaceivNV");
			Functions.glVDPAUInitNVPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glVDPAUInitNV");
			Functions.glVDPAUIsSurfaceNVPtr = (delegate* unmanaged<IntPtr, bool>)Functions.LoadFunction("glVDPAUIsSurfaceNV");
			Functions.glVDPAUMapSurfacesNVPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glVDPAUMapSurfacesNV");
			Functions.glVDPAURegisterOutputSurfaceNVPtr = (delegate* unmanaged<IntPtr, int, int, uint*, IntPtr>)Functions.LoadFunction("glVDPAURegisterOutputSurfaceNV");
			Functions.glVDPAURegisterVideoSurfaceNVPtr = (delegate* unmanaged<IntPtr, int, int, uint*, IntPtr>)Functions.LoadFunction("glVDPAURegisterVideoSurfaceNV");
			Functions.glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr = (delegate* unmanaged<IntPtr, int, int, uint*, bool, IntPtr>)Functions.LoadFunction("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
			Functions.glVDPAUSurfaceAccessNVPtr = (delegate* unmanaged<IntPtr, int, void>)Functions.LoadFunction("glVDPAUSurfaceAccessNV");
			Functions.glVDPAUUnmapSurfacesNVPtr = (delegate* unmanaged<int, IntPtr*, void>)Functions.LoadFunction("glVDPAUUnmapSurfacesNV");
			Functions.glVDPAUUnregisterSurfaceNVPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glVDPAUUnregisterSurfaceNV");
			Functions.glValidateProgramPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glValidateProgram");
			Functions.glValidateProgramARBPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glValidateProgramARB");
			Functions.glValidateProgramPipelinePtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glValidateProgramPipeline");
			Functions.glValidateProgramPipelineEXTPtr = (delegate* unmanaged<uint, void>)Functions.LoadFunction("glValidateProgramPipelineEXT");
			Functions.glVariantArrayObjectATIPtr = (delegate* unmanaged<uint, int, int, uint, uint, void>)Functions.LoadFunction("glVariantArrayObjectATI");
			Functions.glVariantPointerEXTPtr = (delegate* unmanaged<uint, int, uint, IntPtr, void>)Functions.LoadFunction("glVariantPointerEXT");
			Functions.glVariantbvEXTPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVariantbvEXT");
			Functions.glVariantdvEXTPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVariantdvEXT");
			Functions.glVariantfvEXTPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVariantfvEXT");
			Functions.glVariantivEXTPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVariantivEXT");
			Functions.glVariantsvEXTPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVariantsvEXT");
			Functions.glVariantubvEXTPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVariantubvEXT");
			Functions.glVariantuivEXTPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVariantuivEXT");
			Functions.glVariantusvEXTPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVariantusvEXT");
			Functions.glVertex2bOESPtr = (delegate* unmanaged<sbyte, sbyte, void>)Functions.LoadFunction("glVertex2bOES");
			Functions.glVertex2bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glVertex2bvOES");
			Functions.glVertex2dPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glVertex2d");
			Functions.glVertex2dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glVertex2dv");
			Functions.glVertex2fPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glVertex2f");
			Functions.glVertex2fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glVertex2fv");
			Functions.glVertex2hNVPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glVertex2hNV");
			Functions.glVertex2hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex2hvNV");
			Functions.glVertex2iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glVertex2i");
			Functions.glVertex2ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glVertex2iv");
			Functions.glVertex2sPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glVertex2s");
			Functions.glVertex2svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex2sv");
			Functions.glVertex2xOESPtr = (delegate* unmanaged<IntPtr, void>)Functions.LoadFunction("glVertex2xOES");
			Functions.glVertex2xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glVertex2xvOES");
			Functions.glVertex3bOESPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glVertex3bOES");
			Functions.glVertex3bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glVertex3bvOES");
			Functions.glVertex3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glVertex3d");
			Functions.glVertex3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glVertex3dv");
			Functions.glVertex3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glVertex3f");
			Functions.glVertex3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glVertex3fv");
			Functions.glVertex3hNVPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glVertex3hNV");
			Functions.glVertex3hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex3hvNV");
			Functions.glVertex3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glVertex3i");
			Functions.glVertex3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glVertex3iv");
			Functions.glVertex3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glVertex3s");
			Functions.glVertex3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex3sv");
			Functions.glVertex3xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, void>)Functions.LoadFunction("glVertex3xOES");
			Functions.glVertex3xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glVertex3xvOES");
			Functions.glVertex4bOESPtr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)Functions.LoadFunction("glVertex4bOES");
			Functions.glVertex4bvOESPtr = (delegate* unmanaged<sbyte*, void>)Functions.LoadFunction("glVertex4bvOES");
			Functions.glVertex4dPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glVertex4d");
			Functions.glVertex4dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glVertex4dv");
			Functions.glVertex4fPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glVertex4f");
			Functions.glVertex4fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glVertex4fv");
			Functions.glVertex4hNVPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glVertex4hNV");
			Functions.glVertex4hvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex4hvNV");
			Functions.glVertex4iPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glVertex4i");
			Functions.glVertex4ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glVertex4iv");
			Functions.glVertex4sPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glVertex4s");
			Functions.glVertex4svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertex4sv");
			Functions.glVertex4xOESPtr = (delegate* unmanaged<IntPtr, IntPtr, IntPtr, void>)Functions.LoadFunction("glVertex4xOES");
			Functions.glVertex4xvOESPtr = (delegate* unmanaged<IntPtr*, void>)Functions.LoadFunction("glVertex4xvOES");
			Functions.glVertexArrayAttribBindingPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexArrayAttribBinding");
			Functions.glVertexArrayAttribFormatPtr = (delegate* unmanaged<uint, uint, int, int, bool, uint, void>)Functions.LoadFunction("glVertexArrayAttribFormat");
			Functions.glVertexArrayAttribIFormatPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayAttribIFormat");
			Functions.glVertexArrayAttribLFormatPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayAttribLFormat");
			Functions.glVertexArrayBindVertexBufferEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, int, void>)Functions.LoadFunction("glVertexArrayBindVertexBufferEXT");
			Functions.glVertexArrayBindingDivisorPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexArrayBindingDivisor");
			Functions.glVertexArrayColorOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayColorOffsetEXT");
			Functions.glVertexArrayEdgeFlagOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, uint, void>)Functions.LoadFunction("glVertexArrayEdgeFlagOffsetEXT");
			Functions.glVertexArrayElementBufferPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexArrayElementBuffer");
			Functions.glVertexArrayFogCoordOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayFogCoordOffsetEXT");
			Functions.glVertexArrayIndexOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayIndexOffsetEXT");
			Functions.glVertexArrayMultiTexCoordOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayMultiTexCoordOffsetEXT");
			Functions.glVertexArrayNormalOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayNormalOffsetEXT");
			Functions.glVertexArrayParameteriAPPLEPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glVertexArrayParameteriAPPLE");
			Functions.glVertexArrayRangeAPPLEPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glVertexArrayRangeAPPLE");
			Functions.glVertexArrayRangeNVPtr = (delegate* unmanaged<int, IntPtr, void>)Functions.LoadFunction("glVertexArrayRangeNV");
			Functions.glVertexArraySecondaryColorOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArraySecondaryColorOffsetEXT");
			Functions.glVertexArrayTexCoordOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayTexCoordOffsetEXT");
			Functions.glVertexArrayVertexAttribBindingEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribBindingEXT");
			Functions.glVertexArrayVertexAttribDivisorEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribDivisorEXT");
			Functions.glVertexArrayVertexAttribFormatEXTPtr = (delegate* unmanaged<uint, uint, int, int, bool, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribFormatEXT");
			Functions.glVertexArrayVertexAttribIFormatEXTPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribIFormatEXT");
			Functions.glVertexArrayVertexAttribIOffsetEXTPtr = (delegate* unmanaged<uint, uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribIOffsetEXT");
			Functions.glVertexArrayVertexAttribLFormatEXTPtr = (delegate* unmanaged<uint, uint, int, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribLFormatEXT");
			Functions.glVertexArrayVertexAttribLOffsetEXTPtr = (delegate* unmanaged<uint, uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribLOffsetEXT");
			Functions.glVertexArrayVertexAttribOffsetEXTPtr = (delegate* unmanaged<uint, uint, uint, int, int, bool, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexAttribOffsetEXT");
			Functions.glVertexArrayVertexBindingDivisorEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexArrayVertexBindingDivisorEXT");
			Functions.glVertexArrayVertexBufferPtr = (delegate* unmanaged<uint, uint, uint, uint, int, void>)Functions.LoadFunction("glVertexArrayVertexBuffer");
			Functions.glVertexArrayVertexBuffersPtr = (delegate* unmanaged<uint, uint, int, uint*, uint*, int*, void>)Functions.LoadFunction("glVertexArrayVertexBuffers");
			Functions.glVertexArrayVertexOffsetEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, uint, void>)Functions.LoadFunction("glVertexArrayVertexOffsetEXT");
			Functions.glVertexAttrib1dPtr = (delegate* unmanaged<uint, double, void>)Functions.LoadFunction("glVertexAttrib1d");
			Functions.glVertexAttrib1dARBPtr = (delegate* unmanaged<uint, double, void>)Functions.LoadFunction("glVertexAttrib1dARB");
			Functions.glVertexAttrib1dNVPtr = (delegate* unmanaged<uint, double, void>)Functions.LoadFunction("glVertexAttrib1dNV");
			Functions.glVertexAttrib1dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib1dv");
			Functions.glVertexAttrib1dvARBPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib1dvARB");
			Functions.glVertexAttrib1dvNVPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib1dvNV");
			Functions.glVertexAttrib1fPtr = (delegate* unmanaged<uint, float, void>)Functions.LoadFunction("glVertexAttrib1f");
			Functions.glVertexAttrib1fARBPtr = (delegate* unmanaged<uint, float, void>)Functions.LoadFunction("glVertexAttrib1fARB");
			Functions.glVertexAttrib1fNVPtr = (delegate* unmanaged<uint, float, void>)Functions.LoadFunction("glVertexAttrib1fNV");
			Functions.glVertexAttrib1fvPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib1fv");
			Functions.glVertexAttrib1fvARBPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib1fvARB");
			Functions.glVertexAttrib1fvNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib1fvNV");
			Functions.glVertexAttrib1hNVPtr = (delegate* unmanaged<uint, short, void>)Functions.LoadFunction("glVertexAttrib1hNV");
			Functions.glVertexAttrib1hvNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib1hvNV");
			Functions.glVertexAttrib1sPtr = (delegate* unmanaged<uint, short, void>)Functions.LoadFunction("glVertexAttrib1s");
			Functions.glVertexAttrib1sARBPtr = (delegate* unmanaged<uint, short, void>)Functions.LoadFunction("glVertexAttrib1sARB");
			Functions.glVertexAttrib1sNVPtr = (delegate* unmanaged<uint, short, void>)Functions.LoadFunction("glVertexAttrib1sNV");
			Functions.glVertexAttrib1svPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib1sv");
			Functions.glVertexAttrib1svARBPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib1svARB");
			Functions.glVertexAttrib1svNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib1svNV");
			Functions.glVertexAttrib2dPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glVertexAttrib2d");
			Functions.glVertexAttrib2dARBPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glVertexAttrib2dARB");
			Functions.glVertexAttrib2dNVPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glVertexAttrib2dNV");
			Functions.glVertexAttrib2dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib2dv");
			Functions.glVertexAttrib2dvARBPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib2dvARB");
			Functions.glVertexAttrib2dvNVPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib2dvNV");
			Functions.glVertexAttrib2fPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glVertexAttrib2f");
			Functions.glVertexAttrib2fARBPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glVertexAttrib2fARB");
			Functions.glVertexAttrib2fNVPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glVertexAttrib2fNV");
			Functions.glVertexAttrib2fvPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib2fv");
			Functions.glVertexAttrib2fvARBPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib2fvARB");
			Functions.glVertexAttrib2fvNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib2fvNV");
			Functions.glVertexAttrib2hNVPtr = (delegate* unmanaged<uint, short, short, void>)Functions.LoadFunction("glVertexAttrib2hNV");
			Functions.glVertexAttrib2hvNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib2hvNV");
			Functions.glVertexAttrib2sPtr = (delegate* unmanaged<uint, short, short, void>)Functions.LoadFunction("glVertexAttrib2s");
			Functions.glVertexAttrib2sARBPtr = (delegate* unmanaged<uint, short, short, void>)Functions.LoadFunction("glVertexAttrib2sARB");
			Functions.glVertexAttrib2sNVPtr = (delegate* unmanaged<uint, short, short, void>)Functions.LoadFunction("glVertexAttrib2sNV");
			Functions.glVertexAttrib2svPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib2sv");
			Functions.glVertexAttrib2svARBPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib2svARB");
			Functions.glVertexAttrib2svNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib2svNV");
			Functions.glVertexAttrib3dPtr = (delegate* unmanaged<uint, double, double, double, void>)Functions.LoadFunction("glVertexAttrib3d");
			Functions.glVertexAttrib3dARBPtr = (delegate* unmanaged<uint, double, double, double, void>)Functions.LoadFunction("glVertexAttrib3dARB");
			Functions.glVertexAttrib3dNVPtr = (delegate* unmanaged<uint, double, double, double, void>)Functions.LoadFunction("glVertexAttrib3dNV");
			Functions.glVertexAttrib3dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib3dv");
			Functions.glVertexAttrib3dvARBPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib3dvARB");
			Functions.glVertexAttrib3dvNVPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib3dvNV");
			Functions.glVertexAttrib3fPtr = (delegate* unmanaged<uint, float, float, float, void>)Functions.LoadFunction("glVertexAttrib3f");
			Functions.glVertexAttrib3fARBPtr = (delegate* unmanaged<uint, float, float, float, void>)Functions.LoadFunction("glVertexAttrib3fARB");
			Functions.glVertexAttrib3fNVPtr = (delegate* unmanaged<uint, float, float, float, void>)Functions.LoadFunction("glVertexAttrib3fNV");
			Functions.glVertexAttrib3fvPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib3fv");
			Functions.glVertexAttrib3fvARBPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib3fvARB");
			Functions.glVertexAttrib3fvNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib3fvNV");
			Functions.glVertexAttrib3hNVPtr = (delegate* unmanaged<uint, short, short, short, void>)Functions.LoadFunction("glVertexAttrib3hNV");
			Functions.glVertexAttrib3hvNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib3hvNV");
			Functions.glVertexAttrib3sPtr = (delegate* unmanaged<uint, short, short, short, void>)Functions.LoadFunction("glVertexAttrib3s");
			Functions.glVertexAttrib3sARBPtr = (delegate* unmanaged<uint, short, short, short, void>)Functions.LoadFunction("glVertexAttrib3sARB");
			Functions.glVertexAttrib3sNVPtr = (delegate* unmanaged<uint, short, short, short, void>)Functions.LoadFunction("glVertexAttrib3sNV");
			Functions.glVertexAttrib3svPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib3sv");
			Functions.glVertexAttrib3svARBPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib3svARB");
			Functions.glVertexAttrib3svNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib3svNV");
			Functions.glVertexAttrib4NbvPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttrib4Nbv");
			Functions.glVertexAttrib4NbvARBPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttrib4NbvARB");
			Functions.glVertexAttrib4NivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttrib4Niv");
			Functions.glVertexAttrib4NivARBPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttrib4NivARB");
			Functions.glVertexAttrib4NsvPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4Nsv");
			Functions.glVertexAttrib4NsvARBPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4NsvARB");
			Functions.glVertexAttrib4NubPtr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)Functions.LoadFunction("glVertexAttrib4Nub");
			Functions.glVertexAttrib4NubARBPtr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)Functions.LoadFunction("glVertexAttrib4NubARB");
			Functions.glVertexAttrib4NubvPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttrib4Nubv");
			Functions.glVertexAttrib4NubvARBPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttrib4NubvARB");
			Functions.glVertexAttrib4NuivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttrib4Nuiv");
			Functions.glVertexAttrib4NuivARBPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttrib4NuivARB");
			Functions.glVertexAttrib4NusvPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttrib4Nusv");
			Functions.glVertexAttrib4NusvARBPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttrib4NusvARB");
			Functions.glVertexAttrib4bvPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttrib4bv");
			Functions.glVertexAttrib4bvARBPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttrib4bvARB");
			Functions.glVertexAttrib4dPtr = (delegate* unmanaged<uint, double, double, double, double, void>)Functions.LoadFunction("glVertexAttrib4d");
			Functions.glVertexAttrib4dARBPtr = (delegate* unmanaged<uint, double, double, double, double, void>)Functions.LoadFunction("glVertexAttrib4dARB");
			Functions.glVertexAttrib4dNVPtr = (delegate* unmanaged<uint, double, double, double, double, void>)Functions.LoadFunction("glVertexAttrib4dNV");
			Functions.glVertexAttrib4dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib4dv");
			Functions.glVertexAttrib4dvARBPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib4dvARB");
			Functions.glVertexAttrib4dvNVPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttrib4dvNV");
			Functions.glVertexAttrib4fPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glVertexAttrib4f");
			Functions.glVertexAttrib4fARBPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glVertexAttrib4fARB");
			Functions.glVertexAttrib4fNVPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glVertexAttrib4fNV");
			Functions.glVertexAttrib4fvPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib4fv");
			Functions.glVertexAttrib4fvARBPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib4fvARB");
			Functions.glVertexAttrib4fvNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glVertexAttrib4fvNV");
			Functions.glVertexAttrib4hNVPtr = (delegate* unmanaged<uint, short, short, short, short, void>)Functions.LoadFunction("glVertexAttrib4hNV");
			Functions.glVertexAttrib4hvNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4hvNV");
			Functions.glVertexAttrib4ivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttrib4iv");
			Functions.glVertexAttrib4ivARBPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttrib4ivARB");
			Functions.glVertexAttrib4sPtr = (delegate* unmanaged<uint, short, short, short, short, void>)Functions.LoadFunction("glVertexAttrib4s");
			Functions.glVertexAttrib4sARBPtr = (delegate* unmanaged<uint, short, short, short, short, void>)Functions.LoadFunction("glVertexAttrib4sARB");
			Functions.glVertexAttrib4sNVPtr = (delegate* unmanaged<uint, short, short, short, short, void>)Functions.LoadFunction("glVertexAttrib4sNV");
			Functions.glVertexAttrib4svPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4sv");
			Functions.glVertexAttrib4svARBPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4svARB");
			Functions.glVertexAttrib4svNVPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttrib4svNV");
			Functions.glVertexAttrib4ubNVPtr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)Functions.LoadFunction("glVertexAttrib4ubNV");
			Functions.glVertexAttrib4ubvPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttrib4ubv");
			Functions.glVertexAttrib4ubvARBPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttrib4ubvARB");
			Functions.glVertexAttrib4ubvNVPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttrib4ubvNV");
			Functions.glVertexAttrib4uivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttrib4uiv");
			Functions.glVertexAttrib4uivARBPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttrib4uivARB");
			Functions.glVertexAttrib4usvPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttrib4usv");
			Functions.glVertexAttrib4usvARBPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttrib4usvARB");
			Functions.glVertexAttribArrayObjectATIPtr = (delegate* unmanaged<uint, int, int, bool, int, uint, uint, void>)Functions.LoadFunction("glVertexAttribArrayObjectATI");
			Functions.glVertexAttribBindingPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribBinding");
			Functions.glVertexAttribDivisorPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribDivisor");
			Functions.glVertexAttribDivisorANGLEPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribDivisorANGLE");
			Functions.glVertexAttribDivisorARBPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribDivisorARB");
			Functions.glVertexAttribDivisorEXTPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribDivisorEXT");
			Functions.glVertexAttribDivisorNVPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribDivisorNV");
			Functions.glVertexAttribFormatPtr = (delegate* unmanaged<uint, int, int, bool, uint, void>)Functions.LoadFunction("glVertexAttribFormat");
			Functions.glVertexAttribFormatNVPtr = (delegate* unmanaged<uint, int, int, bool, int, void>)Functions.LoadFunction("glVertexAttribFormatNV");
			Functions.glVertexAttribI1iPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glVertexAttribI1i");
			Functions.glVertexAttribI1iEXTPtr = (delegate* unmanaged<uint, int, void>)Functions.LoadFunction("glVertexAttribI1iEXT");
			Functions.glVertexAttribI1ivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI1iv");
			Functions.glVertexAttribI1ivEXTPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI1ivEXT");
			Functions.glVertexAttribI1uiPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribI1ui");
			Functions.glVertexAttribI1uiEXTPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexAttribI1uiEXT");
			Functions.glVertexAttribI1uivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI1uiv");
			Functions.glVertexAttribI1uivEXTPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI1uivEXT");
			Functions.glVertexAttribI2iPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glVertexAttribI2i");
			Functions.glVertexAttribI2iEXTPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glVertexAttribI2iEXT");
			Functions.glVertexAttribI2ivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI2iv");
			Functions.glVertexAttribI2ivEXTPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI2ivEXT");
			Functions.glVertexAttribI2uiPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI2ui");
			Functions.glVertexAttribI2uiEXTPtr = (delegate* unmanaged<uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI2uiEXT");
			Functions.glVertexAttribI2uivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI2uiv");
			Functions.glVertexAttribI2uivEXTPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI2uivEXT");
			Functions.glVertexAttribI3iPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glVertexAttribI3i");
			Functions.glVertexAttribI3iEXTPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glVertexAttribI3iEXT");
			Functions.glVertexAttribI3ivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI3iv");
			Functions.glVertexAttribI3ivEXTPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI3ivEXT");
			Functions.glVertexAttribI3uiPtr = (delegate* unmanaged<uint, uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI3ui");
			Functions.glVertexAttribI3uiEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI3uiEXT");
			Functions.glVertexAttribI3uivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI3uiv");
			Functions.glVertexAttribI3uivEXTPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI3uivEXT");
			Functions.glVertexAttribI4bvPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttribI4bv");
			Functions.glVertexAttribI4bvEXTPtr = (delegate* unmanaged<uint, sbyte*, void>)Functions.LoadFunction("glVertexAttribI4bvEXT");
			Functions.glVertexAttribI4iPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glVertexAttribI4i");
			Functions.glVertexAttribI4iEXTPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glVertexAttribI4iEXT");
			Functions.glVertexAttribI4ivPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI4iv");
			Functions.glVertexAttribI4ivEXTPtr = (delegate* unmanaged<uint, int*, void>)Functions.LoadFunction("glVertexAttribI4ivEXT");
			Functions.glVertexAttribI4svPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttribI4sv");
			Functions.glVertexAttribI4svEXTPtr = (delegate* unmanaged<uint, short*, void>)Functions.LoadFunction("glVertexAttribI4svEXT");
			Functions.glVertexAttribI4ubvPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttribI4ubv");
			Functions.glVertexAttribI4ubvEXTPtr = (delegate* unmanaged<uint, byte*, void>)Functions.LoadFunction("glVertexAttribI4ubvEXT");
			Functions.glVertexAttribI4uiPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI4ui");
			Functions.glVertexAttribI4uiEXTPtr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)Functions.LoadFunction("glVertexAttribI4uiEXT");
			Functions.glVertexAttribI4uivPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI4uiv");
			Functions.glVertexAttribI4uivEXTPtr = (delegate* unmanaged<uint, uint*, void>)Functions.LoadFunction("glVertexAttribI4uivEXT");
			Functions.glVertexAttribI4usvPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttribI4usv");
			Functions.glVertexAttribI4usvEXTPtr = (delegate* unmanaged<uint, ushort*, void>)Functions.LoadFunction("glVertexAttribI4usvEXT");
			Functions.glVertexAttribIFormatPtr = (delegate* unmanaged<uint, int, int, uint, void>)Functions.LoadFunction("glVertexAttribIFormat");
			Functions.glVertexAttribIFormatNVPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glVertexAttribIFormatNV");
			Functions.glVertexAttribIPointerPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexAttribIPointer");
			Functions.glVertexAttribIPointerEXTPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexAttribIPointerEXT");
			Functions.glVertexAttribL1dPtr = (delegate* unmanaged<uint, double, void>)Functions.LoadFunction("glVertexAttribL1d");
			Functions.glVertexAttribL1dEXTPtr = (delegate* unmanaged<uint, double, void>)Functions.LoadFunction("glVertexAttribL1dEXT");
			Functions.glVertexAttribL1dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL1dv");
			Functions.glVertexAttribL1dvEXTPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL1dvEXT");
			Functions.glVertexAttribL1i64NVPtr = (delegate* unmanaged<uint, long, void>)Functions.LoadFunction("glVertexAttribL1i64NV");
			Functions.glVertexAttribL1i64vNVPtr = (delegate* unmanaged<uint, long*, void>)Functions.LoadFunction("glVertexAttribL1i64vNV");
			Functions.glVertexAttribL1ui64ARBPtr = (delegate* unmanaged<uint, ulong, void>)Functions.LoadFunction("glVertexAttribL1ui64ARB");
			Functions.glVertexAttribL1ui64NVPtr = (delegate* unmanaged<uint, ulong, void>)Functions.LoadFunction("glVertexAttribL1ui64NV");
			Functions.glVertexAttribL1ui64vARBPtr = (delegate* unmanaged<uint, ulong*, void>)Functions.LoadFunction("glVertexAttribL1ui64vARB");
			Functions.glVertexAttribL1ui64vNVPtr = (delegate* unmanaged<uint, ulong*, void>)Functions.LoadFunction("glVertexAttribL1ui64vNV");
			Functions.glVertexAttribL2dPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glVertexAttribL2d");
			Functions.glVertexAttribL2dEXTPtr = (delegate* unmanaged<uint, double, double, void>)Functions.LoadFunction("glVertexAttribL2dEXT");
			Functions.glVertexAttribL2dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL2dv");
			Functions.glVertexAttribL2dvEXTPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL2dvEXT");
			Functions.glVertexAttribL2i64NVPtr = (delegate* unmanaged<uint, long, long, void>)Functions.LoadFunction("glVertexAttribL2i64NV");
			Functions.glVertexAttribL2i64vNVPtr = (delegate* unmanaged<uint, long*, void>)Functions.LoadFunction("glVertexAttribL2i64vNV");
			Functions.glVertexAttribL2ui64NVPtr = (delegate* unmanaged<uint, ulong, ulong, void>)Functions.LoadFunction("glVertexAttribL2ui64NV");
			Functions.glVertexAttribL2ui64vNVPtr = (delegate* unmanaged<uint, ulong*, void>)Functions.LoadFunction("glVertexAttribL2ui64vNV");
			Functions.glVertexAttribL3dPtr = (delegate* unmanaged<uint, double, double, double, void>)Functions.LoadFunction("glVertexAttribL3d");
			Functions.glVertexAttribL3dEXTPtr = (delegate* unmanaged<uint, double, double, double, void>)Functions.LoadFunction("glVertexAttribL3dEXT");
			Functions.glVertexAttribL3dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL3dv");
			Functions.glVertexAttribL3dvEXTPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL3dvEXT");
			Functions.glVertexAttribL3i64NVPtr = (delegate* unmanaged<uint, long, long, long, void>)Functions.LoadFunction("glVertexAttribL3i64NV");
			Functions.glVertexAttribL3i64vNVPtr = (delegate* unmanaged<uint, long*, void>)Functions.LoadFunction("glVertexAttribL3i64vNV");
			Functions.glVertexAttribL3ui64NVPtr = (delegate* unmanaged<uint, ulong, ulong, ulong, void>)Functions.LoadFunction("glVertexAttribL3ui64NV");
			Functions.glVertexAttribL3ui64vNVPtr = (delegate* unmanaged<uint, ulong*, void>)Functions.LoadFunction("glVertexAttribL3ui64vNV");
			Functions.glVertexAttribL4dPtr = (delegate* unmanaged<uint, double, double, double, double, void>)Functions.LoadFunction("glVertexAttribL4d");
			Functions.glVertexAttribL4dEXTPtr = (delegate* unmanaged<uint, double, double, double, double, void>)Functions.LoadFunction("glVertexAttribL4dEXT");
			Functions.glVertexAttribL4dvPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL4dv");
			Functions.glVertexAttribL4dvEXTPtr = (delegate* unmanaged<uint, double*, void>)Functions.LoadFunction("glVertexAttribL4dvEXT");
			Functions.glVertexAttribL4i64NVPtr = (delegate* unmanaged<uint, long, long, long, long, void>)Functions.LoadFunction("glVertexAttribL4i64NV");
			Functions.glVertexAttribL4i64vNVPtr = (delegate* unmanaged<uint, long*, void>)Functions.LoadFunction("glVertexAttribL4i64vNV");
			Functions.glVertexAttribL4ui64NVPtr = (delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void>)Functions.LoadFunction("glVertexAttribL4ui64NV");
			Functions.glVertexAttribL4ui64vNVPtr = (delegate* unmanaged<uint, ulong*, void>)Functions.LoadFunction("glVertexAttribL4ui64vNV");
			Functions.glVertexAttribLFormatPtr = (delegate* unmanaged<uint, int, int, uint, void>)Functions.LoadFunction("glVertexAttribLFormat");
			Functions.glVertexAttribLFormatNVPtr = (delegate* unmanaged<uint, int, int, int, void>)Functions.LoadFunction("glVertexAttribLFormatNV");
			Functions.glVertexAttribLPointerPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexAttribLPointer");
			Functions.glVertexAttribLPointerEXTPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexAttribLPointerEXT");
			Functions.glVertexAttribP1uiPtr = (delegate* unmanaged<uint, int, bool, uint, void>)Functions.LoadFunction("glVertexAttribP1ui");
			Functions.glVertexAttribP1uivPtr = (delegate* unmanaged<uint, int, bool, uint*, void>)Functions.LoadFunction("glVertexAttribP1uiv");
			Functions.glVertexAttribP2uiPtr = (delegate* unmanaged<uint, int, bool, uint, void>)Functions.LoadFunction("glVertexAttribP2ui");
			Functions.glVertexAttribP2uivPtr = (delegate* unmanaged<uint, int, bool, uint*, void>)Functions.LoadFunction("glVertexAttribP2uiv");
			Functions.glVertexAttribP3uiPtr = (delegate* unmanaged<uint, int, bool, uint, void>)Functions.LoadFunction("glVertexAttribP3ui");
			Functions.glVertexAttribP3uivPtr = (delegate* unmanaged<uint, int, bool, uint*, void>)Functions.LoadFunction("glVertexAttribP3uiv");
			Functions.glVertexAttribP4uiPtr = (delegate* unmanaged<uint, int, bool, uint, void>)Functions.LoadFunction("glVertexAttribP4ui");
			Functions.glVertexAttribP4uivPtr = (delegate* unmanaged<uint, int, bool, uint*, void>)Functions.LoadFunction("glVertexAttribP4uiv");
			Functions.glVertexAttribParameteriAMDPtr = (delegate* unmanaged<uint, int, int, void>)Functions.LoadFunction("glVertexAttribParameteriAMD");
			Functions.glVertexAttribPointerPtr = (delegate* unmanaged<uint, int, int, bool, int, void*, void>)Functions.LoadFunction("glVertexAttribPointer");
			Functions.glVertexAttribPointerARBPtr = (delegate* unmanaged<uint, int, int, bool, int, void*, void>)Functions.LoadFunction("glVertexAttribPointerARB");
			Functions.glVertexAttribPointerNVPtr = (delegate* unmanaged<uint, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexAttribPointerNV");
			Functions.glVertexAttribs1dvNVPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glVertexAttribs1dvNV");
			Functions.glVertexAttribs1fvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glVertexAttribs1fvNV");
			Functions.glVertexAttribs1hvNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs1hvNV");
			Functions.glVertexAttribs1svNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs1svNV");
			Functions.glVertexAttribs2dvNVPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glVertexAttribs2dvNV");
			Functions.glVertexAttribs2fvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glVertexAttribs2fvNV");
			Functions.glVertexAttribs2hvNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs2hvNV");
			Functions.glVertexAttribs2svNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs2svNV");
			Functions.glVertexAttribs3dvNVPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glVertexAttribs3dvNV");
			Functions.glVertexAttribs3fvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glVertexAttribs3fvNV");
			Functions.glVertexAttribs3hvNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs3hvNV");
			Functions.glVertexAttribs3svNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs3svNV");
			Functions.glVertexAttribs4dvNVPtr = (delegate* unmanaged<uint, int, double*, void>)Functions.LoadFunction("glVertexAttribs4dvNV");
			Functions.glVertexAttribs4fvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glVertexAttribs4fvNV");
			Functions.glVertexAttribs4hvNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs4hvNV");
			Functions.glVertexAttribs4svNVPtr = (delegate* unmanaged<uint, int, short*, void>)Functions.LoadFunction("glVertexAttribs4svNV");
			Functions.glVertexAttribs4ubvNVPtr = (delegate* unmanaged<uint, int, byte*, void>)Functions.LoadFunction("glVertexAttribs4ubvNV");
			Functions.glVertexBindingDivisorPtr = (delegate* unmanaged<uint, uint, void>)Functions.LoadFunction("glVertexBindingDivisor");
			Functions.glVertexBlendARBPtr = (delegate* unmanaged<int, void>)Functions.LoadFunction("glVertexBlendARB");
			Functions.glVertexBlendEnvfATIPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glVertexBlendEnvfATI");
			Functions.glVertexBlendEnviATIPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glVertexBlendEnviATI");
			Functions.glVertexFormatNVPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glVertexFormatNV");
			Functions.glVertexP2uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glVertexP2ui");
			Functions.glVertexP2uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glVertexP2uiv");
			Functions.glVertexP3uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glVertexP3ui");
			Functions.glVertexP3uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glVertexP3uiv");
			Functions.glVertexP4uiPtr = (delegate* unmanaged<int, uint, void>)Functions.LoadFunction("glVertexP4ui");
			Functions.glVertexP4uivPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glVertexP4uiv");
			Functions.glVertexPointerPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexPointer");
			Functions.glVertexPointerEXTPtr = (delegate* unmanaged<int, int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexPointerEXT");
			Functions.glVertexPointerListIBMPtr = (delegate* unmanaged<int, int, int, IntPtr*, int, void>)Functions.LoadFunction("glVertexPointerListIBM");
			Functions.glVertexPointervINTELPtr = (delegate* unmanaged<int, int, IntPtr*, void>)Functions.LoadFunction("glVertexPointervINTEL");
			Functions.glVertexStream1dATIPtr = (delegate* unmanaged<int, double, void>)Functions.LoadFunction("glVertexStream1dATI");
			Functions.glVertexStream1dvATIPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glVertexStream1dvATI");
			Functions.glVertexStream1fATIPtr = (delegate* unmanaged<int, float, void>)Functions.LoadFunction("glVertexStream1fATI");
			Functions.glVertexStream1fvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glVertexStream1fvATI");
			Functions.glVertexStream1iATIPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glVertexStream1iATI");
			Functions.glVertexStream1ivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glVertexStream1ivATI");
			Functions.glVertexStream1sATIPtr = (delegate* unmanaged<int, short, void>)Functions.LoadFunction("glVertexStream1sATI");
			Functions.glVertexStream1svATIPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glVertexStream1svATI");
			Functions.glVertexStream2dATIPtr = (delegate* unmanaged<int, double, double, void>)Functions.LoadFunction("glVertexStream2dATI");
			Functions.glVertexStream2dvATIPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glVertexStream2dvATI");
			Functions.glVertexStream2fATIPtr = (delegate* unmanaged<int, float, float, void>)Functions.LoadFunction("glVertexStream2fATI");
			Functions.glVertexStream2fvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glVertexStream2fvATI");
			Functions.glVertexStream2iATIPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glVertexStream2iATI");
			Functions.glVertexStream2ivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glVertexStream2ivATI");
			Functions.glVertexStream2sATIPtr = (delegate* unmanaged<int, short, short, void>)Functions.LoadFunction("glVertexStream2sATI");
			Functions.glVertexStream2svATIPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glVertexStream2svATI");
			Functions.glVertexStream3dATIPtr = (delegate* unmanaged<int, double, double, double, void>)Functions.LoadFunction("glVertexStream3dATI");
			Functions.glVertexStream3dvATIPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glVertexStream3dvATI");
			Functions.glVertexStream3fATIPtr = (delegate* unmanaged<int, float, float, float, void>)Functions.LoadFunction("glVertexStream3fATI");
			Functions.glVertexStream3fvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glVertexStream3fvATI");
			Functions.glVertexStream3iATIPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glVertexStream3iATI");
			Functions.glVertexStream3ivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glVertexStream3ivATI");
			Functions.glVertexStream3sATIPtr = (delegate* unmanaged<int, short, short, short, void>)Functions.LoadFunction("glVertexStream3sATI");
			Functions.glVertexStream3svATIPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glVertexStream3svATI");
			Functions.glVertexStream4dATIPtr = (delegate* unmanaged<int, double, double, double, double, void>)Functions.LoadFunction("glVertexStream4dATI");
			Functions.glVertexStream4dvATIPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glVertexStream4dvATI");
			Functions.glVertexStream4fATIPtr = (delegate* unmanaged<int, float, float, float, float, void>)Functions.LoadFunction("glVertexStream4fATI");
			Functions.glVertexStream4fvATIPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glVertexStream4fvATI");
			Functions.glVertexStream4iATIPtr = (delegate* unmanaged<int, int, int, int, int, void>)Functions.LoadFunction("glVertexStream4iATI");
			Functions.glVertexStream4ivATIPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glVertexStream4ivATI");
			Functions.glVertexStream4sATIPtr = (delegate* unmanaged<int, short, short, short, short, void>)Functions.LoadFunction("glVertexStream4sATI");
			Functions.glVertexStream4svATIPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glVertexStream4svATI");
			Functions.glVertexWeightPointerEXTPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glVertexWeightPointerEXT");
			Functions.glVertexWeightfEXTPtr = (delegate* unmanaged<float, void>)Functions.LoadFunction("glVertexWeightfEXT");
			Functions.glVertexWeightfvEXTPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glVertexWeightfvEXT");
			Functions.glVertexWeighthNVPtr = (delegate* unmanaged<short, void>)Functions.LoadFunction("glVertexWeighthNV");
			Functions.glVertexWeighthvNVPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glVertexWeighthvNV");
			Functions.glVideoCaptureNVPtr = (delegate* unmanaged<uint, uint*, ulong*, int>)Functions.LoadFunction("glVideoCaptureNV");
			Functions.glVideoCaptureStreamParameterdvNVPtr = (delegate* unmanaged<uint, uint, int, double*, void>)Functions.LoadFunction("glVideoCaptureStreamParameterdvNV");
			Functions.glVideoCaptureStreamParameterfvNVPtr = (delegate* unmanaged<uint, uint, int, float*, void>)Functions.LoadFunction("glVideoCaptureStreamParameterfvNV");
			Functions.glVideoCaptureStreamParameterivNVPtr = (delegate* unmanaged<uint, uint, int, int*, void>)Functions.LoadFunction("glVideoCaptureStreamParameterivNV");
			Functions.glViewportPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glViewport");
			Functions.glViewportArrayvPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glViewportArrayv");
			Functions.glViewportArrayvNVPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glViewportArrayvNV");
			Functions.glViewportArrayvOESPtr = (delegate* unmanaged<uint, int, float*, void>)Functions.LoadFunction("glViewportArrayvOES");
			Functions.glViewportIndexedfPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glViewportIndexedf");
			Functions.glViewportIndexedfOESPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glViewportIndexedfOES");
			Functions.glViewportIndexedfNVPtr = (delegate* unmanaged<uint, float, float, float, float, void>)Functions.LoadFunction("glViewportIndexedfNV");
			Functions.glViewportIndexedfvPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glViewportIndexedfv");
			Functions.glViewportIndexedfvOESPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glViewportIndexedfvOES");
			Functions.glViewportIndexedfvNVPtr = (delegate* unmanaged<uint, float*, void>)Functions.LoadFunction("glViewportIndexedfvNV");
			Functions.glViewportPositionWScaleNVPtr = (delegate* unmanaged<uint, float, float, void>)Functions.LoadFunction("glViewportPositionWScaleNV");
			Functions.glViewportSwizzleNVPtr = (delegate* unmanaged<uint, int, int, int, int, void>)Functions.LoadFunction("glViewportSwizzleNV");
			Functions.glWaitSemaphoreEXTPtr = (delegate* unmanaged<uint, uint, uint*, uint, uint*, uint*, void>)Functions.LoadFunction("glWaitSemaphoreEXT");
			Functions.glWaitSyncPtr = (delegate* unmanaged<IntPtr, uint, ulong, void>)Functions.LoadFunction("glWaitSync");
			Functions.glWaitSyncAPPLEPtr = (delegate* unmanaged<IntPtr, uint, ulong, void>)Functions.LoadFunction("glWaitSyncAPPLE");
			Functions.glWeightPathsNVPtr = (delegate* unmanaged<uint, int, uint*, float*, void>)Functions.LoadFunction("glWeightPathsNV");
			Functions.glWeightPointerARBPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glWeightPointerARB");
			Functions.glWeightPointerOESPtr = (delegate* unmanaged<int, int, int, IntPtr, void>)Functions.LoadFunction("glWeightPointerOES");
			Functions.glWeightbvARBPtr = (delegate* unmanaged<int, sbyte*, void>)Functions.LoadFunction("glWeightbvARB");
			Functions.glWeightdvARBPtr = (delegate* unmanaged<int, double*, void>)Functions.LoadFunction("glWeightdvARB");
			Functions.glWeightfvARBPtr = (delegate* unmanaged<int, float*, void>)Functions.LoadFunction("glWeightfvARB");
			Functions.glWeightivARBPtr = (delegate* unmanaged<int, int*, void>)Functions.LoadFunction("glWeightivARB");
			Functions.glWeightsvARBPtr = (delegate* unmanaged<int, short*, void>)Functions.LoadFunction("glWeightsvARB");
			Functions.glWeightubvARBPtr = (delegate* unmanaged<int, byte*, void>)Functions.LoadFunction("glWeightubvARB");
			Functions.glWeightuivARBPtr = (delegate* unmanaged<int, uint*, void>)Functions.LoadFunction("glWeightuivARB");
			Functions.glWeightusvARBPtr = (delegate* unmanaged<int, ushort*, void>)Functions.LoadFunction("glWeightusvARB");
			Functions.glWindowPos2dPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glWindowPos2d");
			Functions.glWindowPos2dARBPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glWindowPos2dARB");
			Functions.glWindowPos2dMESAPtr = (delegate* unmanaged<double, double, void>)Functions.LoadFunction("glWindowPos2dMESA");
			Functions.glWindowPos2dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos2dv");
			Functions.glWindowPos2dvARBPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos2dvARB");
			Functions.glWindowPos2dvMESAPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos2dvMESA");
			Functions.glWindowPos2fPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glWindowPos2f");
			Functions.glWindowPos2fARBPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glWindowPos2fARB");
			Functions.glWindowPos2fMESAPtr = (delegate* unmanaged<float, float, void>)Functions.LoadFunction("glWindowPos2fMESA");
			Functions.glWindowPos2fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos2fv");
			Functions.glWindowPos2fvARBPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos2fvARB");
			Functions.glWindowPos2fvMESAPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos2fvMESA");
			Functions.glWindowPos2iPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glWindowPos2i");
			Functions.glWindowPos2iARBPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glWindowPos2iARB");
			Functions.glWindowPos2iMESAPtr = (delegate* unmanaged<int, int, void>)Functions.LoadFunction("glWindowPos2iMESA");
			Functions.glWindowPos2ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos2iv");
			Functions.glWindowPos2ivARBPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos2ivARB");
			Functions.glWindowPos2ivMESAPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos2ivMESA");
			Functions.glWindowPos2sPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glWindowPos2s");
			Functions.glWindowPos2sARBPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glWindowPos2sARB");
			Functions.glWindowPos2sMESAPtr = (delegate* unmanaged<short, short, void>)Functions.LoadFunction("glWindowPos2sMESA");
			Functions.glWindowPos2svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos2sv");
			Functions.glWindowPos2svARBPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos2svARB");
			Functions.glWindowPos2svMESAPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos2svMESA");
			Functions.glWindowPos3dPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glWindowPos3d");
			Functions.glWindowPos3dARBPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glWindowPos3dARB");
			Functions.glWindowPos3dMESAPtr = (delegate* unmanaged<double, double, double, void>)Functions.LoadFunction("glWindowPos3dMESA");
			Functions.glWindowPos3dvPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos3dv");
			Functions.glWindowPos3dvARBPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos3dvARB");
			Functions.glWindowPos3dvMESAPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos3dvMESA");
			Functions.glWindowPos3fPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glWindowPos3f");
			Functions.glWindowPos3fARBPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glWindowPos3fARB");
			Functions.glWindowPos3fMESAPtr = (delegate* unmanaged<float, float, float, void>)Functions.LoadFunction("glWindowPos3fMESA");
			Functions.glWindowPos3fvPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos3fv");
			Functions.glWindowPos3fvARBPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos3fvARB");
			Functions.glWindowPos3fvMESAPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos3fvMESA");
			Functions.glWindowPos3iPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glWindowPos3i");
			Functions.glWindowPos3iARBPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glWindowPos3iARB");
			Functions.glWindowPos3iMESAPtr = (delegate* unmanaged<int, int, int, void>)Functions.LoadFunction("glWindowPos3iMESA");
			Functions.glWindowPos3ivPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos3iv");
			Functions.glWindowPos3ivARBPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos3ivARB");
			Functions.glWindowPos3ivMESAPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos3ivMESA");
			Functions.glWindowPos3sPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glWindowPos3s");
			Functions.glWindowPos3sARBPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glWindowPos3sARB");
			Functions.glWindowPos3sMESAPtr = (delegate* unmanaged<short, short, short, void>)Functions.LoadFunction("glWindowPos3sMESA");
			Functions.glWindowPos3svPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos3sv");
			Functions.glWindowPos3svARBPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos3svARB");
			Functions.glWindowPos3svMESAPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos3svMESA");
			Functions.glWindowPos4dMESAPtr = (delegate* unmanaged<double, double, double, double, void>)Functions.LoadFunction("glWindowPos4dMESA");
			Functions.glWindowPos4dvMESAPtr = (delegate* unmanaged<double*, void>)Functions.LoadFunction("glWindowPos4dvMESA");
			Functions.glWindowPos4fMESAPtr = (delegate* unmanaged<float, float, float, float, void>)Functions.LoadFunction("glWindowPos4fMESA");
			Functions.glWindowPos4fvMESAPtr = (delegate* unmanaged<float*, void>)Functions.LoadFunction("glWindowPos4fvMESA");
			Functions.glWindowPos4iMESAPtr = (delegate* unmanaged<int, int, int, int, void>)Functions.LoadFunction("glWindowPos4iMESA");
			Functions.glWindowPos4ivMESAPtr = (delegate* unmanaged<int*, void>)Functions.LoadFunction("glWindowPos4ivMESA");
			Functions.glWindowPos4sMESAPtr = (delegate* unmanaged<short, short, short, short, void>)Functions.LoadFunction("glWindowPos4sMESA");
			Functions.glWindowPos4svMESAPtr = (delegate* unmanaged<short*, void>)Functions.LoadFunction("glWindowPos4svMESA");
			Functions.glWindowRectanglesEXTPtr = (delegate* unmanaged<int, int, int*, void>)Functions.LoadFunction("glWindowRectanglesEXT");
			Functions.glWriteMaskEXTPtr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)Functions.LoadFunction("glWriteMaskEXT");
			Functions.glDrawVkImageNVPtr = (delegate* unmanaged<ulong, uint, float, float, float, float, float, float, float, float, float, void>)Functions.LoadFunction("glDrawVkImageNV");
			Functions.glGetVkProcAddrNVPtr = (delegate* unmanaged<byte*, IntPtr>)Functions.LoadFunction("glGetVkProcAddrNV");
			Functions.glWaitVkSemaphoreNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glWaitVkSemaphoreNV");
			Functions.glSignalVkSemaphoreNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glSignalVkSemaphoreNV");
			Functions.glSignalVkFenceNVPtr = (delegate* unmanaged<ulong, void>)Functions.LoadFunction("glSignalVkFenceNV");
		}

		private static void* LoadFunction(string name) => Functions.loader.LoadFunction(name).ToPointer();


		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAccum(int op, float value)
		{
			Functions.glAccumPtr(op, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAccumxOES(int op, IntPtr value)
		{
			Functions.glAccumxOESPtr(op, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveProgramEXT(uint program)
		{
			Functions.glActiveProgramEXTPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveShaderProgram(uint pipeline, uint program)
		{
			Functions.glActiveShaderProgramPtr(pipeline, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveShaderProgramEXT(uint pipeline, uint program)
		{
			Functions.glActiveShaderProgramEXTPtr(pipeline, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveStencilFaceEXT(int face)
		{
			Functions.glActiveStencilFaceEXTPtr(face);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveTexture(int texture)
		{
			Functions.glActiveTexturePtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveTextureARB(int texture)
		{
			Functions.glActiveTextureARBPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glActiveVaryingNV(uint program, byte* name)
		{
			Functions.glActiveVaryingNVPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFragmentOp1ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
		{
			Functions.glAlphaFragmentOp1ATIPtr(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFragmentOp2ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
		{
			Functions.glAlphaFragmentOp2ATIPtr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFragmentOp3ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
		{
			Functions.glAlphaFragmentOp3ATIPtr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFunc(int func, float _ref)
		{
			Functions.glAlphaFuncPtr(func, _ref);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFuncQCOM(int func, float _ref)
		{
			Functions.glAlphaFuncQCOMPtr(func, _ref);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFuncx(int func, IntPtr _ref)
		{
			Functions.glAlphaFuncxPtr(func, _ref);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaFuncxOES(int func, IntPtr _ref)
		{
			Functions.glAlphaFuncxOESPtr(func, _ref);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAlphaToCoverageDitherControlNV(int mode)
		{
			Functions.glAlphaToCoverageDitherControlNVPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glApplyFramebufferAttachmentCMAAINTEL()
		{
			Functions.glApplyFramebufferAttachmentCMAAINTELPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glApplyTextureEXT(int mode)
		{
			Functions.glApplyTextureEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout)
		{
			return Functions.glAcquireKeyedMutexWin32EXTPtr(memory, key, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glAreProgramsResidentNV(int n, uint* programs, bool* residences)
		{
			return Functions.glAreProgramsResidentNVPtr(n, programs, residences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glAreTexturesResident(int n, uint* textures, bool* residences)
		{
			return Functions.glAreTexturesResidentPtr(n, textures, residences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glAreTexturesResidentEXT(int n, uint* textures, bool* residences)
		{
			return Functions.glAreTexturesResidentEXTPtr(n, textures, residences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glArrayElement(int i)
		{
			Functions.glArrayElementPtr(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glArrayElementEXT(int i)
		{
			Functions.glArrayElementEXTPtr(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, uint offset)
		{
			Functions.glArrayObjectATIPtr(array, size, type, stride, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAsyncMarkerSGIX(uint marker)
		{
			Functions.glAsyncMarkerSGIXPtr(marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAttachObjectARB(uint containerObj, uint obj)
		{
			Functions.glAttachObjectARBPtr(containerObj, obj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glAttachShader(uint program, uint shader)
		{
			Functions.glAttachShaderPtr(program, shader);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBegin(int mode)
		{
			Functions.glBeginPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginConditionalRender(uint id, int mode)
		{
			Functions.glBeginConditionalRenderPtr(id, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginConditionalRenderNV(uint id, int mode)
		{
			Functions.glBeginConditionalRenderNVPtr(id, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginConditionalRenderNVX(uint id)
		{
			Functions.glBeginConditionalRenderNVXPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginFragmentShaderATI()
		{
			Functions.glBeginFragmentShaderATIPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginOcclusionQueryNV(uint id)
		{
			Functions.glBeginOcclusionQueryNVPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginPerfMonitorAMD(uint monitor)
		{
			Functions.glBeginPerfMonitorAMDPtr(monitor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginPerfQueryINTEL(uint queryHandle)
		{
			Functions.glBeginPerfQueryINTELPtr(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginQuery(int target, uint id)
		{
			Functions.glBeginQueryPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginQueryARB(int target, uint id)
		{
			Functions.glBeginQueryARBPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginQueryEXT(int target, uint id)
		{
			Functions.glBeginQueryEXTPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginQueryIndexed(int target, uint index, uint id)
		{
			Functions.glBeginQueryIndexedPtr(target, index, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginTransformFeedback(int primitiveMode)
		{
			Functions.glBeginTransformFeedbackPtr(primitiveMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginTransformFeedbackEXT(int primitiveMode)
		{
			Functions.glBeginTransformFeedbackEXTPtr(primitiveMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginTransformFeedbackNV(int primitiveMode)
		{
			Functions.glBeginTransformFeedbackNVPtr(primitiveMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginVertexShaderEXT()
		{
			Functions.glBeginVertexShaderEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBeginVideoCaptureNV(uint video_capture_slot)
		{
			Functions.glBeginVideoCaptureNVPtr(video_capture_slot);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindAttribLocation(uint program, uint index, byte* name)
		{
			Functions.glBindAttribLocationPtr(program, index, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindAttribLocationARB(uint programObj, uint index, byte* name)
		{
			Functions.glBindAttribLocationARBPtr(programObj, index, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBuffer(int target, uint buffer)
		{
			Functions.glBindBufferPtr(target, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferARB(int target, uint buffer)
		{
			Functions.glBindBufferARBPtr(target, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferBase(int target, uint index, uint buffer)
		{
			Functions.glBindBufferBasePtr(target, index, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferBaseEXT(int target, uint index, uint buffer)
		{
			Functions.glBindBufferBaseEXTPtr(target, index, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferBaseNV(int target, uint index, uint buffer)
		{
			Functions.glBindBufferBaseNVPtr(target, index, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferOffsetEXT(int target, uint index, uint buffer, uint offset)
		{
			Functions.glBindBufferOffsetEXTPtr(target, index, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferOffsetNV(int target, uint index, uint buffer, uint offset)
		{
			Functions.glBindBufferOffsetNVPtr(target, index, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferRange(int target, uint index, uint buffer, uint offset, uint size)
		{
			Functions.glBindBufferRangePtr(target, index, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferRangeEXT(int target, uint index, uint buffer, uint offset, uint size)
		{
			Functions.glBindBufferRangeEXTPtr(target, index, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBufferRangeNV(int target, uint index, uint buffer, uint offset, uint size)
		{
			Functions.glBindBufferRangeNVPtr(target, index, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBuffersBase(int target, uint first, int count, uint* buffers)
		{
			Functions.glBindBuffersBasePtr(target, first, count, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindBuffersRange(int target, uint first, int count, uint* buffers, uint* offsets, uint* sizes)
		{
			Functions.glBindBuffersRangePtr(target, first, count, buffers, offsets, sizes);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFragDataLocation(uint program, uint color, byte* name)
		{
			Functions.glBindFragDataLocationPtr(program, color, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFragDataLocationEXT(uint program, uint color, byte* name)
		{
			Functions.glBindFragDataLocationEXTPtr(program, color, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte* name)
		{
			Functions.glBindFragDataLocationIndexedPtr(program, colorNumber, index, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, byte* name)
		{
			Functions.glBindFragDataLocationIndexedEXTPtr(program, colorNumber, index, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFragmentShaderATI(uint id)
		{
			Functions.glBindFragmentShaderATIPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFramebuffer(int target, uint framebuffer)
		{
			Functions.glBindFramebufferPtr(target, framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFramebufferEXT(int target, uint framebuffer)
		{
			Functions.glBindFramebufferEXTPtr(target, framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindFramebufferOES(int target, uint framebuffer)
		{
			Functions.glBindFramebufferOESPtr(target, framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, int access, int format)
		{
			Functions.glBindImageTexturePtr(unit, texture, level, layered, layer, access, format);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, int access, int format)
		{
			Functions.glBindImageTextureEXTPtr(index, texture, level, layered, layer, access, format);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindImageTextures(uint first, int count, uint* textures)
		{
			Functions.glBindImageTexturesPtr(first, count, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glBindLightParameterEXT(int light, int value)
		{
			return Functions.glBindLightParameterEXTPtr(light, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glBindMaterialParameterEXT(int face, int value)
		{
			return Functions.glBindMaterialParameterEXTPtr(face, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindMultiTextureEXT(int texunit, int target, uint texture)
		{
			Functions.glBindMultiTextureEXTPtr(texunit, target, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glBindParameterEXT(int value)
		{
			return Functions.glBindParameterEXTPtr(value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindProgramARB(int target, uint program)
		{
			Functions.glBindProgramARBPtr(target, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindProgramNV(int target, uint id)
		{
			Functions.glBindProgramNVPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindProgramPipeline(uint pipeline)
		{
			Functions.glBindProgramPipelinePtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindProgramPipelineEXT(uint pipeline)
		{
			Functions.glBindProgramPipelineEXTPtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindRenderbuffer(int target, uint renderbuffer)
		{
			Functions.glBindRenderbufferPtr(target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindRenderbufferEXT(int target, uint renderbuffer)
		{
			Functions.glBindRenderbufferEXTPtr(target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindRenderbufferOES(int target, uint renderbuffer)
		{
			Functions.glBindRenderbufferOESPtr(target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindSampler(uint unit, uint sampler)
		{
			Functions.glBindSamplerPtr(unit, sampler);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindSamplers(uint first, int count, uint* samplers)
		{
			Functions.glBindSamplersPtr(first, count, samplers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindShadingRateImageNV(uint texture)
		{
			Functions.glBindShadingRateImageNVPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glBindTexGenParameterEXT(int unit, int coord, int value)
		{
			return Functions.glBindTexGenParameterEXTPtr(unit, coord, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTexture(int target, uint texture)
		{
			Functions.glBindTexturePtr(target, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTextureEXT(int target, uint texture)
		{
			Functions.glBindTextureEXTPtr(target, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTextureUnit(uint unit, uint texture)
		{
			Functions.glBindTextureUnitPtr(unit, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glBindTextureUnitParameterEXT(int unit, int value)
		{
			return Functions.glBindTextureUnitParameterEXTPtr(unit, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTextures(uint first, int count, uint* textures)
		{
			Functions.glBindTexturesPtr(first, count, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTransformFeedback(int target, uint id)
		{
			Functions.glBindTransformFeedbackPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindTransformFeedbackNV(int target, uint id)
		{
			Functions.glBindTransformFeedbackNVPtr(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexArray(uint array)
		{
			Functions.glBindVertexArrayPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexArrayAPPLE(uint array)
		{
			Functions.glBindVertexArrayAPPLEPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexArrayOES(uint array)
		{
			Functions.glBindVertexArrayOESPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexBuffer(uint bindingindex, uint buffer, uint offset, int stride)
		{
			Functions.glBindVertexBufferPtr(bindingindex, buffer, offset, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexBuffers(uint first, int count, uint* buffers, uint* offsets, int* strides)
		{
			Functions.glBindVertexBuffersPtr(first, count, buffers, offsets, strides);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVertexShaderEXT(uint id)
		{
			Functions.glBindVertexShaderEXTPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, IntPtr offset)
		{
			Functions.glBindVideoCaptureStreamBufferNVPtr(video_capture_slot, stream, frame_region, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture)
		{
			Functions.glBindVideoCaptureStreamTextureNVPtr(video_capture_slot, stream, frame_region, target, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz)
		{
			Functions.glBinormal3bEXTPtr(bx, by, bz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3bvEXT(sbyte* v)
		{
			Functions.glBinormal3bvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3dEXT(double bx, double by, double bz)
		{
			Functions.glBinormal3dEXTPtr(bx, by, bz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3dvEXT(double* v)
		{
			Functions.glBinormal3dvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3fEXT(float bx, float by, float bz)
		{
			Functions.glBinormal3fEXTPtr(bx, by, bz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3fvEXT(float* v)
		{
			Functions.glBinormal3fvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3iEXT(int bx, int by, int bz)
		{
			Functions.glBinormal3iEXTPtr(bx, by, bz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3ivEXT(int* v)
		{
			Functions.glBinormal3ivEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3sEXT(short bx, short by, short bz)
		{
			Functions.glBinormal3sEXTPtr(bx, by, bz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormal3svEXT(short* v)
		{
			Functions.glBinormal3svEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBinormalPointerEXT(int type, int stride, IntPtr pointer)
		{
			Functions.glBinormalPointerEXTPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
		{
			Functions.glBitmapPtr(width, height, xorig, yorig, xmove, ymove, bitmap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBitmapxOES(int width, int height, IntPtr xorig, IntPtr yorig, IntPtr xmove, IntPtr ymove, byte* bitmap)
		{
			Functions.glBitmapxOESPtr(width, height, xorig, yorig, xmove, ymove, bitmap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendBarrier()
		{
			Functions.glBlendBarrierPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendBarrierKHR()
		{
			Functions.glBlendBarrierKHRPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendBarrierNV()
		{
			Functions.glBlendBarrierNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendColor(float red, float green, float blue, float alpha)
		{
			Functions.glBlendColorPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendColorEXT(float red, float green, float blue, float alpha)
		{
			Functions.glBlendColorEXTPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glBlendColorxOESPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquation(int mode)
		{
			Functions.glBlendEquationPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationEXT(int mode)
		{
			Functions.glBlendEquationEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationIndexedAMD(uint buf, int mode)
		{
			Functions.glBlendEquationIndexedAMDPtr(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationOES(int mode)
		{
			Functions.glBlendEquationOESPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparate(int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparatePtr(modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateEXTPtr(modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateIndexedAMD(uint buf, int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateIndexedAMDPtr(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateOES(int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateOESPtr(modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparatei(uint buf, int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateiPtr(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateiARB(uint buf, int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateiARBPtr(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateiEXT(uint buf, int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateiEXTPtr(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationSeparateiOES(uint buf, int modeRGB, int modeAlpha)
		{
			Functions.glBlendEquationSeparateiOESPtr(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationi(uint buf, int mode)
		{
			Functions.glBlendEquationiPtr(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationiARB(uint buf, int mode)
		{
			Functions.glBlendEquationiARBPtr(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationiEXT(uint buf, int mode)
		{
			Functions.glBlendEquationiEXTPtr(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendEquationiOES(uint buf, int mode)
		{
			Functions.glBlendEquationiOESPtr(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFunc(int sfactor, int dfactor)
		{
			Functions.glBlendFuncPtr(sfactor, dfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncIndexedAMD(uint buf, int src, int dst)
		{
			Functions.glBlendFuncIndexedAMDPtr(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Functions.glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Functions.glBlendFuncSeparateEXTPtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Functions.glBlendFuncSeparateINGRPtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateIndexedAMD(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateIndexedAMDPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateOES(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateOESPtr(srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparatei(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateiPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateiARB(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateiARBPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateiEXT(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateiEXTPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFuncSeparateiOES(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Functions.glBlendFuncSeparateiOESPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFunci(uint buf, int src, int dst)
		{
			Functions.glBlendFunciPtr(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFunciARB(uint buf, int src, int dst)
		{
			Functions.glBlendFunciARBPtr(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFunciEXT(uint buf, int src, int dst)
		{
			Functions.glBlendFunciEXTPtr(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendFunciOES(uint buf, int src, int dst)
		{
			Functions.glBlendFunciOESPtr(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlendParameteriNV(int pname, int value)
		{
			Functions.glBlendParameteriNVPtr(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glBlitFramebufferPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glBlitFramebufferANGLEPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glBlitFramebufferEXTPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glBlitFramebufferNVPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glBlitNamedFramebufferPtr(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferAddressRangeNV(int pname, uint index, ulong address, uint length)
		{
			Functions.glBufferAddressRangeNVPtr(pname, index, address, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferAttachMemoryNV(int target, uint memory, ulong offset)
		{
			Functions.glBufferAttachMemoryNVPtr(target, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferData(int target, uint size, void* data, int usage)
		{
			Functions.glBufferDataPtr(target, size, data, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferDataARB(int target, uint size, void* data, int usage)
		{
			Functions.glBufferDataARBPtr(target, size, data, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferPageCommitmentARB(int target, uint offset, uint size, bool commit)
		{
			Functions.glBufferPageCommitmentARBPtr(target, offset, size, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferParameteriAPPLE(int target, int pname, int param)
		{
			Functions.glBufferParameteriAPPLEPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferStorage(int target, uint size, void* data, uint flags)
		{
			Functions.glBufferStoragePtr(target, size, data, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferStorageEXT(int target, uint size, void* data, uint flags)
		{
			Functions.glBufferStorageEXTPtr(target, size, data, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferStorageExternalEXT(int target, uint offset, uint size, IntPtr clientBuffer, uint flags)
		{
			Functions.glBufferStorageExternalEXTPtr(target, offset, size, clientBuffer, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferStorageMemEXT(int target, uint size, uint memory, ulong offset)
		{
			Functions.glBufferStorageMemEXTPtr(target, size, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferSubData(int target, uint offset, uint size, void* data)
		{
			Functions.glBufferSubDataPtr(target, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data)
		{
			Functions.glBufferSubDataARBPtr(target, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCallCommandListNV(uint list)
		{
			Functions.glCallCommandListNVPtr(list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCallList(uint list)
		{
			Functions.glCallListPtr(list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCallLists(int n, int type, IntPtr lists)
		{
			Functions.glCallListsPtr(n, type, lists);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glCheckFramebufferStatus(int target)
		{
			return Functions.glCheckFramebufferStatusPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glCheckFramebufferStatusEXT(int target)
		{
			return Functions.glCheckFramebufferStatusEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glCheckFramebufferStatusOES(int target)
		{
			return Functions.glCheckFramebufferStatusOESPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glCheckNamedFramebufferStatus(uint framebuffer, int target)
		{
			return Functions.glCheckNamedFramebufferStatusPtr(framebuffer, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glCheckNamedFramebufferStatusEXT(uint framebuffer, int target)
		{
			return Functions.glCheckNamedFramebufferStatusEXTPtr(framebuffer, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClampColor(int target, int clamp)
		{
			Functions.glClampColorPtr(target, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClampColorARB(int target, int clamp)
		{
			Functions.glClampColorARBPtr(target, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClear(uint mask)
		{
			Functions.glClearPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearAccum(float red, float green, float blue, float alpha)
		{
			Functions.glClearAccumPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearAccumxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glClearAccumxOESPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferData(int target, int internalformat, int format, int type, IntPtr data)
		{
			Functions.glClearBufferDataPtr(target, internalformat, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferSubData(int target, int internalformat, uint offset, uint size, int format, int type, IntPtr data)
		{
			Functions.glClearBufferSubDataPtr(target, internalformat, offset, size, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil)
		{
			Functions.glClearBufferfiPtr(buffer, drawbuffer, depth, stencil);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferfv(int buffer, int drawbuffer, float* value)
		{
			Functions.glClearBufferfvPtr(buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferiv(int buffer, int drawbuffer, int* value)
		{
			Functions.glClearBufferivPtr(buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearBufferuiv(int buffer, int drawbuffer, uint* value)
		{
			Functions.glClearBufferuivPtr(buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearColor(float red, float green, float blue, float alpha)
		{
			Functions.glClearColorPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearColorIiEXT(int red, int green, int blue, int alpha)
		{
			Functions.glClearColorIiEXTPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha)
		{
			Functions.glClearColorIuiEXTPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearColorx(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glClearColorxPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearColorxOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glClearColorxOESPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepth(double depth)
		{
			Functions.glClearDepthPtr(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepthdNV(double depth)
		{
			Functions.glClearDepthdNVPtr(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepthf(float d)
		{
			Functions.glClearDepthfPtr(d);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepthfOES(float depth)
		{
			Functions.glClearDepthfOESPtr(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepthx(IntPtr depth)
		{
			Functions.glClearDepthxPtr(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearDepthxOES(IntPtr depth)
		{
			Functions.glClearDepthxOESPtr(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearIndex(float c)
		{
			Functions.glClearIndexPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedBufferData(uint buffer, int internalformat, int format, int type, IntPtr data)
		{
			Functions.glClearNamedBufferDataPtr(buffer, internalformat, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedBufferDataEXT(uint buffer, int internalformat, int format, int type, IntPtr data)
		{
			Functions.glClearNamedBufferDataEXTPtr(buffer, internalformat, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedBufferSubData(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data)
		{
			Functions.glClearNamedBufferSubDataPtr(buffer, internalformat, offset, size, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedBufferSubDataEXT(uint buffer, int internalformat, uint offset, uint size, int format, int type, IntPtr data)
		{
			Functions.glClearNamedBufferSubDataEXTPtr(buffer, internalformat, offset, size, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedFramebufferfi(uint framebuffer, int buffer, int drawbuffer, float depth, int stencil)
		{
			Functions.glClearNamedFramebufferfiPtr(framebuffer, buffer, drawbuffer, depth, stencil);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float* value)
		{
			Functions.glClearNamedFramebufferfvPtr(framebuffer, buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int* value)
		{
			Functions.glClearNamedFramebufferivPtr(framebuffer, buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint* value)
		{
			Functions.glClearNamedFramebufferuivPtr(framebuffer, buffer, drawbuffer, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values)
		{
			Functions.glClearPixelLocalStorageuiEXTPtr(offset, n, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearStencil(int s)
		{
			Functions.glClearStencilPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearTexImage(uint texture, int level, int format, int type, IntPtr data)
		{
			Functions.glClearTexImagePtr(texture, level, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearTexImageEXT(uint texture, int level, int format, int type, IntPtr data)
		{
			Functions.glClearTexImageEXTPtr(texture, level, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data)
		{
			Functions.glClearTexSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr data)
		{
			Functions.glClearTexSubImageEXTPtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClientActiveTexture(int texture)
		{
			Functions.glClientActiveTexturePtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClientActiveTextureARB(int texture)
		{
			Functions.glClientActiveTextureARBPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClientActiveVertexStreamATI(int stream)
		{
			Functions.glClientActiveVertexStreamATIPtr(stream);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClientAttribDefaultEXT(uint mask)
		{
			Functions.glClientAttribDefaultEXTPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
		{
			return Functions.glClientWaitSyncPtr(sync, flags, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glClientWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout)
		{
			return Functions.glClientWaitSyncAPPLEPtr(sync, flags, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipControl(int origin, int depth)
		{
			Functions.glClipControlPtr(origin, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipControlEXT(int origin, int depth)
		{
			Functions.glClipControlEXTPtr(origin, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlane(int plane, double* equation)
		{
			Functions.glClipPlanePtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanef(int p, float* eqn)
		{
			Functions.glClipPlanefPtr(p, eqn);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanefIMG(int p, float* eqn)
		{
			Functions.glClipPlanefIMGPtr(p, eqn);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanefOES(int plane, float* equation)
		{
			Functions.glClipPlanefOESPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanex(int plane, IntPtr* equation)
		{
			Functions.glClipPlanexPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanexIMG(int p, IntPtr* eqn)
		{
			Functions.glClipPlanexIMGPtr(p, eqn);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glClipPlanexOES(int plane, IntPtr* equation)
		{
			Functions.glClipPlanexOESPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3b(sbyte red, sbyte green, sbyte blue)
		{
			Functions.glColor3bPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3bv(sbyte* v)
		{
			Functions.glColor3bvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3d(double red, double green, double blue)
		{
			Functions.glColor3dPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3dv(double* v)
		{
			Functions.glColor3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3f(float red, float green, float blue)
		{
			Functions.glColor3fPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z)
		{
			Functions.glColor3fVertex3fSUNPtr(r, g, b, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3fVertex3fvSUN(float* c, float* v)
		{
			Functions.glColor3fVertex3fvSUNPtr(c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3fv(float* v)
		{
			Functions.glColor3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3hNV(short red, short green, short blue)
		{
			Functions.glColor3hNVPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3hvNV(short* v)
		{
			Functions.glColor3hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3i(int red, int green, int blue)
		{
			Functions.glColor3iPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3iv(int* v)
		{
			Functions.glColor3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3s(short red, short green, short blue)
		{
			Functions.glColor3sPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3sv(short* v)
		{
			Functions.glColor3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3ub(byte red, byte green, byte blue)
		{
			Functions.glColor3ubPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3ubv(byte* v)
		{
			Functions.glColor3ubvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3ui(uint red, uint green, uint blue)
		{
			Functions.glColor3uiPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3uiv(uint* v)
		{
			Functions.glColor3uivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3us(ushort red, ushort green, ushort blue)
		{
			Functions.glColor3usPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3usv(ushort* v)
		{
			Functions.glColor3usvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3xOES(IntPtr red, IntPtr green, IntPtr blue)
		{
			Functions.glColor3xOESPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor3xvOES(IntPtr* components)
		{
			Functions.glColor3xvOESPtr(components);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
		{
			Functions.glColor4bPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4bv(sbyte* v)
		{
			Functions.glColor4bvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4d(double red, double green, double blue, double alpha)
		{
			Functions.glColor4dPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4dv(double* v)
		{
			Functions.glColor4dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4f(float red, float green, float blue, float alpha)
		{
			Functions.glColor4fPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glColor4fNormal3fVertex3fSUNPtr(r, g, b, a, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v)
		{
			Functions.glColor4fNormal3fVertex3fvSUNPtr(c, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4fv(float* v)
		{
			Functions.glColor4fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4hNV(short red, short green, short blue, short alpha)
		{
			Functions.glColor4hNVPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4hvNV(short* v)
		{
			Functions.glColor4hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4i(int red, int green, int blue, int alpha)
		{
			Functions.glColor4iPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4iv(int* v)
		{
			Functions.glColor4ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4s(short red, short green, short blue, short alpha)
		{
			Functions.glColor4sPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4sv(short* v)
		{
			Functions.glColor4svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
		{
			Functions.glColor4ubPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y)
		{
			Functions.glColor4ubVertex2fSUNPtr(r, g, b, a, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ubVertex2fvSUN(byte* c, float* v)
		{
			Functions.glColor4ubVertex2fvSUNPtr(c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z)
		{
			Functions.glColor4ubVertex3fSUNPtr(r, g, b, a, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ubVertex3fvSUN(byte* c, float* v)
		{
			Functions.glColor4ubVertex3fvSUNPtr(c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ubv(byte* v)
		{
			Functions.glColor4ubvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4ui(uint red, uint green, uint blue, uint alpha)
		{
			Functions.glColor4uiPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4uiv(uint* v)
		{
			Functions.glColor4uivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
		{
			Functions.glColor4usPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4usv(ushort* v)
		{
			Functions.glColor4usvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4x(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glColor4xPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4xOES(IntPtr red, IntPtr green, IntPtr blue, IntPtr alpha)
		{
			Functions.glColor4xOESPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColor4xvOES(IntPtr* components)
		{
			Functions.glColor4xvOESPtr(components);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorFormatNV(int size, int type, int stride)
		{
			Functions.glColorFormatNVPtr(size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorFragmentOp1ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
		{
			Functions.glColorFragmentOp1ATIPtr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorFragmentOp2ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
		{
			Functions.glColorFragmentOp2ATIPtr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorFragmentOp3ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
		{
			Functions.glColorFragmentOp3ATIPtr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMask(bool red, bool green, bool blue, bool alpha)
		{
			Functions.glColorMaskPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a)
		{
			Functions.glColorMaskIndexedEXTPtr(index, r, g, b, a);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMaski(uint index, bool r, bool g, bool b, bool a)
		{
			Functions.glColorMaskiPtr(index, r, g, b, a);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMaskiEXT(uint index, bool r, bool g, bool b, bool a)
		{
			Functions.glColorMaskiEXTPtr(index, r, g, b, a);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMaskiOES(uint index, bool r, bool g, bool b, bool a)
		{
			Functions.glColorMaskiOESPtr(index, r, g, b, a);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorMaterial(int face, int mode)
		{
			Functions.glColorMaterialPtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorP3ui(int type, uint color)
		{
			Functions.glColorP3uiPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorP3uiv(int type, uint* color)
		{
			Functions.glColorP3uivPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorP4ui(int type, uint color)
		{
			Functions.glColorP4uiPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorP4uiv(int type, uint* color)
		{
			Functions.glColorP4uivPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorPointer(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glColorPointerPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
		{
			Functions.glColorPointerEXTPtr(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glColorPointerListIBMPtr(size, type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorPointervINTEL(int size, int type, IntPtr* pointer)
		{
			Functions.glColorPointervINTELPtr(size, type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorSubTable(int target, int start, int count, int format, int type, IntPtr data)
		{
			Functions.glColorSubTablePtr(target, start, count, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorSubTableEXT(int target, int start, int count, int format, int type, IntPtr data)
		{
			Functions.glColorSubTableEXTPtr(target, start, count, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTable(int target, int internalformat, int width, int format, int type, IntPtr table)
		{
			Functions.glColorTablePtr(target, internalformat, width, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, IntPtr table)
		{
			Functions.glColorTableEXTPtr(target, internalFormat, width, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableParameterfv(int target, int pname, float* _params)
		{
			Functions.glColorTableParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableParameterfvSGI(int target, int pname, float* _params)
		{
			Functions.glColorTableParameterfvSGIPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableParameteriv(int target, int pname, int* _params)
		{
			Functions.glColorTableParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableParameterivSGI(int target, int pname, int* _params)
		{
			Functions.glColorTableParameterivSGIPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, IntPtr table)
		{
			Functions.glColorTableSGIPtr(target, internalformat, width, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage)
		{
			Functions.glCombinerInputNVPtr(stage, portion, variable, input, mapping, componentUsage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
		{
			Functions.glCombinerOutputNVPtr(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerParameterfNV(int pname, float param)
		{
			Functions.glCombinerParameterfNVPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerParameterfvNV(int pname, float* _params)
		{
			Functions.glCombinerParameterfvNVPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerParameteriNV(int pname, int param)
		{
			Functions.glCombinerParameteriNVPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerParameterivNV(int pname, int* _params)
		{
			Functions.glCombinerParameterivNVPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCombinerStageParameterfvNV(int stage, int pname, float* _params)
		{
			Functions.glCombinerStageParameterfvNVPtr(stage, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCommandListSegmentsNV(uint list, uint segments)
		{
			Functions.glCommandListSegmentsNVPtr(list, segments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompileCommandListNV(uint list)
		{
			Functions.glCompileCommandListNVPtr(list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompileShader(uint shader)
		{
			Functions.glCompileShaderPtr(shader);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompileShaderARB(uint shaderObj)
		{
			Functions.glCompileShaderARBPtr(shaderObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompileShaderIncludeARB(uint shader, int count, byte** path, int* length)
		{
			Functions.glCompileShaderIncludeARBPtr(shader, count, path, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexImage1DEXTPtr(texunit, target, level, internalformat, width, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexImage2DEXTPtr(texunit, target, level, internalformat, width, height, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexImage3DEXTPtr(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexSubImage1DEXTPtr(texunit, target, level, xoffset, width, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexSubImage2DEXTPtr(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedMultiTexSubImage3DEXTPtr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage1DPtr(target, level, internalformat, width, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage1DARBPtr(target, level, internalformat, width, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage2DARBPtr(target, level, internalformat, width, height, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage3DARBPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexImage3DOESPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage1DPtr(target, level, xoffset, width, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage1DARBPtr(target, level, xoffset, width, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage2DARBPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage3DARBPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTexSubImage3DOESPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureImage1DEXTPtr(texture, target, level, internalformat, width, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureImage2DEXTPtr(texture, target, level, internalformat, width, height, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureImage3DEXTPtr(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTextureSubImage1DPtr(texture, level, xoffset, width, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureSubImage1DEXTPtr(texture, target, level, xoffset, width, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTextureSubImage2DPtr(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureSubImage2DEXTPtr(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
		{
			Functions.glCompressedTextureSubImage3DPtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCompressedTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr bits)
		{
			Functions.glCompressedTextureSubImage3DEXTPtr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConservativeRasterParameterfNV(int pname, float value)
		{
			Functions.glConservativeRasterParameterfNVPtr(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConservativeRasterParameteriNV(int pname, int param)
		{
			Functions.glConservativeRasterParameteriNVPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, IntPtr image)
		{
			Functions.glConvolutionFilter1DPtr(target, internalformat, width, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, IntPtr image)
		{
			Functions.glConvolutionFilter1DEXTPtr(target, internalformat, width, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr image)
		{
			Functions.glConvolutionFilter2DPtr(target, internalformat, width, height, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr image)
		{
			Functions.glConvolutionFilter2DEXTPtr(target, internalformat, width, height, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterf(int target, int pname, float _params)
		{
			Functions.glConvolutionParameterfPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterfEXT(int target, int pname, float _params)
		{
			Functions.glConvolutionParameterfEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterfv(int target, int pname, float* _params)
		{
			Functions.glConvolutionParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glConvolutionParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameteri(int target, int pname, int _params)
		{
			Functions.glConvolutionParameteriPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameteriEXT(int target, int pname, int _params)
		{
			Functions.glConvolutionParameteriEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameteriv(int target, int pname, int* _params)
		{
			Functions.glConvolutionParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glConvolutionParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterxOES(int target, int pname, IntPtr param)
		{
			Functions.glConvolutionParameterxOESPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glConvolutionParameterxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glConvolutionParameterxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyBufferSubData(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size)
		{
			Functions.glCopyBufferSubDataPtr(readTarget, writeTarget, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyBufferSubDataNV(int readTarget, int writeTarget, uint readOffset, uint writeOffset, uint size)
		{
			Functions.glCopyBufferSubDataNVPtr(readTarget, writeTarget, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyColorSubTable(int target, int start, int x, int y, int width)
		{
			Functions.glCopyColorSubTablePtr(target, start, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyColorSubTableEXT(int target, int start, int x, int y, int width)
		{
			Functions.glCopyColorSubTableEXTPtr(target, start, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyColorTable(int target, int internalformat, int x, int y, int width)
		{
			Functions.glCopyColorTablePtr(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyColorTableSGI(int target, int internalformat, int x, int y, int width)
		{
			Functions.glCopyColorTableSGIPtr(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width)
		{
			Functions.glCopyConvolutionFilter1DPtr(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width)
		{
			Functions.glCopyConvolutionFilter1DEXTPtr(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height)
		{
			Functions.glCopyConvolutionFilter2DPtr(target, internalformat, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height)
		{
			Functions.glCopyConvolutionFilter2DEXTPtr(target, internalformat, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyImageSubData(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			Functions.glCopyImageSubDataPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyImageSubDataEXT(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			Functions.glCopyImageSubDataEXTPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyImageSubDataNV(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
		{
			Functions.glCopyImageSubDataNVPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyImageSubDataOES(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			Functions.glCopyImageSubDataOESPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border)
		{
			Functions.glCopyMultiTexImage1DEXTPtr(texunit, target, level, internalformat, x, y, width, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border)
		{
			Functions.glCopyMultiTexImage2DEXTPtr(texunit, target, level, internalformat, x, y, width, height, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width)
		{
			Functions.glCopyMultiTexSubImage1DEXTPtr(texunit, target, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			Functions.glCopyMultiTexSubImage2DEXTPtr(texunit, target, level, xoffset, yoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyMultiTexSubImage3DEXTPtr(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size)
		{
			Functions.glCopyNamedBufferSubDataPtr(readBuffer, writeBuffer, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyPathNV(uint resultPath, uint srcPath)
		{
			Functions.glCopyPathNVPtr(resultPath, srcPath);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyPixels(int x, int y, int width, int height, int type)
		{
			Functions.glCopyPixelsPtr(x, y, width, height, type);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border)
		{
			Functions.glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border)
		{
			Functions.glCopyTexImage1DEXTPtr(target, level, internalformat, x, y, width, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border)
		{
			Functions.glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border)
		{
			Functions.glCopyTexImage2DEXTPtr(target, level, internalformat, x, y, width, height, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width)
		{
			Functions.glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width)
		{
			Functions.glCopyTexSubImage1DEXTPtr(target, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTexSubImage2DEXTPtr(target, level, xoffset, yoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTexSubImage3DEXTPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTexSubImage3DOESPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureImage1DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int border)
		{
			Functions.glCopyTextureImage1DEXTPtr(texture, target, level, internalformat, x, y, width, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureImage2DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int height, int border)
		{
			Functions.glCopyTextureImage2DEXTPtr(texture, target, level, internalformat, x, y, width, height, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
		{
			Functions.glCopyTextureLevelsAPPLEPtr(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
		{
			Functions.glCopyTextureSubImage1DPtr(texture, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int x, int y, int width)
		{
			Functions.glCopyTextureSubImage1DEXTPtr(texture, target, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTextureSubImage2DPtr(texture, level, xoffset, yoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTextureSubImage2DEXTPtr(texture, target, level, xoffset, yoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTextureSubImage3DPtr(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCopyTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			Functions.glCopyTextureSubImage3DEXTPtr(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues)
		{
			Functions.glCoverFillPathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverFillPathNV(uint path, int coverMode)
		{
			Functions.glCoverFillPathNVPtr(path, coverMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues)
		{
			Functions.glCoverStrokePathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverStrokePathNV(uint path, int coverMode)
		{
			Functions.glCoverStrokePathNVPtr(path, coverMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverageMaskNV(bool mask)
		{
			Functions.glCoverageMaskNVPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverageModulationNV(int components)
		{
			Functions.glCoverageModulationNVPtr(components);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverageModulationTableNV(int n, float* v)
		{
			Functions.glCoverageModulationTableNVPtr(n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCoverageOperationNV(int operation)
		{
			Functions.glCoverageOperationNVPtr(operation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateBuffers(int n, uint* buffers)
		{
			Functions.glCreateBuffersPtr(n, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateCommandListsNV(int n, uint* lists)
		{
			Functions.glCreateCommandListsNVPtr(n, lists);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateFramebuffers(int n, uint* framebuffers)
		{
			Functions.glCreateFramebuffersPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateMemoryObjectsEXT(int n, uint* memoryObjects)
		{
			Functions.glCreateMemoryObjectsEXTPtr(n, memoryObjects);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle)
		{
			Functions.glCreatePerfQueryINTELPtr(queryId, queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateProgram()
		{
			return Functions.glCreateProgramPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateProgramObjectARB()
		{
			return Functions.glCreateProgramObjectARBPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateProgramPipelines(int n, uint* pipelines)
		{
			Functions.glCreateProgramPipelinesPtr(n, pipelines);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateQueries(int target, int n, uint* ids)
		{
			Functions.glCreateQueriesPtr(target, n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateRenderbuffers(int n, uint* renderbuffers)
		{
			Functions.glCreateRenderbuffersPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateSamplers(int n, uint* samplers)
		{
			Functions.glCreateSamplersPtr(n, samplers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateShader(int type)
		{
			return Functions.glCreateShaderPtr(type);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateShaderObjectARB(int shaderType)
		{
			return Functions.glCreateShaderObjectARBPtr(shaderType);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateShaderProgramEXT(int type, byte* _string)
		{
			return Functions.glCreateShaderProgramEXTPtr(type, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateShaderProgramv(int type, int count, byte** strings)
		{
			return Functions.glCreateShaderProgramvPtr(type, count, strings);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glCreateShaderProgramvEXT(int type, int count, byte** strings)
		{
			return Functions.glCreateShaderProgramvEXTPtr(type, count, strings);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateStatesNV(int n, uint* states)
		{
			Functions.glCreateStatesNVPtr(n, states);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glCreateSyncFromCLeventARB(IntPtr context, IntPtr _event, uint flags)
		{
			return Functions.glCreateSyncFromCLeventARBPtr(context, _event, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateTextures(int target, int n, uint* textures)
		{
			Functions.glCreateTexturesPtr(target, n, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateTransformFeedbacks(int n, uint* ids)
		{
			Functions.glCreateTransformFeedbacksPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCreateVertexArrays(int n, uint* arrays)
		{
			Functions.glCreateVertexArraysPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCullFace(int mode)
		{
			Functions.glCullFacePtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCullParameterdvEXT(int pname, double* _params)
		{
			Functions.glCullParameterdvEXTPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCullParameterfvEXT(int pname, float* _params)
		{
			Functions.glCullParameterfvEXTPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCurrentPaletteMatrixARB(int index)
		{
			Functions.glCurrentPaletteMatrixARBPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glCurrentPaletteMatrixOES(uint matrixpaletteindex)
		{
			Functions.glCurrentPaletteMatrixOESPtr(matrixpaletteindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageCallback(IntPtr callback, IntPtr userParam)
		{
			Functions.glDebugMessageCallbackPtr(callback, userParam);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageCallbackAMD(IntPtr callback, IntPtr userParam)
		{
			Functions.glDebugMessageCallbackAMDPtr(callback, userParam);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageCallbackARB(IntPtr callback, IntPtr userParam)
		{
			Functions.glDebugMessageCallbackARBPtr(callback, userParam);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageCallbackKHR(IntPtr callback, IntPtr userParam)
		{
			Functions.glDebugMessageCallbackKHRPtr(callback, userParam);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageControl(int source, int type, int severity, int count, uint* ids, bool enabled)
		{
			Functions.glDebugMessageControlPtr(source, type, severity, count, ids, enabled);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageControlARB(int source, int type, int severity, int count, uint* ids, bool enabled)
		{
			Functions.glDebugMessageControlARBPtr(source, type, severity, count, ids, enabled);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageControlKHR(int source, int type, int severity, int count, uint* ids, bool enabled)
		{
			Functions.glDebugMessageControlKHRPtr(source, type, severity, count, ids, enabled);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageEnableAMD(int category, int severity, int count, uint* ids, bool enabled)
		{
			Functions.glDebugMessageEnableAMDPtr(category, severity, count, ids, enabled);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageInsert(int source, int type, uint id, int severity, int length, byte* buf)
		{
			Functions.glDebugMessageInsertPtr(source, type, id, severity, length, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageInsertAMD(int category, int severity, uint id, int length, byte* buf)
		{
			Functions.glDebugMessageInsertAMDPtr(category, severity, id, length, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageInsertARB(int source, int type, uint id, int severity, int length, byte* buf)
		{
			Functions.glDebugMessageInsertARBPtr(source, type, id, severity, length, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDebugMessageInsertKHR(int source, int type, uint id, int severity, int length, byte* buf)
		{
			Functions.glDebugMessageInsertKHRPtr(source, type, id, severity, length, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeformSGIX(uint mask)
		{
			Functions.glDeformSGIXPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
		{
			Functions.glDeformationMap3dSGIXPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
		{
			Functions.glDeformationMap3fSGIXPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteAsyncMarkersSGIX(uint marker, int range)
		{
			Functions.glDeleteAsyncMarkersSGIXPtr(marker, range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteBuffers(int n, uint* buffers)
		{
			Functions.glDeleteBuffersPtr(n, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteBuffersARB(int n, uint* buffers)
		{
			Functions.glDeleteBuffersARBPtr(n, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteCommandListsNV(int n, uint* lists)
		{
			Functions.glDeleteCommandListsNVPtr(n, lists);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFencesAPPLE(int n, uint* fences)
		{
			Functions.glDeleteFencesAPPLEPtr(n, fences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFencesNV(int n, uint* fences)
		{
			Functions.glDeleteFencesNVPtr(n, fences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFragmentShaderATI(uint id)
		{
			Functions.glDeleteFragmentShaderATIPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFramebuffers(int n, uint* framebuffers)
		{
			Functions.glDeleteFramebuffersPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFramebuffersEXT(int n, uint* framebuffers)
		{
			Functions.glDeleteFramebuffersEXTPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteFramebuffersOES(int n, uint* framebuffers)
		{
			Functions.glDeleteFramebuffersOESPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteLists(uint list, int range)
		{
			Functions.glDeleteListsPtr(list, range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects)
		{
			Functions.glDeleteMemoryObjectsEXTPtr(n, memoryObjects);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteNamedStringARB(int namelen, byte* name)
		{
			Functions.glDeleteNamedStringARBPtr(namelen, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteNamesAMD(int identifier, uint num, uint* names)
		{
			Functions.glDeleteNamesAMDPtr(identifier, num, names);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteObjectARB(uint obj)
		{
			Functions.glDeleteObjectARBPtr(obj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteOcclusionQueriesNV(int n, uint* ids)
		{
			Functions.glDeleteOcclusionQueriesNVPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeletePathsNV(uint path, int range)
		{
			Functions.glDeletePathsNVPtr(path, range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeletePerfMonitorsAMD(int n, uint* monitors)
		{
			Functions.glDeletePerfMonitorsAMDPtr(n, monitors);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeletePerfQueryINTEL(uint queryHandle)
		{
			Functions.glDeletePerfQueryINTELPtr(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteProgram(uint program)
		{
			Functions.glDeleteProgramPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteProgramPipelines(int n, uint* pipelines)
		{
			Functions.glDeleteProgramPipelinesPtr(n, pipelines);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteProgramPipelinesEXT(int n, uint* pipelines)
		{
			Functions.glDeleteProgramPipelinesEXTPtr(n, pipelines);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteProgramsARB(int n, uint* programs)
		{
			Functions.glDeleteProgramsARBPtr(n, programs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteProgramsNV(int n, uint* programs)
		{
			Functions.glDeleteProgramsNVPtr(n, programs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteQueries(int n, uint* ids)
		{
			Functions.glDeleteQueriesPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteQueriesARB(int n, uint* ids)
		{
			Functions.glDeleteQueriesARBPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteQueriesEXT(int n, uint* ids)
		{
			Functions.glDeleteQueriesEXTPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteQueryResourceTagNV(int n, int* tagIds)
		{
			Functions.glDeleteQueryResourceTagNVPtr(n, tagIds);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteRenderbuffers(int n, uint* renderbuffers)
		{
			Functions.glDeleteRenderbuffersPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteRenderbuffersEXT(int n, uint* renderbuffers)
		{
			Functions.glDeleteRenderbuffersEXTPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteRenderbuffersOES(int n, uint* renderbuffers)
		{
			Functions.glDeleteRenderbuffersOESPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteSamplers(int count, uint* samplers)
		{
			Functions.glDeleteSamplersPtr(count, samplers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteSemaphoresEXT(int n, uint* semaphores)
		{
			Functions.glDeleteSemaphoresEXTPtr(n, semaphores);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteShader(uint shader)
		{
			Functions.glDeleteShaderPtr(shader);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteStatesNV(int n, uint* states)
		{
			Functions.glDeleteStatesNVPtr(n, states);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteSync(IntPtr sync)
		{
			Functions.glDeleteSyncPtr(sync);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteSyncAPPLE(IntPtr sync)
		{
			Functions.glDeleteSyncAPPLEPtr(sync);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteTextures(int n, uint* textures)
		{
			Functions.glDeleteTexturesPtr(n, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteTexturesEXT(int n, uint* textures)
		{
			Functions.glDeleteTexturesEXTPtr(n, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteTransformFeedbacks(int n, uint* ids)
		{
			Functions.glDeleteTransformFeedbacksPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteTransformFeedbacksNV(int n, uint* ids)
		{
			Functions.glDeleteTransformFeedbacksNVPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteVertexArrays(int n, uint* arrays)
		{
			Functions.glDeleteVertexArraysPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteVertexArraysAPPLE(int n, uint* arrays)
		{
			Functions.glDeleteVertexArraysAPPLEPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteVertexArraysOES(int n, uint* arrays)
		{
			Functions.glDeleteVertexArraysOESPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDeleteVertexShaderEXT(uint id)
		{
			Functions.glDeleteVertexShaderEXTPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthBoundsEXT(double zmin, double zmax)
		{
			Functions.glDepthBoundsEXTPtr(zmin, zmax);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthBoundsdNV(double zmin, double zmax)
		{
			Functions.glDepthBoundsdNVPtr(zmin, zmax);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthFunc(int func)
		{
			Functions.glDepthFuncPtr(func);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthMask(bool flag)
		{
			Functions.glDepthMaskPtr(flag);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRange(double n, double f)
		{
			Functions.glDepthRangePtr(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeArrayfvNV(uint first, int count, float* v)
		{
			Functions.glDepthRangeArrayfvNVPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeArrayfvOES(uint first, int count, float* v)
		{
			Functions.glDepthRangeArrayfvOESPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeArrayv(uint first, int count, double* v)
		{
			Functions.glDepthRangeArrayvPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeIndexed(uint index, double n, double f)
		{
			Functions.glDepthRangeIndexedPtr(index, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeIndexedfNV(uint index, float n, float f)
		{
			Functions.glDepthRangeIndexedfNVPtr(index, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangeIndexedfOES(uint index, float n, float f)
		{
			Functions.glDepthRangeIndexedfOESPtr(index, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangedNV(double zNear, double zFar)
		{
			Functions.glDepthRangedNVPtr(zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangef(float n, float f)
		{
			Functions.glDepthRangefPtr(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangefOES(float n, float f)
		{
			Functions.glDepthRangefOESPtr(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangex(IntPtr n, IntPtr f)
		{
			Functions.glDepthRangexPtr(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDepthRangexOES(IntPtr n, IntPtr f)
		{
			Functions.glDepthRangexOESPtr(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDetachObjectARB(uint containerObj, uint attachedObj)
		{
			Functions.glDetachObjectARBPtr(containerObj, attachedObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDetachShader(uint program, uint shader)
		{
			Functions.glDetachShaderPtr(program, shader);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDetailTexFuncSGIS(int target, int n, float* points)
		{
			Functions.glDetailTexFuncSGISPtr(target, n, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisable(int cap)
		{
			Functions.glDisablePtr(cap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableClientState(int array)
		{
			Functions.glDisableClientStatePtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableClientStateIndexedEXT(int array, uint index)
		{
			Functions.glDisableClientStateIndexedEXTPtr(array, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableClientStateiEXT(int array, uint index)
		{
			Functions.glDisableClientStateiEXTPtr(array, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableDriverControlQCOM(uint driverControl)
		{
			Functions.glDisableDriverControlQCOMPtr(driverControl);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableIndexedEXT(int target, uint index)
		{
			Functions.glDisableIndexedEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVariantClientStateEXT(uint id)
		{
			Functions.glDisableVariantClientStateEXTPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexArrayAttrib(uint vaobj, uint index)
		{
			Functions.glDisableVertexArrayAttribPtr(vaobj, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexArrayAttribEXT(uint vaobj, uint index)
		{
			Functions.glDisableVertexArrayAttribEXTPtr(vaobj, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexArrayEXT(uint vaobj, int array)
		{
			Functions.glDisableVertexArrayEXTPtr(vaobj, array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexAttribAPPLE(uint index, int pname)
		{
			Functions.glDisableVertexAttribAPPLEPtr(index, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexAttribArray(uint index)
		{
			Functions.glDisableVertexAttribArrayPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableVertexAttribArrayARB(uint index)
		{
			Functions.glDisableVertexAttribArrayARBPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisablei(int target, uint index)
		{
			Functions.glDisableiPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableiEXT(int target, uint index)
		{
			Functions.glDisableiEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableiNV(int target, uint index)
		{
			Functions.glDisableiNVPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDisableiOES(int target, uint index)
		{
			Functions.glDisableiOESPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDiscardFramebufferEXT(int target, int numAttachments, uint* attachments)
		{
			Functions.glDiscardFramebufferEXTPtr(target, numAttachments, attachments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
		{
			Functions.glDispatchComputePtr(num_groups_x, num_groups_y, num_groups_z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
		{
			Functions.glDispatchComputeGroupSizeARBPtr(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDispatchComputeIndirect(uint indirect)
		{
			Functions.glDispatchComputeIndirectPtr(indirect);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArrays(int mode, int first, int count)
		{
			Functions.glDrawArraysPtr(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysEXT(int mode, int first, int count)
		{
			Functions.glDrawArraysEXTPtr(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysIndirect(int mode, IntPtr indirect)
		{
			Functions.glDrawArraysIndirectPtr(mode, indirect);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstanced(int mode, int first, int count, int instancecount)
		{
			Functions.glDrawArraysInstancedPtr(mode, first, count, instancecount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedANGLE(int mode, int first, int count, int primcount)
		{
			Functions.glDrawArraysInstancedANGLEPtr(mode, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedARB(int mode, int first, int count, int primcount)
		{
			Functions.glDrawArraysInstancedARBPtr(mode, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, uint baseinstance)
		{
			Functions.glDrawArraysInstancedBaseInstancePtr(mode, first, count, instancecount, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedBaseInstanceEXT(int mode, int first, int count, int instancecount, uint baseinstance)
		{
			Functions.glDrawArraysInstancedBaseInstanceEXTPtr(mode, first, count, instancecount, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedEXT(int mode, int start, int count, int primcount)
		{
			Functions.glDrawArraysInstancedEXTPtr(mode, start, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawArraysInstancedNV(int mode, int first, int count, int primcount)
		{
			Functions.glDrawArraysInstancedNVPtr(mode, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffer(int buf)
		{
			Functions.glDrawBufferPtr(buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffers(int n, uint* bufs)
		{
			Functions.glDrawBuffersPtr(n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffersARB(int n, uint* bufs)
		{
			Functions.glDrawBuffersARBPtr(n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffersATI(int n, uint* bufs)
		{
			Functions.glDrawBuffersATIPtr(n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffersEXT(int n, uint* bufs)
		{
			Functions.glDrawBuffersEXTPtr(n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffersIndexedEXT(int n, uint* location, int* indices)
		{
			Functions.glDrawBuffersIndexedEXTPtr(n, location, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawBuffersNV(int n, uint* bufs)
		{
			Functions.glDrawBuffersNVPtr(n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawCommandsAddressNV(int primitiveMode, ulong* indirects, int* sizes, uint count)
		{
			Functions.glDrawCommandsAddressNVPtr(primitiveMode, indirects, sizes, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawCommandsNV(int primitiveMode, uint buffer, uint* indirects, int* sizes, uint count)
		{
			Functions.glDrawCommandsNVPtr(primitiveMode, buffer, indirects, sizes, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count)
		{
			Functions.glDrawCommandsStatesAddressNVPtr(indirects, sizes, states, fbos, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawCommandsStatesNV(uint buffer, uint* indirects, int* sizes, uint* states, uint* fbos, uint count)
		{
			Functions.glDrawCommandsStatesNVPtr(buffer, indirects, sizes, states, fbos, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementArrayAPPLE(int mode, int first, int count)
		{
			Functions.glDrawElementArrayAPPLEPtr(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementArrayATI(int mode, int count)
		{
			Functions.glDrawElementArrayATIPtr(mode, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElements(int mode, int count, int type, void* indices)
		{
			Functions.glDrawElementsPtr(mode, count, type, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsBaseVertex(int mode, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawElementsBaseVertexPtr(mode, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsBaseVertexEXT(int mode, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawElementsBaseVertexEXTPtr(mode, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsBaseVertexOES(int mode, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawElementsBaseVertexOESPtr(mode, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsIndirect(int mode, int type, void* indirect)
		{
			Functions.glDrawElementsIndirectPtr(mode, type, indirect);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstanced(int mode, int count, int type, void* indices, int instancecount)
		{
			Functions.glDrawElementsInstancedPtr(mode, count, type, indices, instancecount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedANGLE(int mode, int count, int type, void* indices, int primcount)
		{
			Functions.glDrawElementsInstancedANGLEPtr(mode, count, type, indices, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedARB(int mode, int count, int type, void* indices, int primcount)
		{
			Functions.glDrawElementsInstancedARBPtr(mode, count, type, indices, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseInstance(int mode, int count, int type, void* indices, int instancecount, uint baseinstance)
		{
			Functions.glDrawElementsInstancedBaseInstancePtr(mode, count, type, indices, instancecount, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseInstanceEXT(int mode, int count, int type, void* indices, int instancecount, uint baseinstance)
		{
			Functions.glDrawElementsInstancedBaseInstanceEXTPtr(mode, count, type, indices, instancecount, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseVertex(int mode, int count, int type, void* indices, int instancecount, int basevertex)
		{
			Functions.glDrawElementsInstancedBaseVertexPtr(mode, count, type, indices, instancecount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, void* indices, int instancecount, int basevertex, uint baseinstance)
		{
			Functions.glDrawElementsInstancedBaseVertexBaseInstancePtr(mode, count, type, indices, instancecount, basevertex, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseVertexBaseInstanceEXT(int mode, int count, int type, void* indices, int instancecount, int basevertex, uint baseinstance)
		{
			Functions.glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr(mode, count, type, indices, instancecount, basevertex, baseinstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseVertexEXT(int mode, int count, int type, void* indices, int instancecount, int basevertex)
		{
			Functions.glDrawElementsInstancedBaseVertexEXTPtr(mode, count, type, indices, instancecount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedBaseVertexOES(int mode, int count, int type, void* indices, int instancecount, int basevertex)
		{
			Functions.glDrawElementsInstancedBaseVertexOESPtr(mode, count, type, indices, instancecount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedEXT(int mode, int count, int type, void* indices, int primcount)
		{
			Functions.glDrawElementsInstancedEXTPtr(mode, count, type, indices, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawElementsInstancedNV(int mode, int count, int type, void* indices, int primcount)
		{
			Functions.glDrawElementsInstancedNVPtr(mode, count, type, indices, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawMeshArraysSUN(int mode, int first, int count, int width)
		{
			Functions.glDrawMeshArraysSUNPtr(mode, first, count, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawMeshTasksNV(uint first, uint count)
		{
			Functions.glDrawMeshTasksNVPtr(first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawMeshTasksIndirectNV(uint indirect)
		{
			Functions.glDrawMeshTasksIndirectNVPtr(indirect);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawPixels(int width, int height, int format, int type, void* pixels)
		{
			Functions.glDrawPixelsPtr(width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int first, int count)
		{
			Functions.glDrawRangeElementArrayAPPLEPtr(mode, start, end, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementArrayATI(int mode, uint start, uint end, int count)
		{
			Functions.glDrawRangeElementArrayATIPtr(mode, start, end, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, void* indices)
		{
			Functions.glDrawRangeElementsPtr(mode, start, end, count, type, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawRangeElementsBaseVertexPtr(mode, start, end, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementsBaseVertexEXT(int mode, uint start, uint end, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawRangeElementsBaseVertexEXTPtr(mode, start, end, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementsBaseVertexOES(int mode, uint start, uint end, int count, int type, void* indices, int basevertex)
		{
			Functions.glDrawRangeElementsBaseVertexOESPtr(mode, start, end, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, void* indices)
		{
			Functions.glDrawRangeElementsEXTPtr(mode, start, end, count, type, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexfOES(float x, float y, float z, float width, float height)
		{
			Functions.glDrawTexfOESPtr(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexfvOES(float* coords)
		{
			Functions.glDrawTexfvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexiOES(int x, int y, int z, int width, int height)
		{
			Functions.glDrawTexiOESPtr(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexivOES(int* coords)
		{
			Functions.glDrawTexivOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexsOES(short x, short y, short z, short width, short height)
		{
			Functions.glDrawTexsOESPtr(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexsvOES(short* coords)
		{
			Functions.glDrawTexsvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			Functions.glDrawTextureNVPtr(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexxOES(IntPtr x, IntPtr y, IntPtr z, IntPtr width, IntPtr height)
		{
			Functions.glDrawTexxOESPtr(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTexxvOES(IntPtr* coords)
		{
			Functions.glDrawTexxvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedback(int mode, uint id)
		{
			Functions.glDrawTransformFeedbackPtr(mode, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackEXT(int mode, uint id)
		{
			Functions.glDrawTransformFeedbackEXTPtr(mode, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackInstanced(int mode, uint id, int instancecount)
		{
			Functions.glDrawTransformFeedbackInstancedPtr(mode, id, instancecount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackInstancedEXT(int mode, uint id, int instancecount)
		{
			Functions.glDrawTransformFeedbackInstancedEXTPtr(mode, id, instancecount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackNV(int mode, uint id)
		{
			Functions.glDrawTransformFeedbackNVPtr(mode, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackStream(int mode, uint id, uint stream)
		{
			Functions.glDrawTransformFeedbackStreamPtr(mode, id, stream);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawTransformFeedbackStreamInstanced(int mode, uint id, uint stream, int instancecount)
		{
			Functions.glDrawTransformFeedbackStreamInstancedPtr(mode, id, stream, instancecount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEGLImageTargetRenderbufferStorageOES(int target, IntPtr image)
		{
			Functions.glEGLImageTargetRenderbufferStorageOESPtr(target, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEGLImageTargetTexStorageEXT(int target, IntPtr image, int* attrib_list)
		{
			Functions.glEGLImageTargetTexStorageEXTPtr(target, image, attrib_list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEGLImageTargetTexture2DOES(int target, IntPtr image)
		{
			Functions.glEGLImageTargetTexture2DOESPtr(target, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEGLImageTargetTextureStorageEXT(uint texture, IntPtr image, int* attrib_list)
		{
			Functions.glEGLImageTargetTextureStorageEXTPtr(texture, image, attrib_list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlag(bool flag)
		{
			Functions.glEdgeFlagPtr(flag);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlagFormatNV(int stride)
		{
			Functions.glEdgeFlagFormatNVPtr(stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlagPointer(int stride, IntPtr pointer)
		{
			Functions.glEdgeFlagPointerPtr(stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlagPointerEXT(int stride, int count, bool* pointer)
		{
			Functions.glEdgeFlagPointerEXTPtr(stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlagPointerListIBM(int stride, bool* pointer, int ptrstride)
		{
			Functions.glEdgeFlagPointerListIBMPtr(stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEdgeFlagv(bool* flag)
		{
			Functions.glEdgeFlagvPtr(flag);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glElementPointerAPPLE(int type, IntPtr pointer)
		{
			Functions.glElementPointerAPPLEPtr(type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glElementPointerATI(int type, IntPtr pointer)
		{
			Functions.glElementPointerATIPtr(type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnable(int cap)
		{
			Functions.glEnablePtr(cap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableClientState(int array)
		{
			Functions.glEnableClientStatePtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableClientStateIndexedEXT(int array, uint index)
		{
			Functions.glEnableClientStateIndexedEXTPtr(array, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableClientStateiEXT(int array, uint index)
		{
			Functions.glEnableClientStateiEXTPtr(array, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableDriverControlQCOM(uint driverControl)
		{
			Functions.glEnableDriverControlQCOMPtr(driverControl);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableIndexedEXT(int target, uint index)
		{
			Functions.glEnableIndexedEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVariantClientStateEXT(uint id)
		{
			Functions.glEnableVariantClientStateEXTPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexArrayAttrib(uint vaobj, uint index)
		{
			Functions.glEnableVertexArrayAttribPtr(vaobj, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexArrayAttribEXT(uint vaobj, uint index)
		{
			Functions.glEnableVertexArrayAttribEXTPtr(vaobj, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexArrayEXT(uint vaobj, int array)
		{
			Functions.glEnableVertexArrayEXTPtr(vaobj, array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexAttribAPPLE(uint index, int pname)
		{
			Functions.glEnableVertexAttribAPPLEPtr(index, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexAttribArray(uint index)
		{
			Functions.glEnableVertexAttribArrayPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableVertexAttribArrayARB(uint index)
		{
			Functions.glEnableVertexAttribArrayARBPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnablei(int target, uint index)
		{
			Functions.glEnableiPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableiEXT(int target, uint index)
		{
			Functions.glEnableiEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableiNV(int target, uint index)
		{
			Functions.glEnableiNVPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnableiOES(int target, uint index)
		{
			Functions.glEnableiOESPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEnd()
		{
			Functions.glEndPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndConditionalRender()
		{
			Functions.glEndConditionalRenderPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndConditionalRenderNV()
		{
			Functions.glEndConditionalRenderNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndConditionalRenderNVX()
		{
			Functions.glEndConditionalRenderNVXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndFragmentShaderATI()
		{
			Functions.glEndFragmentShaderATIPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndList()
		{
			Functions.glEndListPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndOcclusionQueryNV()
		{
			Functions.glEndOcclusionQueryNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndPerfMonitorAMD(uint monitor)
		{
			Functions.glEndPerfMonitorAMDPtr(monitor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndPerfQueryINTEL(uint queryHandle)
		{
			Functions.glEndPerfQueryINTELPtr(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndQuery(int target)
		{
			Functions.glEndQueryPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndQueryARB(int target)
		{
			Functions.glEndQueryARBPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndQueryEXT(int target)
		{
			Functions.glEndQueryEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndQueryIndexed(int target, uint index)
		{
			Functions.glEndQueryIndexedPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndTilingQCOM(uint preserveMask)
		{
			Functions.glEndTilingQCOMPtr(preserveMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndTransformFeedback()
		{
			Functions.glEndTransformFeedbackPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndTransformFeedbackEXT()
		{
			Functions.glEndTransformFeedbackEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndTransformFeedbackNV()
		{
			Functions.glEndTransformFeedbackNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndVertexShaderEXT()
		{
			Functions.glEndVertexShaderEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEndVideoCaptureNV(uint video_capture_slot)
		{
			Functions.glEndVideoCaptureNVPtr(video_capture_slot);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1d(double u)
		{
			Functions.glEvalCoord1dPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1dv(double* u)
		{
			Functions.glEvalCoord1dvPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1f(float u)
		{
			Functions.glEvalCoord1fPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1fv(float* u)
		{
			Functions.glEvalCoord1fvPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1xOES(IntPtr u)
		{
			Functions.glEvalCoord1xOESPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord1xvOES(IntPtr* coords)
		{
			Functions.glEvalCoord1xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2d(double u, double v)
		{
			Functions.glEvalCoord2dPtr(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2dv(double* u)
		{
			Functions.glEvalCoord2dvPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2f(float u, float v)
		{
			Functions.glEvalCoord2fPtr(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2fv(float* u)
		{
			Functions.glEvalCoord2fvPtr(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2xOES(IntPtr u, IntPtr v)
		{
			Functions.glEvalCoord2xOESPtr(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalCoord2xvOES(IntPtr* coords)
		{
			Functions.glEvalCoord2xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalMapsNV(int target, int mode)
		{
			Functions.glEvalMapsNVPtr(target, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalMesh1(int mode, int i1, int i2)
		{
			Functions.glEvalMesh1Ptr(mode, i1, i2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalMesh2(int mode, int i1, int i2, int j1, int j2)
		{
			Functions.glEvalMesh2Ptr(mode, i1, i2, j1, j2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalPoint1(int i)
		{
			Functions.glEvalPoint1Ptr(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvalPoint2(int i, int j)
		{
			Functions.glEvalPoint2Ptr(i, j);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glEvaluateDepthValuesARB()
		{
			Functions.glEvaluateDepthValuesARBPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExecuteProgramNV(int target, uint id, float* _params)
		{
			Functions.glExecuteProgramNVPtr(target, id, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetBufferPointervQCOM(int target, IntPtr* _params)
		{
			Functions.glExtGetBufferPointervQCOMPtr(target, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers)
		{
			Functions.glExtGetBuffersQCOMPtr(buffers, maxBuffers, numBuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers)
		{
			Functions.glExtGetFramebuffersQCOMPtr(framebuffers, maxFramebuffers, numFramebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, byte* source, int* length)
		{
			Functions.glExtGetProgramBinarySourceQCOMPtr(program, shadertype, source, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms)
		{
			Functions.glExtGetProgramsQCOMPtr(programs, maxPrograms, numPrograms);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers)
		{
			Functions.glExtGetRenderbuffersQCOMPtr(renderbuffers, maxRenderbuffers, numRenderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders)
		{
			Functions.glExtGetShadersQCOMPtr(shaders, maxShaders, numShaders);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int* _params)
		{
			Functions.glExtGetTexLevelParameterivQCOMPtr(texture, face, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr texels)
		{
			Functions.glExtGetTexSubImageQCOMPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures)
		{
			Functions.glExtGetTexturesQCOMPtr(textures, maxTextures, numTextures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glExtIsProgramBinaryQCOM(uint program)
		{
			return Functions.glExtIsProgramBinaryQCOMPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param)
		{
			Functions.glExtTexObjectStateOverrideiQCOMPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glExtractComponentEXT(uint res, uint src, uint num)
		{
			Functions.glExtractComponentEXTPtr(res, src, num);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFeedbackBuffer(int size, int type, float* buffer)
		{
			Functions.glFeedbackBufferPtr(size, type, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFeedbackBufferxOES(int n, int type, IntPtr* buffer)
		{
			Functions.glFeedbackBufferxOESPtr(n, type, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glFenceSync(int condition, uint flags)
		{
			return Functions.glFenceSyncPtr(condition, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glFenceSyncAPPLE(int condition, uint flags)
		{
			return Functions.glFenceSyncAPPLEPtr(condition, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage)
		{
			Functions.glFinalCombinerInputNVPtr(variable, input, mapping, componentUsage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinish()
		{
			Functions.glFinishPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glFinishAsyncSGIX(uint* markerp)
		{
			return Functions.glFinishAsyncSGIXPtr(markerp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinishFenceAPPLE(uint fence)
		{
			Functions.glFinishFenceAPPLEPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinishFenceNV(uint fence)
		{
			Functions.glFinishFenceNVPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinishObjectAPPLE(int _object, int name)
		{
			Functions.glFinishObjectAPPLEPtr(_object, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFinishTextureSUNX()
		{
			Functions.glFinishTextureSUNXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlush()
		{
			Functions.glFlushPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushMappedBufferRange(int target, uint offset, uint length)
		{
			Functions.glFlushMappedBufferRangePtr(target, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushMappedBufferRangeAPPLE(int target, uint offset, uint size)
		{
			Functions.glFlushMappedBufferRangeAPPLEPtr(target, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushMappedBufferRangeEXT(int target, uint offset, uint length)
		{
			Functions.glFlushMappedBufferRangeEXTPtr(target, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushMappedNamedBufferRange(uint buffer, uint offset, uint length)
		{
			Functions.glFlushMappedNamedBufferRangePtr(buffer, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushMappedNamedBufferRangeEXT(uint buffer, uint offset, uint length)
		{
			Functions.glFlushMappedNamedBufferRangeEXTPtr(buffer, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushPixelDataRangeNV(int target)
		{
			Functions.glFlushPixelDataRangeNVPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushRasterSGIX()
		{
			Functions.glFlushRasterSGIXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushStaticDataIBM(int target)
		{
			Functions.glFlushStaticDataIBMPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushVertexArrayRangeAPPLE(int length, IntPtr pointer)
		{
			Functions.glFlushVertexArrayRangeAPPLEPtr(length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFlushVertexArrayRangeNV()
		{
			Functions.glFlushVertexArrayRangeNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordFormatNV(int type, int stride)
		{
			Functions.glFogCoordFormatNVPtr(type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordPointer(int type, int stride, IntPtr pointer)
		{
			Functions.glFogCoordPointerPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordPointerEXT(int type, int stride, IntPtr pointer)
		{
			Functions.glFogCoordPointerEXTPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glFogCoordPointerListIBMPtr(type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordd(double coord)
		{
			Functions.glFogCoorddPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoorddEXT(double coord)
		{
			Functions.glFogCoorddEXTPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoorddv(double* coord)
		{
			Functions.glFogCoorddvPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoorddvEXT(double* coord)
		{
			Functions.glFogCoorddvEXTPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordf(float coord)
		{
			Functions.glFogCoordfPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordfEXT(float coord)
		{
			Functions.glFogCoordfEXTPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordfv(float* coord)
		{
			Functions.glFogCoordfvPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordfvEXT(float* coord)
		{
			Functions.glFogCoordfvEXTPtr(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordhNV(short fog)
		{
			Functions.glFogCoordhNVPtr(fog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogCoordhvNV(short* fog)
		{
			Functions.glFogCoordhvNVPtr(fog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogFuncSGIS(int n, float* points)
		{
			Functions.glFogFuncSGISPtr(n, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogf(int pname, float param)
		{
			Functions.glFogfPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogfv(int pname, float* _params)
		{
			Functions.glFogfvPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogi(int pname, int param)
		{
			Functions.glFogiPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogiv(int pname, int* _params)
		{
			Functions.glFogivPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogx(int pname, IntPtr param)
		{
			Functions.glFogxPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogxOES(int pname, IntPtr param)
		{
			Functions.glFogxOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogxv(int pname, IntPtr* param)
		{
			Functions.glFogxvPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFogxvOES(int pname, IntPtr* param)
		{
			Functions.glFogxvOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentColorMaterialSGIX(int face, int mode)
		{
			Functions.glFragmentColorMaterialSGIXPtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentCoverageColorNV(uint color)
		{
			Functions.glFragmentCoverageColorNVPtr(color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightModelfSGIX(int pname, float param)
		{
			Functions.glFragmentLightModelfSGIXPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightModelfvSGIX(int pname, float* _params)
		{
			Functions.glFragmentLightModelfvSGIXPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightModeliSGIX(int pname, int param)
		{
			Functions.glFragmentLightModeliSGIXPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightModelivSGIX(int pname, int* _params)
		{
			Functions.glFragmentLightModelivSGIXPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightfSGIX(int light, int pname, float param)
		{
			Functions.glFragmentLightfSGIXPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightfvSGIX(int light, int pname, float* _params)
		{
			Functions.glFragmentLightfvSGIXPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightiSGIX(int light, int pname, int param)
		{
			Functions.glFragmentLightiSGIXPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentLightivSGIX(int light, int pname, int* _params)
		{
			Functions.glFragmentLightivSGIXPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentMaterialfSGIX(int face, int pname, float param)
		{
			Functions.glFragmentMaterialfSGIXPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentMaterialfvSGIX(int face, int pname, float* _params)
		{
			Functions.glFragmentMaterialfvSGIXPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentMaterialiSGIX(int face, int pname, int param)
		{
			Functions.glFragmentMaterialiSGIXPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFragmentMaterialivSGIX(int face, int pname, int* _params)
		{
			Functions.glFragmentMaterialivSGIXPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrameTerminatorGREMEDY()
		{
			Functions.glFrameTerminatorGREMEDYPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrameZoomSGIX(int factor)
		{
			Functions.glFrameZoomSGIXPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferDrawBufferEXT(uint framebuffer, int mode)
		{
			Functions.glFramebufferDrawBufferEXTPtr(framebuffer, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs)
		{
			Functions.glFramebufferDrawBuffersEXTPtr(framebuffer, n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferFetchBarrierEXT()
		{
			Functions.glFramebufferFetchBarrierEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferFetchBarrierQCOM()
		{
			Functions.glFramebufferFetchBarrierQCOMPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures)
		{
			Functions.glFramebufferFoveationConfigQCOMPtr(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
		{
			Functions.glFramebufferFoveationParametersQCOMPtr(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferParameteri(int target, int pname, int param)
		{
			Functions.glFramebufferParameteriPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferPixelLocalStorageSizeEXT(uint target, int size)
		{
			Functions.glFramebufferPixelLocalStorageSizeEXTPtr(target, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferReadBufferEXT(uint framebuffer, int mode)
		{
			Functions.glFramebufferReadBufferEXTPtr(framebuffer, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, uint renderbuffer)
		{
			Functions.glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, uint renderbuffer)
		{
			Functions.glFramebufferRenderbufferEXTPtr(target, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, uint renderbuffer)
		{
			Functions.glFramebufferRenderbufferOESPtr(target, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferSampleLocationsfvARB(int target, uint start, int count, float* v)
		{
			Functions.glFramebufferSampleLocationsfvARBPtr(target, start, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferSampleLocationsfvNV(int target, uint start, int count, float* v)
		{
			Functions.glFramebufferSampleLocationsfvNVPtr(target, start, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferSamplePositionsfvAMD(int target, uint numsamples, uint pixelindex, float* values)
		{
			Functions.glFramebufferSamplePositionsfvAMDPtr(target, numsamples, pixelindex, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture(int target, int attachment, uint texture, int level)
		{
			Functions.glFramebufferTexturePtr(target, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture1D(int target, int attachment, int textarget, uint texture, int level)
		{
			Functions.glFramebufferTexture1DPtr(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture1DEXT(int target, int attachment, int textarget, uint texture, int level)
		{
			Functions.glFramebufferTexture1DEXTPtr(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2D(int target, int attachment, int textarget, uint texture, int level)
		{
			Functions.glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2DEXT(int target, int attachment, int textarget, uint texture, int level)
		{
			Functions.glFramebufferTexture2DEXTPtr(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2DDownsampleIMG(int target, int attachment, int textarget, uint texture, int level, int xscale, int yscale)
		{
			Functions.glFramebufferTexture2DDownsampleIMGPtr(target, attachment, textarget, texture, level, xscale, yscale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, uint texture, int level, int samples)
		{
			Functions.glFramebufferTexture2DMultisampleEXTPtr(target, attachment, textarget, texture, level, samples);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, uint texture, int level, int samples)
		{
			Functions.glFramebufferTexture2DMultisampleIMGPtr(target, attachment, textarget, texture, level, samples);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture2DOES(int target, int attachment, int textarget, uint texture, int level)
		{
			Functions.glFramebufferTexture2DOESPtr(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture3D(int target, int attachment, int textarget, uint texture, int level, int zoffset)
		{
			Functions.glFramebufferTexture3DPtr(target, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture3DEXT(int target, int attachment, int textarget, uint texture, int level, int zoffset)
		{
			Functions.glFramebufferTexture3DEXTPtr(target, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTexture3DOES(int target, int attachment, int textarget, uint texture, int level, int zoffset)
		{
			Functions.glFramebufferTexture3DOESPtr(target, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureARB(int target, int attachment, uint texture, int level)
		{
			Functions.glFramebufferTextureARBPtr(target, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureEXT(int target, int attachment, uint texture, int level)
		{
			Functions.glFramebufferTextureEXTPtr(target, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureFaceARB(int target, int attachment, uint texture, int level, int face)
		{
			Functions.glFramebufferTextureFaceARBPtr(target, attachment, texture, level, face);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureFaceEXT(int target, int attachment, uint texture, int level, int face)
		{
			Functions.glFramebufferTextureFaceEXTPtr(target, attachment, texture, level, face);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer)
		{
			Functions.glFramebufferTextureLayerPtr(target, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureLayerARB(int target, int attachment, uint texture, int level, int layer)
		{
			Functions.glFramebufferTextureLayerARBPtr(target, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureLayerEXT(int target, int attachment, uint texture, int level, int layer)
		{
			Functions.glFramebufferTextureLayerEXTPtr(target, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureLayerDownsampleIMG(int target, int attachment, uint texture, int level, int layer, int xscale, int yscale)
		{
			Functions.glFramebufferTextureLayerDownsampleIMGPtr(target, attachment, texture, level, layer, xscale, yscale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureMultisampleMultiviewOVR(int target, int attachment, uint texture, int level, int samples, int baseViewIndex, int numViews)
		{
			Functions.glFramebufferTextureMultisampleMultiviewOVRPtr(target, attachment, texture, level, samples, baseViewIndex, numViews);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureMultiviewOVR(int target, int attachment, uint texture, int level, int baseViewIndex, int numViews)
		{
			Functions.glFramebufferTextureMultiviewOVRPtr(target, attachment, texture, level, baseViewIndex, numViews);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFramebufferTextureOES(int target, int attachment, uint texture, int level)
		{
			Functions.glFramebufferTextureOESPtr(target, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFreeObjectBufferATI(uint buffer)
		{
			Functions.glFreeObjectBufferATIPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrontFace(int mode)
		{
			Functions.glFrontFacePtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			Functions.glFrustumPtr(left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrustumf(float l, float r, float b, float t, float n, float f)
		{
			Functions.glFrustumfPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrustumfOES(float l, float r, float b, float t, float n, float f)
		{
			Functions.glFrustumfOESPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrustumx(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f)
		{
			Functions.glFrustumxPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glFrustumxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f)
		{
			Functions.glFrustumxOESPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenAsyncMarkersSGIX(int range)
		{
			return Functions.glGenAsyncMarkersSGIXPtr(range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenBuffers(int n, uint* buffers)
		{
			Functions.glGenBuffersPtr(n, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenBuffersARB(int n, uint* buffers)
		{
			Functions.glGenBuffersARBPtr(n, buffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenFencesAPPLE(int n, uint* fences)
		{
			Functions.glGenFencesAPPLEPtr(n, fences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenFencesNV(int n, uint* fences)
		{
			Functions.glGenFencesNVPtr(n, fences);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenFragmentShadersATI(uint range)
		{
			return Functions.glGenFragmentShadersATIPtr(range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenFramebuffers(int n, uint* framebuffers)
		{
			Functions.glGenFramebuffersPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenFramebuffersEXT(int n, uint* framebuffers)
		{
			Functions.glGenFramebuffersEXTPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenFramebuffersOES(int n, uint* framebuffers)
		{
			Functions.glGenFramebuffersOESPtr(n, framebuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenLists(int range)
		{
			return Functions.glGenListsPtr(range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenNamesAMD(int identifier, uint num, uint* names)
		{
			Functions.glGenNamesAMDPtr(identifier, num, names);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenOcclusionQueriesNV(int n, uint* ids)
		{
			Functions.glGenOcclusionQueriesNVPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenPathsNV(int range)
		{
			return Functions.glGenPathsNVPtr(range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenPerfMonitorsAMD(int n, uint* monitors)
		{
			Functions.glGenPerfMonitorsAMDPtr(n, monitors);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenProgramPipelines(int n, uint* pipelines)
		{
			Functions.glGenProgramPipelinesPtr(n, pipelines);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenProgramPipelinesEXT(int n, uint* pipelines)
		{
			Functions.glGenProgramPipelinesEXTPtr(n, pipelines);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenProgramsARB(int n, uint* programs)
		{
			Functions.glGenProgramsARBPtr(n, programs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenProgramsNV(int n, uint* programs)
		{
			Functions.glGenProgramsNVPtr(n, programs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenQueries(int n, uint* ids)
		{
			Functions.glGenQueriesPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenQueriesARB(int n, uint* ids)
		{
			Functions.glGenQueriesARBPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenQueriesEXT(int n, uint* ids)
		{
			Functions.glGenQueriesEXTPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenQueryResourceTagNV(int n, int* tagIds)
		{
			Functions.glGenQueryResourceTagNVPtr(n, tagIds);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenRenderbuffers(int n, uint* renderbuffers)
		{
			Functions.glGenRenderbuffersPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenRenderbuffersEXT(int n, uint* renderbuffers)
		{
			Functions.glGenRenderbuffersEXTPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenRenderbuffersOES(int n, uint* renderbuffers)
		{
			Functions.glGenRenderbuffersOESPtr(n, renderbuffers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenSamplers(int count, uint* samplers)
		{
			Functions.glGenSamplersPtr(count, samplers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenSemaphoresEXT(int n, uint* semaphores)
		{
			Functions.glGenSemaphoresEXTPtr(n, semaphores);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenSymbolsEXT(int datatype, int storagetype, int range, uint components)
		{
			return Functions.glGenSymbolsEXTPtr(datatype, storagetype, range, components);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenTextures(int n, uint* textures)
		{
			Functions.glGenTexturesPtr(n, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenTexturesEXT(int n, uint* textures)
		{
			Functions.glGenTexturesEXTPtr(n, textures);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenTransformFeedbacks(int n, uint* ids)
		{
			Functions.glGenTransformFeedbacksPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenTransformFeedbacksNV(int n, uint* ids)
		{
			Functions.glGenTransformFeedbacksNVPtr(n, ids);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenVertexArrays(int n, uint* arrays)
		{
			Functions.glGenVertexArraysPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenVertexArraysAPPLE(int n, uint* arrays)
		{
			Functions.glGenVertexArraysAPPLEPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenVertexArraysOES(int n, uint* arrays)
		{
			Functions.glGenVertexArraysOESPtr(n, arrays);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGenVertexShadersEXT(uint range)
		{
			return Functions.glGenVertexShadersEXTPtr(range);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateMipmap(int target)
		{
			Functions.glGenerateMipmapPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateMipmapEXT(int target)
		{
			Functions.glGenerateMipmapEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateMipmapOES(int target)
		{
			Functions.glGenerateMipmapOESPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateMultiTexMipmapEXT(int texunit, int target)
		{
			Functions.glGenerateMultiTexMipmapEXTPtr(texunit, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateTextureMipmap(uint texture)
		{
			Functions.glGenerateTextureMipmapPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGenerateTextureMipmapEXT(uint texture, int target)
		{
			Functions.glGenerateTextureMipmapEXTPtr(texture, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int* _params)
		{
			Functions.glGetActiveAtomicCounterBufferivPtr(program, bufferIndex, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetActiveAttribARBPtr(programObj, index, maxLength, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveSubroutineName(uint program, int shadertype, uint index, int bufsize, int* length, byte* name)
		{
			Functions.glGetActiveSubroutineNamePtr(program, shadertype, index, bufsize, length, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveSubroutineUniformName(uint program, int shadertype, uint index, int bufsize, int* length, byte* name)
		{
			Functions.glGetActiveSubroutineUniformNamePtr(program, shadertype, index, bufsize, length, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int* values)
		{
			Functions.glGetActiveSubroutineUniformivPtr(program, shadertype, index, pname, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetActiveUniformARBPtr(programObj, index, maxLength, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName)
		{
			Functions.glGetActiveUniformBlockNamePtr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* _params)
		{
			Functions.glGetActiveUniformBlockivPtr(program, uniformBlockIndex, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, byte* uniformName)
		{
			Functions.glGetActiveUniformNamePtr(program, uniformIndex, bufSize, length, uniformName);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* _params)
		{
			Functions.glGetActiveUniformsivPtr(program, uniformCount, uniformIndices, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetActiveVaryingNVPtr(program, index, bufSize, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetArrayObjectfvATI(int array, int pname, float* _params)
		{
			Functions.glGetArrayObjectfvATIPtr(array, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetArrayObjectivATI(int array, int pname, int* _params)
		{
			Functions.glGetArrayObjectivATIPtr(array, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, int* count, uint* obj)
		{
			Functions.glGetAttachedObjectsARBPtr(containerObj, maxCount, count, obj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders)
		{
			Functions.glGetAttachedShadersPtr(program, maxCount, count, shaders);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetAttribLocation(uint program, byte* name)
		{
			return Functions.glGetAttribLocationPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetAttribLocationARB(uint programObj, byte* name)
		{
			return Functions.glGetAttribLocationARBPtr(programObj, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBooleanIndexedvEXT(int target, uint index, bool* data)
		{
			Functions.glGetBooleanIndexedvEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBooleani_v(int target, uint index, bool* data)
		{
			Functions.glGetBooleani_vPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBooleanv(int pname, bool* data)
		{
			Functions.glGetBooleanvPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferParameteri64v(int target, int pname, long* _params)
		{
			Functions.glGetBufferParameteri64vPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetBufferParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferParameterivARB(int target, int pname, int* _params)
		{
			Functions.glGetBufferParameterivARBPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferParameterui64vNV(int target, int pname, ulong* _params)
		{
			Functions.glGetBufferParameterui64vNVPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferPointerv(int target, int pname, IntPtr* _params)
		{
			Functions.glGetBufferPointervPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferPointervARB(int target, int pname, IntPtr* _params)
		{
			Functions.glGetBufferPointervARBPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferPointervOES(int target, int pname, IntPtr* _params)
		{
			Functions.glGetBufferPointervOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferSubData(int target, uint offset, uint size, IntPtr data)
		{
			Functions.glGetBufferSubDataPtr(target, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetBufferSubDataARB(int target, IntPtr offset, uint size, IntPtr data)
		{
			Functions.glGetBufferSubDataARBPtr(target, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetClipPlane(int plane, double* equation)
		{
			Functions.glGetClipPlanePtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetClipPlanef(int plane, float* equation)
		{
			Functions.glGetClipPlanefPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetClipPlanefOES(int plane, float* equation)
		{
			Functions.glGetClipPlanefOESPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetClipPlanex(int plane, IntPtr* equation)
		{
			Functions.glGetClipPlanexPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetClipPlanexOES(int plane, IntPtr* equation)
		{
			Functions.glGetClipPlanexOESPtr(plane, equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTable(int target, int format, int type, IntPtr table)
		{
			Functions.glGetColorTablePtr(target, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableEXT(int target, int format, int type, IntPtr data)
		{
			Functions.glGetColorTableEXTPtr(target, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameterfv(int target, int pname, float* _params)
		{
			Functions.glGetColorTableParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glGetColorTableParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameterfvSGI(int target, int pname, float* _params)
		{
			Functions.glGetColorTableParameterfvSGIPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetColorTableParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetColorTableParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableParameterivSGI(int target, int pname, int* _params)
		{
			Functions.glGetColorTableParameterivSGIPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetColorTableSGI(int target, int format, int type, IntPtr table)
		{
			Functions.glGetColorTableSGIPtr(target, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float* _params)
		{
			Functions.glGetCombinerInputParameterfvNVPtr(stage, portion, variable, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int* _params)
		{
			Functions.glGetCombinerInputParameterivNVPtr(stage, portion, variable, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float* _params)
		{
			Functions.glGetCombinerOutputParameterfvNVPtr(stage, portion, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int* _params)
		{
			Functions.glGetCombinerOutputParameterivNVPtr(stage, portion, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCombinerStageParameterfvNV(int stage, int pname, float* _params)
		{
			Functions.glGetCombinerStageParameterfvNVPtr(stage, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetCommandHeaderNV(int tokenID, uint size)
		{
			return Functions.glGetCommandHeaderNVPtr(tokenID, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedMultiTexImageEXT(int texunit, int target, int lod, IntPtr img)
		{
			Functions.glGetCompressedMultiTexImageEXTPtr(texunit, target, lod, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedTexImage(int target, int level, IntPtr img)
		{
			Functions.glGetCompressedTexImagePtr(target, level, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedTexImageARB(int target, int level, IntPtr img)
		{
			Functions.glGetCompressedTexImageARBPtr(target, level, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels)
		{
			Functions.glGetCompressedTextureImagePtr(texture, level, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedTextureImageEXT(uint texture, int target, int lod, IntPtr img)
		{
			Functions.glGetCompressedTextureImageEXTPtr(texture, target, lod, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
		{
			Functions.glGetCompressedTextureSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionFilter(int target, int format, int type, IntPtr image)
		{
			Functions.glGetConvolutionFilterPtr(target, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionFilterEXT(int target, int format, int type, IntPtr image)
		{
			Functions.glGetConvolutionFilterEXTPtr(target, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionParameterfv(int target, int pname, float* _params)
		{
			Functions.glGetConvolutionParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glGetConvolutionParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetConvolutionParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetConvolutionParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetConvolutionParameterxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glGetConvolutionParameterxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetCoverageModulationTableNV(int bufsize, float* v)
		{
			Functions.glGetCoverageModulationTableNVPtr(bufsize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, byte* messageLog)
		{
			return Functions.glGetDebugMessageLogPtr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetDebugMessageLogAMD(uint count, int bufsize, int* categories, uint* severities, uint* ids, int* lengths, byte* message)
		{
			return Functions.glGetDebugMessageLogAMDPtr(count, bufsize, categories, severities, ids, lengths, message);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetDebugMessageLogARB(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, byte* messageLog)
		{
			return Functions.glGetDebugMessageLogARBPtr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetDebugMessageLogKHR(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, byte* messageLog)
		{
			return Functions.glGetDebugMessageLogKHRPtr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDetailTexFuncSGIS(int target, float* points)
		{
			Functions.glGetDetailTexFuncSGISPtr(target, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDoubleIndexedvEXT(int target, uint index, double* data)
		{
			Functions.glGetDoubleIndexedvEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDoublei_v(int target, uint index, double* data)
		{
			Functions.glGetDoublei_vPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDoublei_vEXT(int pname, uint index, double* _params)
		{
			Functions.glGetDoublei_vEXTPtr(pname, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDoublev(int pname, double* data)
		{
			Functions.glGetDoublevPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, byte* driverControlString)
		{
			Functions.glGetDriverControlStringQCOMPtr(driverControl, bufSize, length, driverControlString);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetDriverControlsQCOM(int* num, int size, uint* driverControls)
		{
			Functions.glGetDriverControlsQCOMPtr(num, size, driverControls);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetError()
		{
			return Functions.glGetErrorPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFenceivNV(uint fence, int pname, int* _params)
		{
			Functions.glGetFenceivNVPtr(fence, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFinalCombinerInputParameterfvNV(int variable, int pname, float* _params)
		{
			Functions.glGetFinalCombinerInputParameterfvNVPtr(variable, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFinalCombinerInputParameterivNV(int variable, int pname, int* _params)
		{
			Functions.glGetFinalCombinerInputParameterivNVPtr(variable, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFirstPerfQueryIdINTEL(uint* queryId)
		{
			Functions.glGetFirstPerfQueryIdINTELPtr(queryId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFixedv(int pname, IntPtr* _params)
		{
			Functions.glGetFixedvPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFixedvOES(int pname, IntPtr* _params)
		{
			Functions.glGetFixedvOESPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloatIndexedvEXT(int target, uint index, float* data)
		{
			Functions.glGetFloatIndexedvEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloati_v(int target, uint index, float* data)
		{
			Functions.glGetFloati_vPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloati_vEXT(int pname, uint index, float* _params)
		{
			Functions.glGetFloati_vEXTPtr(pname, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloati_vNV(int target, uint index, float* data)
		{
			Functions.glGetFloati_vNVPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloati_vOES(int target, uint index, float* data)
		{
			Functions.glGetFloati_vOESPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFloatv(int pname, float* data)
		{
			Functions.glGetFloatvPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFogFuncSGIS(float* points)
		{
			Functions.glGetFogFuncSGISPtr(points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetFragDataIndex(uint program, byte* name)
		{
			return Functions.glGetFragDataIndexPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetFragDataIndexEXT(uint program, byte* name)
		{
			return Functions.glGetFragDataIndexEXTPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetFragDataLocation(uint program, byte* name)
		{
			return Functions.glGetFragDataLocationPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetFragDataLocationEXT(uint program, byte* name)
		{
			return Functions.glGetFragDataLocationEXTPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFragmentLightfvSGIX(int light, int pname, float* _params)
		{
			Functions.glGetFragmentLightfvSGIXPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFragmentLightivSGIX(int light, int pname, int* _params)
		{
			Functions.glGetFragmentLightivSGIXPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFragmentMaterialfvSGIX(int face, int pname, float* _params)
		{
			Functions.glGetFragmentMaterialfvSGIXPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFragmentMaterialivSGIX(int face, int pname, int* _params)
		{
			Functions.glGetFragmentMaterialivSGIXPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* _params)
		{
			Functions.glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, int* _params)
		{
			Functions.glGetFramebufferAttachmentParameterivEXTPtr(target, attachment, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int* _params)
		{
			Functions.glGetFramebufferAttachmentParameterivOESPtr(target, attachment, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferParameterfvAMD(int target, int pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			Functions.glGetFramebufferParameterfvAMDPtr(target, pname, numsamples, pixelindex, size, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetFramebufferParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetFramebufferParameterivEXT(uint framebuffer, int pname, int* _params)
		{
			Functions.glGetFramebufferParameterivEXTPtr(framebuffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetFramebufferPixelLocalStorageSizeEXT(uint target)
		{
			return Functions.glGetFramebufferPixelLocalStorageSizeEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetGraphicsResetStatus()
		{
			return Functions.glGetGraphicsResetStatusPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetGraphicsResetStatusARB()
		{
			return Functions.glGetGraphicsResetStatusARBPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetGraphicsResetStatusEXT()
		{
			return Functions.glGetGraphicsResetStatusEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetGraphicsResetStatusKHR()
		{
			return Functions.glGetGraphicsResetStatusKHRPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetHandleARB(int pname)
		{
			return Functions.glGetHandleARBPtr(pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogram(int target, bool reset, int format, int type, IntPtr values)
		{
			Functions.glGetHistogramPtr(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramEXT(int target, bool reset, int format, int type, IntPtr values)
		{
			Functions.glGetHistogramEXTPtr(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramParameterfv(int target, int pname, float* _params)
		{
			Functions.glGetHistogramParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glGetHistogramParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetHistogramParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetHistogramParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetHistogramParameterxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glGetHistogramParameterxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetImageHandleARB(uint texture, int level, bool layered, int layer, int format)
		{
			return Functions.glGetImageHandleARBPtr(texture, level, layered, layer, format);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetImageHandleNV(uint texture, int level, bool layered, int layer, int format)
		{
			return Functions.glGetImageHandleNVPtr(texture, level, layered, layer, format);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetImageTransformParameterfvHP(int target, int pname, float* _params)
		{
			Functions.glGetImageTransformParameterfvHPPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetImageTransformParameterivHP(int target, int pname, int* _params)
		{
			Functions.glGetImageTransformParameterivHPPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInfoLogARB(uint obj, int maxLength, int* length, byte* infoLog)
		{
			Functions.glGetInfoLogARBPtr(obj, maxLength, length, infoLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetInstrumentsSGIX()
		{
			return Functions.glGetInstrumentsSGIXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInteger64i_v(int target, uint index, long* data)
		{
			Functions.glGetInteger64i_vPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInteger64v(int pname, long* data)
		{
			Functions.glGetInteger64vPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInteger64vAPPLE(int pname, long* _params)
		{
			Functions.glGetInteger64vAPPLEPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegerIndexedvEXT(int target, uint index, int* data)
		{
			Functions.glGetIntegerIndexedvEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegeri_v(int target, uint index, int* data)
		{
			Functions.glGetIntegeri_vPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegeri_vEXT(int target, uint index, int* data)
		{
			Functions.glGetIntegeri_vEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegerui64i_vNV(int value, uint index, ulong* result)
		{
			Functions.glGetIntegerui64i_vNVPtr(value, index, result);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegerui64vNV(int value, ulong* result)
		{
			Functions.glGetIntegerui64vNVPtr(value, result);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetIntegerv(int pname, int* data)
		{
			Functions.glGetIntegervPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int bufSize, int* _params)
		{
			Functions.glGetInternalformatSampleivNVPtr(target, internalformat, samples, pname, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long* _params)
		{
			Functions.glGetInternalformati64vPtr(target, internalformat, pname, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int* _params)
		{
			Functions.glGetInternalformativPtr(target, internalformat, pname, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInvariantBooleanvEXT(uint id, int value, bool* data)
		{
			Functions.glGetInvariantBooleanvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInvariantFloatvEXT(uint id, int value, float* data)
		{
			Functions.glGetInvariantFloatvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetInvariantIntegervEXT(uint id, int value, int* data)
		{
			Functions.glGetInvariantIntegervEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLightfv(int light, int pname, float* _params)
		{
			Functions.glGetLightfvPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLightiv(int light, int pname, int* _params)
		{
			Functions.glGetLightivPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLightxOES(int light, int pname, IntPtr* _params)
		{
			Functions.glGetLightxOESPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLightxv(int light, int pname, IntPtr* _params)
		{
			Functions.glGetLightxvPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLightxvOES(int light, int pname, IntPtr* _params)
		{
			Functions.glGetLightxvOESPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetListParameterfvSGIX(uint list, int pname, float* _params)
		{
			Functions.glGetListParameterfvSGIXPtr(list, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetListParameterivSGIX(uint list, int pname, int* _params)
		{
			Functions.glGetListParameterivSGIXPtr(list, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLocalConstantBooleanvEXT(uint id, int value, bool* data)
		{
			Functions.glGetLocalConstantBooleanvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLocalConstantFloatvEXT(uint id, int value, float* data)
		{
			Functions.glGetLocalConstantFloatvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetLocalConstantIntegervEXT(uint id, int value, int* data)
		{
			Functions.glGetLocalConstantIntegervEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapAttribParameterfvNV(int target, uint index, int pname, float* _params)
		{
			Functions.glGetMapAttribParameterfvNVPtr(target, index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapAttribParameterivNV(int target, uint index, int pname, int* _params)
		{
			Functions.glGetMapAttribParameterivNVPtr(target, index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points)
		{
			Functions.glGetMapControlPointsNVPtr(target, index, type, ustride, vstride, packed, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapParameterfvNV(int target, int pname, float* _params)
		{
			Functions.glGetMapParameterfvNVPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapParameterivNV(int target, int pname, int* _params)
		{
			Functions.glGetMapParameterivNVPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapdv(int target, int query, double* v)
		{
			Functions.glGetMapdvPtr(target, query, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapfv(int target, int query, float* v)
		{
			Functions.glGetMapfvPtr(target, query, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapiv(int target, int query, int* v)
		{
			Functions.glGetMapivPtr(target, query, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMapxvOES(int target, int query, IntPtr* v)
		{
			Functions.glGetMapxvOESPtr(target, query, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMaterialfv(int face, int pname, float* _params)
		{
			Functions.glGetMaterialfvPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMaterialiv(int face, int pname, int* _params)
		{
			Functions.glGetMaterialivPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMaterialxOES(int face, int pname, IntPtr param)
		{
			Functions.glGetMaterialxOESPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMaterialxv(int face, int pname, IntPtr* _params)
		{
			Functions.glGetMaterialxvPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMaterialxvOES(int face, int pname, IntPtr* _params)
		{
			Functions.glGetMaterialxvOESPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, uint* _params)
		{
			Functions.glGetMemoryObjectDetachedResourcesuivNVPtr(memory, pname, first, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params)
		{
			Functions.glGetMemoryObjectParameterivEXTPtr(memoryObject, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmax(int target, bool reset, int format, int type, IntPtr values)
		{
			Functions.glGetMinmaxPtr(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmaxEXT(int target, bool reset, int format, int type, IntPtr values)
		{
			Functions.glGetMinmaxEXTPtr(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmaxParameterfv(int target, int pname, float* _params)
		{
			Functions.glGetMinmaxParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmaxParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glGetMinmaxParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmaxParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetMinmaxParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMinmaxParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetMinmaxParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params)
		{
			Functions.glGetMultiTexEnvfvEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glGetMultiTexEnvivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double* _params)
		{
			Functions.glGetMultiTexGendvEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params)
		{
			Functions.glGetMultiTexGenfvEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int* _params)
		{
			Functions.glGetMultiTexGenivEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, IntPtr pixels)
		{
			Functions.glGetMultiTexImageEXTPtr(texunit, target, level, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float* _params)
		{
			Functions.glGetMultiTexLevelParameterfvEXTPtr(texunit, target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int* _params)
		{
			Functions.glGetMultiTexLevelParameterivEXTPtr(texunit, target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glGetMultiTexParameterIivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params)
		{
			Functions.glGetMultiTexParameterIuivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params)
		{
			Functions.glGetMultiTexParameterfvEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glGetMultiTexParameterivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultisamplefv(int pname, uint index, float* val)
		{
			Functions.glGetMultisamplefvPtr(pname, index, val);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetMultisamplefvNV(int pname, uint index, float* val)
		{
			Functions.glGetMultisamplefvNVPtr(pname, index, val);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferParameteri64v(uint buffer, int pname, long* _params)
		{
			Functions.glGetNamedBufferParameteri64vPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferParameteriv(uint buffer, int pname, int* _params)
		{
			Functions.glGetNamedBufferParameterivPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferParameterivEXT(uint buffer, int pname, int* _params)
		{
			Functions.glGetNamedBufferParameterivEXTPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferParameterui64vNV(uint buffer, int pname, ulong* _params)
		{
			Functions.glGetNamedBufferParameterui64vNVPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferPointerv(uint buffer, int pname, IntPtr* _params)
		{
			Functions.glGetNamedBufferPointervPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferPointervEXT(uint buffer, int pname, IntPtr* _params)
		{
			Functions.glGetNamedBufferPointervEXTPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glGetNamedBufferSubDataPtr(buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glGetNamedBufferSubDataEXTPtr(buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			Functions.glGetNamedFramebufferParameterfvAMDPtr(framebuffer, pname, numsamples, pixelindex, size, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int* _params)
		{
			Functions.glGetNamedFramebufferAttachmentParameterivPtr(framebuffer, attachment, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, int attachment, int pname, int* _params)
		{
			Functions.glGetNamedFramebufferAttachmentParameterivEXTPtr(framebuffer, attachment, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedFramebufferParameteriv(uint framebuffer, int pname, int* param)
		{
			Functions.glGetNamedFramebufferParameterivPtr(framebuffer, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedFramebufferParameterivEXT(uint framebuffer, int pname, int* _params)
		{
			Functions.glGetNamedFramebufferParameterivEXTPtr(framebuffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramLocalParameterIivEXT(uint program, int target, uint index, int* _params)
		{
			Functions.glGetNamedProgramLocalParameterIivEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramLocalParameterIuivEXT(uint program, int target, uint index, uint* _params)
		{
			Functions.glGetNamedProgramLocalParameterIuivEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramLocalParameterdvEXT(uint program, int target, uint index, double* _params)
		{
			Functions.glGetNamedProgramLocalParameterdvEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramLocalParameterfvEXT(uint program, int target, uint index, float* _params)
		{
			Functions.glGetNamedProgramLocalParameterfvEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramStringEXT(uint program, int target, int pname, IntPtr _string)
		{
			Functions.glGetNamedProgramStringEXTPtr(program, target, pname, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedProgramivEXT(uint program, int target, int pname, int* _params)
		{
			Functions.glGetNamedProgramivEXTPtr(program, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedRenderbufferParameteriv(uint renderbuffer, int pname, int* _params)
		{
			Functions.glGetNamedRenderbufferParameterivPtr(renderbuffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, int pname, int* _params)
		{
			Functions.glGetNamedRenderbufferParameterivEXTPtr(renderbuffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedStringARB(int namelen, byte* name, int bufSize, int* stringlen, byte* _string)
		{
			Functions.glGetNamedStringARBPtr(namelen, name, bufSize, stringlen, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNamedStringivARB(int namelen, byte* name, int pname, int* _params)
		{
			Functions.glGetNamedStringivARBPtr(namelen, name, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId)
		{
			Functions.glGetNextPerfQueryIdINTELPtr(queryId, nextQueryId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectBufferfvATI(uint buffer, int pname, float* _params)
		{
			Functions.glGetObjectBufferfvATIPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectBufferivATI(uint buffer, int pname, int* _params)
		{
			Functions.glGetObjectBufferivATIPtr(buffer, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectLabel(int identifier, uint name, int bufSize, int* length, byte* label)
		{
			Functions.glGetObjectLabelPtr(identifier, name, bufSize, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectLabelEXT(int type, uint _object, int bufSize, int* length, byte* label)
		{
			Functions.glGetObjectLabelEXTPtr(type, _object, bufSize, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectLabelKHR(int identifier, uint name, int bufSize, int* length, byte* label)
		{
			Functions.glGetObjectLabelKHRPtr(identifier, name, bufSize, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectParameterfvARB(uint obj, int pname, float* _params)
		{
			Functions.glGetObjectParameterfvARBPtr(obj, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectParameterivAPPLE(int objectType, uint name, int pname, int* _params)
		{
			Functions.glGetObjectParameterivAPPLEPtr(objectType, name, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectParameterivARB(uint obj, int pname, int* _params)
		{
			Functions.glGetObjectParameterivARBPtr(obj, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectPtrLabel(IntPtr ptr, int bufSize, int* length, byte* label)
		{
			Functions.glGetObjectPtrLabelPtr(ptr, bufSize, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int* length, byte* label)
		{
			Functions.glGetObjectPtrLabelKHRPtr(ptr, bufSize, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetOcclusionQueryivNV(uint id, int pname, int* _params)
		{
			Functions.glGetOcclusionQueryivNVPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetOcclusionQueryuivNV(uint id, int pname, uint* _params)
		{
			Functions.glGetOcclusionQueryuivNVPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathColorGenfvNV(int color, int pname, float* value)
		{
			Functions.glGetPathColorGenfvNVPtr(color, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathColorGenivNV(int color, int pname, int* value)
		{
			Functions.glGetPathColorGenivNVPtr(color, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathCommandsNV(uint path, byte* commands)
		{
			Functions.glGetPathCommandsNVPtr(path, commands);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathCoordsNV(uint path, float* coords)
		{
			Functions.glGetPathCoordsNVPtr(path, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathDashArrayNV(uint path, float* dashArray)
		{
			Functions.glGetPathDashArrayNVPtr(path, dashArray);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static float glGetPathLengthNV(uint path, int startSegment, int numSegments)
		{
			return Functions.glGetPathLengthNVPtr(path, startSegment, numSegments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics)
		{
			Functions.glGetPathMetricRangeNVPtr(metricQueryMask, firstPathName, numPaths, stride, metrics);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, IntPtr paths, uint pathBase, int stride, float* metrics)
		{
			Functions.glGetPathMetricsNVPtr(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathParameterfvNV(uint path, int pname, float* value)
		{
			Functions.glGetPathParameterfvNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathParameterivNV(uint path, int pname, int* value)
		{
			Functions.glGetPathParameterivNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float* returnedSpacing)
		{
			Functions.glGetPathSpacingNVPtr(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathTexGenfvNV(int texCoordSet, int pname, float* value)
		{
			Functions.glGetPathTexGenfvNVPtr(texCoordSet, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPathTexGenivNV(int texCoordSet, int pname, int* value)
		{
			Functions.glGetPathTexGenivNVPtr(texCoordSet, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			Functions.glGetPerfCounterInfoINTELPtr(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint* data, int* bytesWritten)
		{
			Functions.glGetPerfMonitorCounterDataAMDPtr(monitor, pname, dataSize, data, bytesWritten);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, IntPtr data)
		{
			Functions.glGetPerfMonitorCounterInfoAMDPtr(group, counter, pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, byte* counterString)
		{
			Functions.glGetPerfMonitorCounterStringAMDPtr(group, counter, bufSize, length, counterString);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters)
		{
			Functions.glGetPerfMonitorCountersAMDPtr(group, numCounters, maxActiveCounters, counterSize, counters);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, byte* groupString)
		{
			Functions.glGetPerfMonitorGroupStringAMDPtr(group, bufSize, length, groupString);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups)
		{
			Functions.glGetPerfMonitorGroupsAMDPtr(numGroups, groupsSize, groups);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, IntPtr data, uint* bytesWritten)
		{
			Functions.glGetPerfQueryDataINTELPtr(queryHandle, flags, dataSize, data, bytesWritten);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfQueryIdByNameINTEL(byte* queryName, uint* queryId)
		{
			Functions.glGetPerfQueryIdByNameINTELPtr(queryName, queryId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask)
		{
			Functions.glGetPerfQueryInfoINTELPtr(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelMapfv(int map, float* values)
		{
			Functions.glGetPixelMapfvPtr(map, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelMapuiv(int map, uint* values)
		{
			Functions.glGetPixelMapuivPtr(map, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelMapusv(int map, ushort* values)
		{
			Functions.glGetPixelMapusvPtr(map, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelMapxv(int map, int size, IntPtr* values)
		{
			Functions.glGetPixelMapxvPtr(map, size, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelTexGenParameterfvSGIS(int pname, float* _params)
		{
			Functions.glGetPixelTexGenParameterfvSGISPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelTexGenParameterivSGIS(int pname, int* _params)
		{
			Functions.glGetPixelTexGenParameterivSGISPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelTransformParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glGetPixelTransformParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPixelTransformParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetPixelTransformParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPointerIndexedvEXT(int target, uint index, IntPtr* data)
		{
			Functions.glGetPointerIndexedvEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPointeri_vEXT(int pname, uint index, IntPtr* _params)
		{
			Functions.glGetPointeri_vEXTPtr(pname, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPointerv(int pname, IntPtr* _params)
		{
			Functions.glGetPointervPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPointervEXT(int pname, IntPtr* _params)
		{
			Functions.glGetPointervEXTPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPointervKHR(int pname, IntPtr* _params)
		{
			Functions.glGetPointervKHRPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetPolygonStipple(byte* mask)
		{
			Functions.glGetPolygonStipplePtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramBinary(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary)
		{
			Functions.glGetProgramBinaryPtr(program, bufSize, length, binaryFormat, binary);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramBinaryOES(uint program, int bufSize, int* length, int* binaryFormat, IntPtr binary)
		{
			Functions.glGetProgramBinaryOESPtr(program, bufSize, length, binaryFormat, binary);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramEnvParameterIivNV(int target, uint index, int* _params)
		{
			Functions.glGetProgramEnvParameterIivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramEnvParameterIuivNV(int target, uint index, uint* _params)
		{
			Functions.glGetProgramEnvParameterIuivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramEnvParameterdvARB(int target, uint index, double* _params)
		{
			Functions.glGetProgramEnvParameterdvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramEnvParameterfvARB(int target, uint index, float* _params)
		{
			Functions.glGetProgramEnvParameterfvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramInfoLog(uint program, int bufSize, int* length, byte* infoLog)
		{
			Functions.glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramInterfaceiv(uint program, int programInterface, int pname, int* _params)
		{
			Functions.glGetProgramInterfaceivPtr(program, programInterface, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramLocalParameterIivNV(int target, uint index, int* _params)
		{
			Functions.glGetProgramLocalParameterIivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramLocalParameterIuivNV(int target, uint index, uint* _params)
		{
			Functions.glGetProgramLocalParameterIuivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramLocalParameterdvARB(int target, uint index, double* _params)
		{
			Functions.glGetProgramLocalParameterdvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramLocalParameterfvARB(int target, uint index, float* _params)
		{
			Functions.glGetProgramLocalParameterfvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* _params)
		{
			Functions.glGetProgramNamedParameterdvNVPtr(id, len, name, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* _params)
		{
			Functions.glGetProgramNamedParameterfvNVPtr(id, len, name, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramParameterdvNV(int target, uint index, int pname, double* _params)
		{
			Functions.glGetProgramParameterdvNVPtr(target, index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramParameterfvNV(int target, uint index, int pname, float* _params)
		{
			Functions.glGetProgramParameterfvNVPtr(target, index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, byte* infoLog)
		{
			Functions.glGetProgramPipelineInfoLogPtr(pipeline, bufSize, length, infoLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, byte* infoLog)
		{
			Functions.glGetProgramPipelineInfoLogEXTPtr(pipeline, bufSize, length, infoLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramPipelineiv(uint pipeline, int pname, int* _params)
		{
			Functions.glGetProgramPipelineivPtr(pipeline, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramPipelineivEXT(uint pipeline, int pname, int* _params)
		{
			Functions.glGetProgramPipelineivEXTPtr(pipeline, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetProgramResourceIndex(uint program, int programInterface, byte* name)
		{
			return Functions.glGetProgramResourceIndexPtr(program, programInterface, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetProgramResourceLocation(uint program, int programInterface, byte* name)
		{
			return Functions.glGetProgramResourceLocationPtr(program, programInterface, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetProgramResourceLocationIndex(uint program, int programInterface, byte* name)
		{
			return Functions.glGetProgramResourceLocationIndexPtr(program, programInterface, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetProgramResourceLocationIndexEXT(uint program, int programInterface, byte* name)
		{
			return Functions.glGetProgramResourceLocationIndexEXTPtr(program, programInterface, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramResourceName(uint program, int programInterface, uint index, int bufSize, int* length, byte* name)
		{
			Functions.glGetProgramResourceNamePtr(program, programInterface, index, bufSize, length, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, float* _params)
		{
			Functions.glGetProgramResourcefvNVPtr(program, programInterface, index, propCount, props, bufSize, length, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, uint* props, int bufSize, int* length, int* _params)
		{
			Functions.glGetProgramResourceivPtr(program, programInterface, index, propCount, props, bufSize, length, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramStageiv(uint program, int shadertype, int pname, int* values)
		{
			Functions.glGetProgramStageivPtr(program, shadertype, pname, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramStringARB(int target, int pname, IntPtr _string)
		{
			Functions.glGetProgramStringARBPtr(target, pname, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramStringNV(uint id, int pname, byte* program)
		{
			Functions.glGetProgramStringNVPtr(id, pname, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramSubroutineParameteruivNV(int target, uint index, uint* param)
		{
			Functions.glGetProgramSubroutineParameteruivNVPtr(target, index, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramiv(uint program, int pname, int* _params)
		{
			Functions.glGetProgramivPtr(program, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramivARB(int target, int pname, int* _params)
		{
			Functions.glGetProgramivARBPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetProgramivNV(uint id, int pname, int* _params)
		{
			Functions.glGetProgramivNVPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryBufferObjecti64v(uint id, uint buffer, int pname, uint offset)
		{
			Functions.glGetQueryBufferObjecti64vPtr(id, buffer, pname, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryBufferObjectiv(uint id, uint buffer, int pname, uint offset)
		{
			Functions.glGetQueryBufferObjectivPtr(id, buffer, pname, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryBufferObjectui64v(uint id, uint buffer, int pname, uint offset)
		{
			Functions.glGetQueryBufferObjectui64vPtr(id, buffer, pname, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryBufferObjectuiv(uint id, uint buffer, int pname, uint offset)
		{
			Functions.glGetQueryBufferObjectuivPtr(id, buffer, pname, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryIndexediv(int target, uint index, int pname, int* _params)
		{
			Functions.glGetQueryIndexedivPtr(target, index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjecti64v(uint id, int pname, long* _params)
		{
			Functions.glGetQueryObjecti64vPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjecti64vEXT(uint id, int pname, long* _params)
		{
			Functions.glGetQueryObjecti64vEXTPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectiv(uint id, int pname, int* _params)
		{
			Functions.glGetQueryObjectivPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectivARB(uint id, int pname, int* _params)
		{
			Functions.glGetQueryObjectivARBPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectivEXT(uint id, int pname, int* _params)
		{
			Functions.glGetQueryObjectivEXTPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectui64v(uint id, int pname, ulong* _params)
		{
			Functions.glGetQueryObjectui64vPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectui64vEXT(uint id, int pname, ulong* _params)
		{
			Functions.glGetQueryObjectui64vEXTPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectuiv(uint id, int pname, uint* _params)
		{
			Functions.glGetQueryObjectuivPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectuivARB(uint id, int pname, uint* _params)
		{
			Functions.glGetQueryObjectuivARBPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryObjectuivEXT(uint id, int pname, uint* _params)
		{
			Functions.glGetQueryObjectuivEXTPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryiv(int target, int pname, int* _params)
		{
			Functions.glGetQueryivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryivARB(int target, int pname, int* _params)
		{
			Functions.glGetQueryivARBPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetQueryivEXT(int target, int pname, int* _params)
		{
			Functions.glGetQueryivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetRenderbufferParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetRenderbufferParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetRenderbufferParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glGetRenderbufferParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetRenderbufferParameterivOES(int target, int pname, int* _params)
		{
			Functions.glGetRenderbufferParameterivOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIiv(uint sampler, int pname, int* _params)
		{
			Functions.glGetSamplerParameterIivPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIivEXT(uint sampler, int pname, int* _params)
		{
			Functions.glGetSamplerParameterIivEXTPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIivOES(uint sampler, int pname, int* _params)
		{
			Functions.glGetSamplerParameterIivOESPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIuiv(uint sampler, int pname, uint* _params)
		{
			Functions.glGetSamplerParameterIuivPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIuivEXT(uint sampler, int pname, uint* _params)
		{
			Functions.glGetSamplerParameterIuivEXTPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterIuivOES(uint sampler, int pname, uint* _params)
		{
			Functions.glGetSamplerParameterIuivOESPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameterfv(uint sampler, int pname, float* _params)
		{
			Functions.glGetSamplerParameterfvPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSamplerParameteriv(uint sampler, int pname, int* _params)
		{
			Functions.glGetSamplerParameterivPtr(sampler, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params)
		{
			Functions.glGetSemaphoreParameterui64vEXTPtr(semaphore, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSeparableFilter(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)
		{
			Functions.glGetSeparableFilterPtr(target, format, type, row, column, span);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSeparableFilterEXT(int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)
		{
			Functions.glGetSeparableFilterEXTPtr(target, format, type, row, column, span);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShaderInfoLog(uint shader, int bufSize, int* length, byte* infoLog)
		{
			Functions.glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, int* precision)
		{
			Functions.glGetShaderPrecisionFormatPtr(shadertype, precisiontype, range, precision);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShaderSource(uint shader, int bufSize, int* length, byte* source)
		{
			Functions.glGetShaderSourcePtr(shader, bufSize, length, source);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShaderSourceARB(uint obj, int maxLength, int* length, byte* source)
		{
			Functions.glGetShaderSourceARBPtr(obj, maxLength, length, source);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShaderiv(uint shader, int pname, int* _params)
		{
			Functions.glGetShaderivPtr(shader, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShadingRateImagePaletteNV(uint viewport, uint entry, int* rate)
		{
			Functions.glGetShadingRateImagePaletteNVPtr(viewport, entry, rate);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetShadingRateSampleLocationivNV(int rate, uint samples, uint index, int* location)
		{
			Functions.glGetShadingRateSampleLocationivNVPtr(rate, samples, index, location);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSharpenTexFuncSGIS(int target, float* points)
		{
			Functions.glGetSharpenTexFuncSGISPtr(target, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ushort glGetStageIndexNV(int shadertype)
		{
			return Functions.glGetStageIndexNVPtr(shadertype);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glGetString(int name)
		{
			return Functions.glGetStringPtr(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glGetStringi(int name, uint index)
		{
			return Functions.glGetStringiPtr(name, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetSubroutineIndex(uint program, int shadertype, byte* name)
		{
			return Functions.glGetSubroutineIndexPtr(program, shadertype, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetSubroutineUniformLocation(uint program, int shadertype, byte* name)
		{
			return Functions.glGetSubroutineUniformLocationPtr(program, shadertype, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSynciv(IntPtr sync, int pname, int bufSize, int* length, int* values)
		{
			Functions.glGetSyncivPtr(sync, pname, bufSize, length, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, int* length, int* values)
		{
			Functions.glGetSyncivAPPLEPtr(sync, pname, bufSize, length, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexBumpParameterfvATI(int pname, float* param)
		{
			Functions.glGetTexBumpParameterfvATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexBumpParameterivATI(int pname, int* param)
		{
			Functions.glGetTexBumpParameterivATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexEnvfv(int target, int pname, float* _params)
		{
			Functions.glGetTexEnvfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexEnviv(int target, int pname, int* _params)
		{
			Functions.glGetTexEnvivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexEnvxv(int target, int pname, IntPtr* _params)
		{
			Functions.glGetTexEnvxvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexEnvxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glGetTexEnvxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexFilterFuncSGIS(int target, int filter, float* weights)
		{
			Functions.glGetTexFilterFuncSGISPtr(target, filter, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGendv(int coord, int pname, double* _params)
		{
			Functions.glGetTexGendvPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGenfv(int coord, int pname, float* _params)
		{
			Functions.glGetTexGenfvPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGenfvOES(int coord, int pname, float* _params)
		{
			Functions.glGetTexGenfvOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGeniv(int coord, int pname, int* _params)
		{
			Functions.glGetTexGenivPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGenivOES(int coord, int pname, int* _params)
		{
			Functions.glGetTexGenivOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexGenxvOES(int coord, int pname, IntPtr* _params)
		{
			Functions.glGetTexGenxvOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexImage(int target, int level, int format, int type, IntPtr pixels)
		{
			Functions.glGetTexImagePtr(target, level, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexLevelParameterfv(int target, int level, int pname, float* _params)
		{
			Functions.glGetTexLevelParameterfvPtr(target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexLevelParameteriv(int target, int level, int pname, int* _params)
		{
			Functions.glGetTexLevelParameterivPtr(target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexLevelParameterxvOES(int target, int level, int pname, IntPtr* _params)
		{
			Functions.glGetTexLevelParameterxvOESPtr(target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIiv(int target, int pname, int* _params)
		{
			Functions.glGetTexParameterIivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIivEXT(int target, int pname, int* _params)
		{
			Functions.glGetTexParameterIivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIivOES(int target, int pname, int* _params)
		{
			Functions.glGetTexParameterIivOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIuiv(int target, int pname, uint* _params)
		{
			Functions.glGetTexParameterIuivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIuivEXT(int target, int pname, uint* _params)
		{
			Functions.glGetTexParameterIuivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterIuivOES(int target, int pname, uint* _params)
		{
			Functions.glGetTexParameterIuivOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterPointervAPPLE(int target, int pname, IntPtr* _params)
		{
			Functions.glGetTexParameterPointervAPPLEPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterfv(int target, int pname, float* _params)
		{
			Functions.glGetTexParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameteriv(int target, int pname, int* _params)
		{
			Functions.glGetTexParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterxv(int target, int pname, IntPtr* _params)
		{
			Functions.glGetTexParameterxvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTexParameterxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glGetTexParameterxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureHandleARB(uint texture)
		{
			return Functions.glGetTextureHandleARBPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureHandleIMG(uint texture)
		{
			return Functions.glGetTextureHandleIMGPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureHandleNV(uint texture)
		{
			return Functions.glGetTextureHandleNVPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureImage(uint texture, int level, int format, int type, int bufSize, IntPtr pixels)
		{
			Functions.glGetTextureImagePtr(texture, level, format, type, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureImageEXT(uint texture, int target, int level, int format, int type, IntPtr pixels)
		{
			Functions.glGetTextureImageEXTPtr(texture, target, level, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureLevelParameterfv(uint texture, int level, int pname, float* _params)
		{
			Functions.glGetTextureLevelParameterfvPtr(texture, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureLevelParameterfvEXT(uint texture, int target, int level, int pname, float* _params)
		{
			Functions.glGetTextureLevelParameterfvEXTPtr(texture, target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureLevelParameteriv(uint texture, int level, int pname, int* _params)
		{
			Functions.glGetTextureLevelParameterivPtr(texture, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureLevelParameterivEXT(uint texture, int target, int level, int pname, int* _params)
		{
			Functions.glGetTextureLevelParameterivEXTPtr(texture, target, level, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterIiv(uint texture, int pname, int* _params)
		{
			Functions.glGetTextureParameterIivPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterIivEXT(uint texture, int target, int pname, int* _params)
		{
			Functions.glGetTextureParameterIivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterIuiv(uint texture, int pname, uint* _params)
		{
			Functions.glGetTextureParameterIuivPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params)
		{
			Functions.glGetTextureParameterIuivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterfv(uint texture, int pname, float* _params)
		{
			Functions.glGetTextureParameterfvPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterfvEXT(uint texture, int target, int pname, float* _params)
		{
			Functions.glGetTextureParameterfvEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameteriv(uint texture, int pname, int* _params)
		{
			Functions.glGetTextureParameterivPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureParameterivEXT(uint texture, int target, int pname, int* _params)
		{
			Functions.glGetTextureParameterivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureSamplerHandleARB(uint texture, uint sampler)
		{
			return Functions.glGetTextureSamplerHandleARBPtr(texture, sampler);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler)
		{
			return Functions.glGetTextureSamplerHandleIMGPtr(texture, sampler);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong glGetTextureSamplerHandleNV(uint texture, uint sampler)
		{
			return Functions.glGetTextureSamplerHandleNVPtr(texture, sampler);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, IntPtr pixels)
		{
			Functions.glGetTextureSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTrackMatrixivNV(int target, uint address, int pname, int* _params)
		{
			Functions.glGetTrackMatrixivNVPtr(target, address, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetTransformFeedbackVaryingPtr(program, index, bufSize, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, int* type, byte* name)
		{
			Functions.glGetTransformFeedbackVaryingEXTPtr(program, index, bufSize, length, size, type, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location)
		{
			Functions.glGetTransformFeedbackVaryingNVPtr(program, index, location);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbacki64_v(uint xfb, int pname, uint index, long* param)
		{
			Functions.glGetTransformFeedbacki64_vPtr(xfb, pname, index, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbacki_v(uint xfb, int pname, uint index, int* param)
		{
			Functions.glGetTransformFeedbacki_vPtr(xfb, pname, index, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTransformFeedbackiv(uint xfb, int pname, int* param)
		{
			Functions.glGetTransformFeedbackivPtr(xfb, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetTranslatedShaderSourceANGLE(uint shader, int bufsize, int* length, byte* source)
		{
			Functions.glGetTranslatedShaderSourceANGLEPtr(shader, bufsize, length, source);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetUniformBlockIndex(uint program, byte* uniformBlockName)
		{
			return Functions.glGetUniformBlockIndexPtr(program, uniformBlockName);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetUniformBufferSizeEXT(uint program, int location)
		{
			return Functions.glGetUniformBufferSizeEXTPtr(program, location);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformIndices(uint program, int uniformCount, byte** uniformNames, uint* uniformIndices)
		{
			Functions.glGetUniformIndicesPtr(program, uniformCount, uniformNames, uniformIndices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetUniformLocation(uint program, byte* name)
		{
			return Functions.glGetUniformLocationPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetUniformLocationARB(uint programObj, byte* name)
		{
			return Functions.glGetUniformLocationARBPtr(programObj, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glGetUniformOffsetEXT(uint program, int location)
		{
			return Functions.glGetUniformOffsetEXTPtr(program, location);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformSubroutineuiv(int shadertype, int location, uint* _params)
		{
			Functions.glGetUniformSubroutineuivPtr(shadertype, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformdv(uint program, int location, double* _params)
		{
			Functions.glGetUniformdvPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformfv(uint program, int location, float* _params)
		{
			Functions.glGetUniformfvPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformfvARB(uint programObj, int location, float* _params)
		{
			Functions.glGetUniformfvARBPtr(programObj, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformi64vARB(uint program, int location, long* _params)
		{
			Functions.glGetUniformi64vARBPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformi64vNV(uint program, int location, long* _params)
		{
			Functions.glGetUniformi64vNVPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformiv(uint program, int location, int* _params)
		{
			Functions.glGetUniformivPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformivARB(uint programObj, int location, int* _params)
		{
			Functions.glGetUniformivARBPtr(programObj, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformui64vARB(uint program, int location, ulong* _params)
		{
			Functions.glGetUniformui64vARBPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformui64vNV(uint program, int location, ulong* _params)
		{
			Functions.glGetUniformui64vNVPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformuiv(uint program, int location, uint* _params)
		{
			Functions.glGetUniformuivPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUniformuivEXT(uint program, int location, uint* _params)
		{
			Functions.glGetUniformuivEXTPtr(program, location, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUnsignedBytevEXT(int pname, byte* data)
		{
			Functions.glGetUnsignedBytevEXTPtr(pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetUnsignedBytei_vEXT(int target, uint index, byte* data)
		{
			Functions.glGetUnsignedBytei_vEXTPtr(target, index, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantArrayObjectfvATI(uint id, int pname, float* _params)
		{
			Functions.glGetVariantArrayObjectfvATIPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantArrayObjectivATI(uint id, int pname, int* _params)
		{
			Functions.glGetVariantArrayObjectivATIPtr(id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantBooleanvEXT(uint id, int value, bool* data)
		{
			Functions.glGetVariantBooleanvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantFloatvEXT(uint id, int value, float* data)
		{
			Functions.glGetVariantFloatvEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantIntegervEXT(uint id, int value, int* data)
		{
			Functions.glGetVariantIntegervEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVariantPointervEXT(uint id, int value, IntPtr* data)
		{
			Functions.glGetVariantPointervEXTPtr(id, value, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glGetVaryingLocationNV(uint program, byte* name)
		{
			return Functions.glGetVaryingLocationNVPtr(program, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayIndexed64iv(uint vaobj, uint index, int pname, long* param)
		{
			Functions.glGetVertexArrayIndexed64ivPtr(vaobj, index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayIndexediv(uint vaobj, uint index, int pname, int* param)
		{
			Functions.glGetVertexArrayIndexedivPtr(vaobj, index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, int pname, int* param)
		{
			Functions.glGetVertexArrayIntegeri_vEXTPtr(vaobj, index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayIntegervEXT(uint vaobj, int pname, int* param)
		{
			Functions.glGetVertexArrayIntegervEXTPtr(vaobj, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, int pname, IntPtr* param)
		{
			Functions.glGetVertexArrayPointeri_vEXTPtr(vaobj, index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayPointervEXT(uint vaobj, int pname, IntPtr* param)
		{
			Functions.glGetVertexArrayPointervEXTPtr(vaobj, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexArrayiv(uint vaobj, int pname, int* param)
		{
			Functions.glGetVertexArrayivPtr(vaobj, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribArrayObjectfvATI(uint index, int pname, float* _params)
		{
			Functions.glGetVertexAttribArrayObjectfvATIPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribArrayObjectivATI(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribArrayObjectivATIPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribIiv(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribIivPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribIivEXT(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribIivEXTPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribIuiv(uint index, int pname, uint* _params)
		{
			Functions.glGetVertexAttribIuivPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribIuivEXT(uint index, int pname, uint* _params)
		{
			Functions.glGetVertexAttribIuivEXTPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribLdv(uint index, int pname, double* _params)
		{
			Functions.glGetVertexAttribLdvPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribLdvEXT(uint index, int pname, double* _params)
		{
			Functions.glGetVertexAttribLdvEXTPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribLi64vNV(uint index, int pname, long* _params)
		{
			Functions.glGetVertexAttribLi64vNVPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribLui64vARB(uint index, int pname, ulong* _params)
		{
			Functions.glGetVertexAttribLui64vARBPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribLui64vNV(uint index, int pname, ulong* _params)
		{
			Functions.glGetVertexAttribLui64vNVPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribPointerv(uint index, int pname, IntPtr* pointer)
		{
			Functions.glGetVertexAttribPointervPtr(index, pname, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribPointervARB(uint index, int pname, IntPtr* pointer)
		{
			Functions.glGetVertexAttribPointervARBPtr(index, pname, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribPointervNV(uint index, int pname, IntPtr* pointer)
		{
			Functions.glGetVertexAttribPointervNVPtr(index, pname, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribdv(uint index, int pname, double* _params)
		{
			Functions.glGetVertexAttribdvPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribdvARB(uint index, int pname, double* _params)
		{
			Functions.glGetVertexAttribdvARBPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribdvNV(uint index, int pname, double* _params)
		{
			Functions.glGetVertexAttribdvNVPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribfv(uint index, int pname, float* _params)
		{
			Functions.glGetVertexAttribfvPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribfvARB(uint index, int pname, float* _params)
		{
			Functions.glGetVertexAttribfvARBPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribfvNV(uint index, int pname, float* _params)
		{
			Functions.glGetVertexAttribfvNVPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribiv(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribivPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribivARB(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribivARBPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVertexAttribivNV(uint index, int pname, int* _params)
		{
			Functions.glGetVertexAttribivNVPtr(index, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, double* _params)
		{
			Functions.glGetVideoCaptureStreamdvNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, float* _params)
		{
			Functions.glGetVideoCaptureStreamfvNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, int* _params)
		{
			Functions.glGetVideoCaptureStreamivNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoCaptureivNV(uint video_capture_slot, int pname, int* _params)
		{
			Functions.glGetVideoCaptureivNVPtr(video_capture_slot, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoi64vNV(uint video_slot, int pname, long* _params)
		{
			Functions.glGetVideoi64vNVPtr(video_slot, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoivNV(uint video_slot, int pname, int* _params)
		{
			Functions.glGetVideoivNVPtr(video_slot, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideoui64vNV(uint video_slot, int pname, ulong* _params)
		{
			Functions.glGetVideoui64vNVPtr(video_slot, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetVideouivNV(uint video_slot, int pname, uint* _params)
		{
			Functions.glGetVideouivNVPtr(video_slot, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnColorTable(int target, int format, int type, int bufSize, IntPtr table)
		{
			Functions.glGetnColorTablePtr(target, format, type, bufSize, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnColorTableARB(int target, int format, int type, int bufSize, IntPtr table)
		{
			Functions.glGetnColorTableARBPtr(target, format, type, bufSize, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnCompressedTexImage(int target, int lod, int bufSize, IntPtr pixels)
		{
			Functions.glGetnCompressedTexImagePtr(target, lod, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnCompressedTexImageARB(int target, int lod, int bufSize, IntPtr img)
		{
			Functions.glGetnCompressedTexImageARBPtr(target, lod, bufSize, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnConvolutionFilter(int target, int format, int type, int bufSize, IntPtr image)
		{
			Functions.glGetnConvolutionFilterPtr(target, format, type, bufSize, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnConvolutionFilterARB(int target, int format, int type, int bufSize, IntPtr image)
		{
			Functions.glGetnConvolutionFilterARBPtr(target, format, type, bufSize, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnHistogram(int target, bool reset, int format, int type, int bufSize, IntPtr values)
		{
			Functions.glGetnHistogramPtr(target, reset, format, type, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnHistogramARB(int target, bool reset, int format, int type, int bufSize, IntPtr values)
		{
			Functions.glGetnHistogramARBPtr(target, reset, format, type, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapdv(int target, int query, int bufSize, double* v)
		{
			Functions.glGetnMapdvPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapdvARB(int target, int query, int bufSize, double* v)
		{
			Functions.glGetnMapdvARBPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapfv(int target, int query, int bufSize, float* v)
		{
			Functions.glGetnMapfvPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapfvARB(int target, int query, int bufSize, float* v)
		{
			Functions.glGetnMapfvARBPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapiv(int target, int query, int bufSize, int* v)
		{
			Functions.glGetnMapivPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMapivARB(int target, int query, int bufSize, int* v)
		{
			Functions.glGetnMapivARBPtr(target, query, bufSize, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMinmax(int target, bool reset, int format, int type, int bufSize, IntPtr values)
		{
			Functions.glGetnMinmaxPtr(target, reset, format, type, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnMinmaxARB(int target, bool reset, int format, int type, int bufSize, IntPtr values)
		{
			Functions.glGetnMinmaxARBPtr(target, reset, format, type, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapfv(int map, int bufSize, float* values)
		{
			Functions.glGetnPixelMapfvPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapfvARB(int map, int bufSize, float* values)
		{
			Functions.glGetnPixelMapfvARBPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapuiv(int map, int bufSize, uint* values)
		{
			Functions.glGetnPixelMapuivPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapuivARB(int map, int bufSize, uint* values)
		{
			Functions.glGetnPixelMapuivARBPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapusv(int map, int bufSize, ushort* values)
		{
			Functions.glGetnPixelMapusvPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPixelMapusvARB(int map, int bufSize, ushort* values)
		{
			Functions.glGetnPixelMapusvARBPtr(map, bufSize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPolygonStipple(int bufSize, byte* pattern)
		{
			Functions.glGetnPolygonStipplePtr(bufSize, pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnPolygonStippleARB(int bufSize, byte* pattern)
		{
			Functions.glGetnPolygonStippleARBPtr(bufSize, pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnSeparableFilter(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
		{
			Functions.glGetnSeparableFilterPtr(target, format, type, rowBufSize, row, columnBufSize, column, span);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnSeparableFilterARB(int target, int format, int type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
		{
			Functions.glGetnSeparableFilterARBPtr(target, format, type, rowBufSize, row, columnBufSize, column, span);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnTexImage(int target, int level, int format, int type, uint bufSize, IntPtr pixels)
		{
			Functions.glGetnTexImagePtr(target, level, format, type, bufSize, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnTexImageARB(int target, int level, int format, int type, uint bufSize, IntPtr img)
		{
			Functions.glGetnTexImageARBPtr(target, level, format, type, bufSize, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformdv(uint program, int location, int bufSize, double* _params)
		{
			Functions.glGetnUniformdvPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformdvARB(uint program, int location, int bufSize, double* _params)
		{
			Functions.glGetnUniformdvARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformfv(uint program, int location, int bufSize, float* _params)
		{
			Functions.glGetnUniformfvPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformfvARB(uint program, int location, int bufSize, float* _params)
		{
			Functions.glGetnUniformfvARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformfvEXT(uint program, int location, int bufSize, float* _params)
		{
			Functions.glGetnUniformfvEXTPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformfvKHR(uint program, int location, int bufSize, float* _params)
		{
			Functions.glGetnUniformfvKHRPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformi64vARB(uint program, int location, int bufSize, long* _params)
		{
			Functions.glGetnUniformi64vARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformiv(uint program, int location, int bufSize, int* _params)
		{
			Functions.glGetnUniformivPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformivARB(uint program, int location, int bufSize, int* _params)
		{
			Functions.glGetnUniformivARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformivEXT(uint program, int location, int bufSize, int* _params)
		{
			Functions.glGetnUniformivEXTPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformivKHR(uint program, int location, int bufSize, int* _params)
		{
			Functions.glGetnUniformivKHRPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* _params)
		{
			Functions.glGetnUniformui64vARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformuiv(uint program, int location, int bufSize, uint* _params)
		{
			Functions.glGetnUniformuivPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformuivARB(uint program, int location, int bufSize, uint* _params)
		{
			Functions.glGetnUniformuivARBPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGetnUniformuivKHR(uint program, int location, int bufSize, uint* _params)
		{
			Functions.glGetnUniformuivKHRPtr(program, location, bufSize, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactorbSUN(sbyte factor)
		{
			Functions.glGlobalAlphaFactorbSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactordSUN(double factor)
		{
			Functions.glGlobalAlphaFactordSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactorfSUN(float factor)
		{
			Functions.glGlobalAlphaFactorfSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactoriSUN(int factor)
		{
			Functions.glGlobalAlphaFactoriSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactorsSUN(short factor)
		{
			Functions.glGlobalAlphaFactorsSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactorubSUN(byte factor)
		{
			Functions.glGlobalAlphaFactorubSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactoruiSUN(uint factor)
		{
			Functions.glGlobalAlphaFactoruiSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glGlobalAlphaFactorusSUN(ushort factor)
		{
			Functions.glGlobalAlphaFactorusSUNPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glHint(int target, int mode)
		{
			Functions.glHintPtr(target, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glHintPGI(int target, int mode)
		{
			Functions.glHintPGIPtr(target, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glHistogram(int target, int width, int internalformat, bool sink)
		{
			Functions.glHistogramPtr(target, width, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glHistogramEXT(int target, int width, int internalformat, bool sink)
		{
			Functions.glHistogramEXTPtr(target, width, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIglooInterfaceSGIX(int pname, IntPtr _params)
		{
			Functions.glIglooInterfaceSGIXPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImageTransformParameterfHP(int target, int pname, float param)
		{
			Functions.glImageTransformParameterfHPPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImageTransformParameterfvHP(int target, int pname, float* _params)
		{
			Functions.glImageTransformParameterfvHPPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImageTransformParameteriHP(int target, int pname, int param)
		{
			Functions.glImageTransformParameteriHPPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImageTransformParameterivHP(int target, int pname, int* _params)
		{
			Functions.glImageTransformParameterivHPPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportMemoryFdEXT(uint memory, ulong size, int handleType, int fd)
		{
			Functions.glImportMemoryFdEXTPtr(memory, size, handleType, fd);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportMemoryWin32HandleEXT(uint memory, ulong size, int handleType, IntPtr handle)
		{
			Functions.glImportMemoryWin32HandleEXTPtr(memory, size, handleType, handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportMemoryWin32NameEXT(uint memory, ulong size, int handleType, IntPtr name)
		{
			Functions.glImportMemoryWin32NameEXTPtr(memory, size, handleType, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportSemaphoreFdEXT(uint semaphore, int handleType, int fd)
		{
			Functions.glImportSemaphoreFdEXTPtr(semaphore, handleType, fd);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportSemaphoreWin32HandleEXT(uint semaphore, int handleType, IntPtr handle)
		{
			Functions.glImportSemaphoreWin32HandleEXTPtr(semaphore, handleType, handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glImportSemaphoreWin32NameEXT(uint semaphore, int handleType, IntPtr name)
		{
			Functions.glImportSemaphoreWin32NameEXTPtr(semaphore, handleType, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glImportSyncEXT(int external_sync_type, uint external_sync, uint flags)
		{
			return Functions.glImportSyncEXTPtr(external_sync_type, external_sync, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexFormatNV(int type, int stride)
		{
			Functions.glIndexFormatNVPtr(type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexFuncEXT(int func, float _ref)
		{
			Functions.glIndexFuncEXTPtr(func, _ref);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexMask(uint mask)
		{
			Functions.glIndexMaskPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexMaterialEXT(int face, int mode)
		{
			Functions.glIndexMaterialEXTPtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexPointer(int type, int stride, IntPtr pointer)
		{
			Functions.glIndexPointerPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexPointerEXT(int type, int stride, int count, IntPtr pointer)
		{
			Functions.glIndexPointerEXTPtr(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glIndexPointerListIBMPtr(type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexd(double c)
		{
			Functions.glIndexdPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexdv(double* c)
		{
			Functions.glIndexdvPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexf(float c)
		{
			Functions.glIndexfPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexfv(float* c)
		{
			Functions.glIndexfvPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexi(int c)
		{
			Functions.glIndexiPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexiv(int* c)
		{
			Functions.glIndexivPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexs(short c)
		{
			Functions.glIndexsPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexsv(short* c)
		{
			Functions.glIndexsvPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexub(byte c)
		{
			Functions.glIndexubPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexubv(byte* c)
		{
			Functions.glIndexubvPtr(c);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexxOES(IntPtr component)
		{
			Functions.glIndexxOESPtr(component);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glIndexxvOES(IntPtr* component)
		{
			Functions.glIndexxvOESPtr(component);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInitNames()
		{
			Functions.glInitNamesPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInsertComponentEXT(uint res, uint src, uint num)
		{
			Functions.glInsertComponentEXTPtr(res, src, num);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInsertEventMarkerEXT(int length, byte* marker)
		{
			Functions.glInsertEventMarkerEXTPtr(length, marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInstrumentsBufferSGIX(int size, int* buffer)
		{
			Functions.glInstrumentsBufferSGIXPtr(size, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInterleavedArrays(int format, int stride, IntPtr pointer)
		{
			Functions.glInterleavedArraysPtr(format, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight)
		{
			Functions.glInterpolatePathsNVPtr(resultPath, pathA, pathB, weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateBufferData(uint buffer)
		{
			Functions.glInvalidateBufferDataPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateBufferSubData(uint buffer, uint offset, uint length)
		{
			Functions.glInvalidateBufferSubDataPtr(buffer, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateFramebuffer(int target, int numAttachments, uint* attachments)
		{
			Functions.glInvalidateFramebufferPtr(target, numAttachments, attachments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments)
		{
			Functions.glInvalidateNamedFramebufferDataPtr(framebuffer, numAttachments, attachments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height)
		{
			Functions.glInvalidateNamedFramebufferSubDataPtr(framebuffer, numAttachments, attachments, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateSubFramebuffer(int target, int numAttachments, uint* attachments, int x, int y, int width, int height)
		{
			Functions.glInvalidateSubFramebufferPtr(target, numAttachments, attachments, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateTexImage(uint texture, int level)
		{
			Functions.glInvalidateTexImagePtr(texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			Functions.glInvalidateTexSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsAsyncMarkerSGIX(uint marker)
		{
			return Functions.glIsAsyncMarkerSGIXPtr(marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsBuffer(uint buffer)
		{
			return Functions.glIsBufferPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsBufferARB(uint buffer)
		{
			return Functions.glIsBufferARBPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsBufferResidentNV(int target)
		{
			return Functions.glIsBufferResidentNVPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsCommandListNV(uint list)
		{
			return Functions.glIsCommandListNVPtr(list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnabled(int cap)
		{
			return Functions.glIsEnabledPtr(cap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnabledIndexedEXT(int target, uint index)
		{
			return Functions.glIsEnabledIndexedEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnabledi(int target, uint index)
		{
			return Functions.glIsEnablediPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnablediEXT(int target, uint index)
		{
			return Functions.glIsEnablediEXTPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnablediNV(int target, uint index)
		{
			return Functions.glIsEnablediNVPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsEnablediOES(int target, uint index)
		{
			return Functions.glIsEnablediOESPtr(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsFenceAPPLE(uint fence)
		{
			return Functions.glIsFenceAPPLEPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsFenceNV(uint fence)
		{
			return Functions.glIsFenceNVPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsFramebuffer(uint framebuffer)
		{
			return Functions.glIsFramebufferPtr(framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsFramebufferEXT(uint framebuffer)
		{
			return Functions.glIsFramebufferEXTPtr(framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsFramebufferOES(uint framebuffer)
		{
			return Functions.glIsFramebufferOESPtr(framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsImageHandleResidentARB(ulong handle)
		{
			return Functions.glIsImageHandleResidentARBPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsImageHandleResidentNV(ulong handle)
		{
			return Functions.glIsImageHandleResidentNVPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsList(uint list)
		{
			return Functions.glIsListPtr(list);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsMemoryObjectEXT(uint memoryObject)
		{
			return Functions.glIsMemoryObjectEXTPtr(memoryObject);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsNameAMD(int identifier, uint name)
		{
			return Functions.glIsNameAMDPtr(identifier, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsNamedBufferResidentNV(uint buffer)
		{
			return Functions.glIsNamedBufferResidentNVPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsNamedStringARB(int namelen, byte* name)
		{
			return Functions.glIsNamedStringARBPtr(namelen, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsObjectBufferATI(uint buffer)
		{
			return Functions.glIsObjectBufferATIPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsOcclusionQueryNV(uint id)
		{
			return Functions.glIsOcclusionQueryNVPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsPathNV(uint path)
		{
			return Functions.glIsPathNVPtr(path);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsPointInFillPathNV(uint path, uint mask, float x, float y)
		{
			return Functions.glIsPointInFillPathNVPtr(path, mask, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsPointInStrokePathNV(uint path, float x, float y)
		{
			return Functions.glIsPointInStrokePathNVPtr(path, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsProgram(uint program)
		{
			return Functions.glIsProgramPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsProgramARB(uint program)
		{
			return Functions.glIsProgramARBPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsProgramNV(uint id)
		{
			return Functions.glIsProgramNVPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsProgramPipeline(uint pipeline)
		{
			return Functions.glIsProgramPipelinePtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsProgramPipelineEXT(uint pipeline)
		{
			return Functions.glIsProgramPipelineEXTPtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsQuery(uint id)
		{
			return Functions.glIsQueryPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsQueryARB(uint id)
		{
			return Functions.glIsQueryARBPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsQueryEXT(uint id)
		{
			return Functions.glIsQueryEXTPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsRenderbuffer(uint renderbuffer)
		{
			return Functions.glIsRenderbufferPtr(renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsRenderbufferEXT(uint renderbuffer)
		{
			return Functions.glIsRenderbufferEXTPtr(renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsRenderbufferOES(uint renderbuffer)
		{
			return Functions.glIsRenderbufferOESPtr(renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsSemaphoreEXT(uint semaphore)
		{
			return Functions.glIsSemaphoreEXTPtr(semaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsSampler(uint sampler)
		{
			return Functions.glIsSamplerPtr(sampler);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsShader(uint shader)
		{
			return Functions.glIsShaderPtr(shader);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsStateNV(uint state)
		{
			return Functions.glIsStateNVPtr(state);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsSync(IntPtr sync)
		{
			return Functions.glIsSyncPtr(sync);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsSyncAPPLE(IntPtr sync)
		{
			return Functions.glIsSyncAPPLEPtr(sync);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTexture(uint texture)
		{
			return Functions.glIsTexturePtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTextureEXT(uint texture)
		{
			return Functions.glIsTextureEXTPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTextureHandleResidentARB(ulong handle)
		{
			return Functions.glIsTextureHandleResidentARBPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTextureHandleResidentNV(ulong handle)
		{
			return Functions.glIsTextureHandleResidentNVPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTransformFeedback(uint id)
		{
			return Functions.glIsTransformFeedbackPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsTransformFeedbackNV(uint id)
		{
			return Functions.glIsTransformFeedbackNVPtr(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsVariantEnabledEXT(uint id, int cap)
		{
			return Functions.glIsVariantEnabledEXTPtr(id, cap);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsVertexArray(uint array)
		{
			return Functions.glIsVertexArrayPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsVertexArrayAPPLE(uint array)
		{
			return Functions.glIsVertexArrayAPPLEPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsVertexArrayOES(uint array)
		{
			return Functions.glIsVertexArrayOESPtr(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glIsVertexAttribEnabledAPPLE(uint index, int pname)
		{
			return Functions.glIsVertexAttribEnabledAPPLEPtr(index, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
		{
			Functions.glLGPUCopyImageSubDataNVXPtr(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLGPUInterlockNVX()
		{
			Functions.glLGPUInterlockNVXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glLGPUNamedBufferSubDataNVXPtr(gpuMask, buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLabelObjectEXT(int type, uint _object, int length, byte* label)
		{
			Functions.glLabelObjectEXTPtr(type, _object, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightEnviSGIX(int pname, int param)
		{
			Functions.glLightEnviSGIXPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelf(int pname, float param)
		{
			Functions.glLightModelfPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelfv(int pname, float* _params)
		{
			Functions.glLightModelfvPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModeli(int pname, int param)
		{
			Functions.glLightModeliPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModeliv(int pname, int* _params)
		{
			Functions.glLightModelivPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelx(int pname, IntPtr param)
		{
			Functions.glLightModelxPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelxOES(int pname, IntPtr param)
		{
			Functions.glLightModelxOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelxv(int pname, IntPtr* param)
		{
			Functions.glLightModelxvPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightModelxvOES(int pname, IntPtr* param)
		{
			Functions.glLightModelxvOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightf(int light, int pname, float param)
		{
			Functions.glLightfPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightfv(int light, int pname, float* _params)
		{
			Functions.glLightfvPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLighti(int light, int pname, int param)
		{
			Functions.glLightiPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightiv(int light, int pname, int* _params)
		{
			Functions.glLightivPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightx(int light, int pname, IntPtr param)
		{
			Functions.glLightxPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightxOES(int light, int pname, IntPtr param)
		{
			Functions.glLightxOESPtr(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightxv(int light, int pname, IntPtr* _params)
		{
			Functions.glLightxvPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLightxvOES(int light, int pname, IntPtr* _params)
		{
			Functions.glLightxvOESPtr(light, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLineStipple(int factor, ushort pattern)
		{
			Functions.glLineStipplePtr(factor, pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLineWidth(float width)
		{
			Functions.glLineWidthPtr(width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLineWidthx(IntPtr width)
		{
			Functions.glLineWidthxPtr(width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLineWidthxOES(IntPtr width)
		{
			Functions.glLineWidthxOESPtr(width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLinkProgram(uint program)
		{
			Functions.glLinkProgramPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLinkProgramARB(uint programObj)
		{
			Functions.glLinkProgramARBPtr(programObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListBase(uint _base)
		{
			Functions.glListBasePtr(_base);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count)
		{
			Functions.glListDrawCommandsStatesClientNVPtr(list, segment, indirects, sizes, states, fbos, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListParameterfSGIX(uint list, int pname, float param)
		{
			Functions.glListParameterfSGIXPtr(list, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListParameterfvSGIX(uint list, int pname, float* _params)
		{
			Functions.glListParameterfvSGIXPtr(list, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListParameteriSGIX(uint list, int pname, int param)
		{
			Functions.glListParameteriSGIXPtr(list, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glListParameterivSGIX(uint list, int pname, int* _params)
		{
			Functions.glListParameterivSGIXPtr(list, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadIdentity()
		{
			Functions.glLoadIdentityPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadIdentityDeformationMapSGIX(uint mask)
		{
			Functions.glLoadIdentityDeformationMapSGIXPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadMatrixd(double* m)
		{
			Functions.glLoadMatrixdPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadMatrixf(float* m)
		{
			Functions.glLoadMatrixfPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadMatrixx(IntPtr* m)
		{
			Functions.glLoadMatrixxPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadMatrixxOES(IntPtr* m)
		{
			Functions.glLoadMatrixxOESPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadName(uint name)
		{
			Functions.glLoadNamePtr(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadPaletteFromModelViewMatrixOES()
		{
			Functions.glLoadPaletteFromModelViewMatrixOESPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadProgramNV(int target, uint id, int len, byte* program)
		{
			Functions.glLoadProgramNVPtr(target, id, len, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadTransposeMatrixd(double* m)
		{
			Functions.glLoadTransposeMatrixdPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadTransposeMatrixdARB(double* m)
		{
			Functions.glLoadTransposeMatrixdARBPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadTransposeMatrixf(float* m)
		{
			Functions.glLoadTransposeMatrixfPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadTransposeMatrixfARB(float* m)
		{
			Functions.glLoadTransposeMatrixfARBPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLoadTransposeMatrixxOES(IntPtr* m)
		{
			Functions.glLoadTransposeMatrixxOESPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLockArraysEXT(int first, int count)
		{
			Functions.glLockArraysEXTPtr(first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glLogicOp(int opcode)
		{
			Functions.glLogicOpPtr(opcode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeBufferNonResidentNV(int target)
		{
			Functions.glMakeBufferNonResidentNVPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeBufferResidentNV(int target, int access)
		{
			Functions.glMakeBufferResidentNVPtr(target, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeImageHandleNonResidentARB(ulong handle)
		{
			Functions.glMakeImageHandleNonResidentARBPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeImageHandleNonResidentNV(ulong handle)
		{
			Functions.glMakeImageHandleNonResidentNVPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeImageHandleResidentARB(ulong handle, int access)
		{
			Functions.glMakeImageHandleResidentARBPtr(handle, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeImageHandleResidentNV(ulong handle, int access)
		{
			Functions.glMakeImageHandleResidentNVPtr(handle, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeNamedBufferNonResidentNV(uint buffer)
		{
			Functions.glMakeNamedBufferNonResidentNVPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeNamedBufferResidentNV(uint buffer, int access)
		{
			Functions.glMakeNamedBufferResidentNVPtr(buffer, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeTextureHandleNonResidentARB(ulong handle)
		{
			Functions.glMakeTextureHandleNonResidentARBPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeTextureHandleNonResidentNV(ulong handle)
		{
			Functions.glMakeTextureHandleNonResidentNVPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeTextureHandleResidentARB(ulong handle)
		{
			Functions.glMakeTextureHandleResidentARBPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMakeTextureHandleResidentNV(ulong handle)
		{
			Functions.glMakeTextureHandleResidentNVPtr(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap1d(int target, double u1, double u2, int stride, int order, double* points)
		{
			Functions.glMap1dPtr(target, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap1f(int target, float u1, float u2, int stride, int order, float* points)
		{
			Functions.glMap1fPtr(target, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap1xOES(int target, IntPtr u1, IntPtr u2, int stride, int order, IntPtr points)
		{
			Functions.glMap1xOESPtr(target, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			Functions.glMap2dPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			Functions.glMap2fPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMap2xOES(int target, IntPtr u1, IntPtr u2, int ustride, int uorder, IntPtr v1, IntPtr v2, int vstride, int vorder, IntPtr points)
		{
			Functions.glMap2xOESPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapBuffer(int target, int access)
		{
			return Functions.glMapBufferPtr(target, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapBufferARB(int target, int access)
		{
			return Functions.glMapBufferARBPtr(target, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapBufferOES(int target, int access)
		{
			return Functions.glMapBufferOESPtr(target, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapBufferRange(int target, uint offset, uint length, uint access)
		{
			return Functions.glMapBufferRangePtr(target, offset, length, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapBufferRangeEXT(int target, uint offset, uint length, uint access)
		{
			return Functions.glMapBufferRangeEXTPtr(target, offset, length, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
		{
			Functions.glMapControlPointsNVPtr(target, index, type, ustride, vstride, uorder, vorder, packed, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid1d(int un, double u1, double u2)
		{
			Functions.glMapGrid1dPtr(un, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid1f(int un, float u1, float u2)
		{
			Functions.glMapGrid1fPtr(un, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid1xOES(int n, IntPtr u1, IntPtr u2)
		{
			Functions.glMapGrid1xOESPtr(n, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
		{
			Functions.glMapGrid2dPtr(un, u1, u2, vn, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
		{
			Functions.glMapGrid2fPtr(un, u1, u2, vn, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapGrid2xOES(int n, IntPtr u1, IntPtr u2, IntPtr v1, IntPtr v2)
		{
			Functions.glMapGrid2xOESPtr(n, u1, u2, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapNamedBuffer(uint buffer, int access)
		{
			return Functions.glMapNamedBufferPtr(buffer, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapNamedBufferEXT(uint buffer, int access)
		{
			return Functions.glMapNamedBufferEXTPtr(buffer, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapNamedBufferRange(uint buffer, uint offset, uint length, uint access)
		{
			return Functions.glMapNamedBufferRangePtr(buffer, offset, length, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapNamedBufferRangeEXT(uint buffer, uint offset, uint length, uint access)
		{
			return Functions.glMapNamedBufferRangeEXTPtr(buffer, offset, length, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapObjectBufferATI(uint buffer)
		{
			return Functions.glMapObjectBufferATIPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapParameterfvNV(int target, int pname, float* _params)
		{
			Functions.glMapParameterfvNVPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapParameterivNV(int target, int pname, int* _params)
		{
			Functions.glMapParameterivNVPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, int* layout)
		{
			return Functions.glMapTexture2DINTELPtr(texture, level, access, stride, layout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points)
		{
			Functions.glMapVertexAttrib1dAPPLEPtr(index, size, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points)
		{
			Functions.glMapVertexAttrib1fAPPLEPtr(index, size, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			Functions.glMapVertexAttrib2dAPPLEPtr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			Functions.glMapVertexAttrib2fAPPLEPtr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialf(int face, int pname, float param)
		{
			Functions.glMaterialfPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialfv(int face, int pname, float* _params)
		{
			Functions.glMaterialfvPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMateriali(int face, int pname, int param)
		{
			Functions.glMaterialiPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialiv(int face, int pname, int* _params)
		{
			Functions.glMaterialivPtr(face, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialx(int face, int pname, IntPtr param)
		{
			Functions.glMaterialxPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialxOES(int face, int pname, IntPtr param)
		{
			Functions.glMaterialxOESPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialxv(int face, int pname, IntPtr* param)
		{
			Functions.glMaterialxvPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaterialxvOES(int face, int pname, IntPtr* param)
		{
			Functions.glMaterialxvOESPtr(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			Functions.glMatrixFrustumEXTPtr(mode, left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixIndexPointerARB(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glMatrixIndexPointerARBPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixIndexPointerOES(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glMatrixIndexPointerOESPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixIndexubvARB(int size, byte* indices)
		{
			Functions.glMatrixIndexubvARBPtr(size, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixIndexuivARB(int size, uint* indices)
		{
			Functions.glMatrixIndexuivARBPtr(size, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixIndexusvARB(int size, ushort* indices)
		{
			Functions.glMatrixIndexusvARBPtr(size, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoad3x2fNV(int matrixMode, float* m)
		{
			Functions.glMatrixLoad3x2fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoad3x3fNV(int matrixMode, float* m)
		{
			Functions.glMatrixLoad3x3fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoadIdentityEXT(int mode)
		{
			Functions.glMatrixLoadIdentityEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoadTranspose3x3fNV(int matrixMode, float* m)
		{
			Functions.glMatrixLoadTranspose3x3fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoadTransposedEXT(int mode, double* m)
		{
			Functions.glMatrixLoadTransposedEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoadTransposefEXT(int mode, float* m)
		{
			Functions.glMatrixLoadTransposefEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoaddEXT(int mode, double* m)
		{
			Functions.glMatrixLoaddEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixLoadfEXT(int mode, float* m)
		{
			Functions.glMatrixLoadfEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMode(int mode)
		{
			Functions.glMatrixModePtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMult3x2fNV(int matrixMode, float* m)
		{
			Functions.glMatrixMult3x2fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMult3x3fNV(int matrixMode, float* m)
		{
			Functions.glMatrixMult3x3fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMultTranspose3x3fNV(int matrixMode, float* m)
		{
			Functions.glMatrixMultTranspose3x3fNVPtr(matrixMode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMultTransposedEXT(int mode, double* m)
		{
			Functions.glMatrixMultTransposedEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMultTransposefEXT(int mode, float* m)
		{
			Functions.glMatrixMultTransposefEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMultdEXT(int mode, double* m)
		{
			Functions.glMatrixMultdEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixMultfEXT(int mode, float* m)
		{
			Functions.glMatrixMultfEXTPtr(mode, m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			Functions.glMatrixOrthoEXTPtr(mode, left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixPopEXT(int mode)
		{
			Functions.glMatrixPopEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixPushEXT(int mode)
		{
			Functions.glMatrixPushEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixRotatedEXT(int mode, double angle, double x, double y, double z)
		{
			Functions.glMatrixRotatedEXTPtr(mode, angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixRotatefEXT(int mode, float angle, float x, float y, float z)
		{
			Functions.glMatrixRotatefEXTPtr(mode, angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixScaledEXT(int mode, double x, double y, double z)
		{
			Functions.glMatrixScaledEXTPtr(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixScalefEXT(int mode, float x, float y, float z)
		{
			Functions.glMatrixScalefEXTPtr(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixTranslatedEXT(int mode, double x, double y, double z)
		{
			Functions.glMatrixTranslatedEXTPtr(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMatrixTranslatefEXT(int mode, float x, float y, float z)
		{
			Functions.glMatrixTranslatefEXTPtr(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaxShaderCompilerThreadsKHR(uint count)
		{
			Functions.glMaxShaderCompilerThreadsKHRPtr(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMaxShaderCompilerThreadsARB(uint count)
		{
			Functions.glMaxShaderCompilerThreadsARBPtr(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMemoryBarrier(uint barriers)
		{
			Functions.glMemoryBarrierPtr(barriers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMemoryBarrierByRegion(uint barriers)
		{
			Functions.glMemoryBarrierByRegionPtr(barriers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMemoryBarrierEXT(uint barriers)
		{
			Functions.glMemoryBarrierEXTPtr(barriers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMemoryObjectParameterivEXT(uint memoryObject, int pname, int* _params)
		{
			Functions.glMemoryObjectParameterivEXTPtr(memoryObject, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMinSampleShading(float value)
		{
			Functions.glMinSampleShadingPtr(value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMinSampleShadingARB(float value)
		{
			Functions.glMinSampleShadingARBPtr(value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMinSampleShadingOES(float value)
		{
			Functions.glMinSampleShadingOESPtr(value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMinmax(int target, int internalformat, bool sink)
		{
			Functions.glMinmaxPtr(target, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMinmaxEXT(int target, int internalformat, bool sink)
		{
			Functions.glMinmaxEXTPtr(target, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultMatrixd(double* m)
		{
			Functions.glMultMatrixdPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultMatrixf(float* m)
		{
			Functions.glMultMatrixfPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultMatrixx(IntPtr* m)
		{
			Functions.glMultMatrixxPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultMatrixxOES(IntPtr* m)
		{
			Functions.glMultMatrixxOESPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultTransposeMatrixd(double* m)
		{
			Functions.glMultTransposeMatrixdPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultTransposeMatrixdARB(double* m)
		{
			Functions.glMultTransposeMatrixdARBPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultTransposeMatrixf(float* m)
		{
			Functions.glMultTransposeMatrixfPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultTransposeMatrixfARB(float* m)
		{
			Functions.glMultTransposeMatrixfARBPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultTransposeMatrixxOES(IntPtr* m)
		{
			Functions.glMultTransposeMatrixxOESPtr(m);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArrays(int mode, int* first, int* count, int drawcount)
		{
			Functions.glMultiDrawArraysPtr(mode, first, count, drawcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysEXT(int mode, int* first, int* count, int primcount)
		{
			Functions.glMultiDrawArraysEXTPtr(mode, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirect(int mode, IntPtr indirect, int drawcount, int stride)
		{
			Functions.glMultiDrawArraysIndirectPtr(mode, indirect, drawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectAMD(int mode, IntPtr indirect, int primcount, int stride)
		{
			Functions.glMultiDrawArraysIndirectAMDPtr(mode, indirect, primcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectBindlessCountNV(int mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
		{
			Functions.glMultiDrawArraysIndirectBindlessCountNVPtr(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectBindlessNV(int mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
		{
			Functions.glMultiDrawArraysIndirectBindlessNVPtr(mode, indirect, drawCount, stride, vertexBufferCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectCount(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride)
		{
			Functions.glMultiDrawArraysIndirectCountPtr(mode, indirect, drawcount, maxdrawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectCountARB(int mode, IntPtr indirect, uint drawcount, int maxdrawcount, int stride)
		{
			Functions.glMultiDrawArraysIndirectCountARBPtr(mode, indirect, drawcount, maxdrawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawArraysIndirectEXT(int mode, IntPtr indirect, int drawcount, int stride)
		{
			Functions.glMultiDrawArraysIndirectEXTPtr(mode, indirect, drawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementArrayAPPLE(int mode, int* first, int* count, int primcount)
		{
			Functions.glMultiDrawElementArrayAPPLEPtr(mode, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElements(int mode, int* count, int type, IntPtr* indices, int drawcount)
		{
			Functions.glMultiDrawElementsPtr(mode, count, type, indices, drawcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsBaseVertex(int mode, int* count, int type, IntPtr* indices, int drawcount, int* basevertex)
		{
			Functions.glMultiDrawElementsBaseVertexPtr(mode, count, type, indices, drawcount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsBaseVertexEXT(int mode, int* count, int type, IntPtr* indices, int primcount, int* basevertex)
		{
			Functions.glMultiDrawElementsBaseVertexEXTPtr(mode, count, type, indices, primcount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsEXT(int mode, int* count, int type, IntPtr* indices, int primcount)
		{
			Functions.glMultiDrawElementsEXTPtr(mode, count, type, indices, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirect(int mode, int type, IntPtr indirect, int drawcount, int stride)
		{
			Functions.glMultiDrawElementsIndirectPtr(mode, type, indirect, drawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectAMD(int mode, int type, IntPtr indirect, int primcount, int stride)
		{
			Functions.glMultiDrawElementsIndirectAMDPtr(mode, type, indirect, primcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectBindlessCountNV(int mode, int type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
		{
			Functions.glMultiDrawElementsIndirectBindlessCountNVPtr(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectBindlessNV(int mode, int type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
		{
			Functions.glMultiDrawElementsIndirectBindlessNVPtr(mode, type, indirect, drawCount, stride, vertexBufferCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectCount(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride)
		{
			Functions.glMultiDrawElementsIndirectCountPtr(mode, type, indirect, drawcount, maxdrawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectCountARB(int mode, int type, IntPtr indirect, uint drawcount, int maxdrawcount, int stride)
		{
			Functions.glMultiDrawElementsIndirectCountARBPtr(mode, type, indirect, drawcount, maxdrawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawElementsIndirectEXT(int mode, int type, IntPtr indirect, int drawcount, int stride)
		{
			Functions.glMultiDrawElementsIndirectEXTPtr(mode, type, indirect, drawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawMeshTasksIndirectNV(uint indirect, int drawcount, int stride)
		{
			Functions.glMultiDrawMeshTasksIndirectNVPtr(indirect, drawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawMeshTasksIndirectCountNV(uint indirect, uint drawcount, int maxdrawcount, int stride)
		{
			Functions.glMultiDrawMeshTasksIndirectCountNVPtr(indirect, drawcount, maxdrawcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int* first, int* count, int primcount)
		{
			Functions.glMultiDrawRangeElementArrayAPPLEPtr(mode, start, end, first, count, primcount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiModeDrawArraysIBM(uint* mode, int* first, int* count, int primcount, int modestride)
		{
			Functions.glMultiModeDrawArraysIBMPtr(mode, first, count, primcount, modestride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiModeDrawElementsIBM(uint* mode, int* count, int type, IntPtr* indices, int primcount, int modestride)
		{
			Functions.glMultiModeDrawElementsIBMPtr(mode, count, type, indices, primcount, modestride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexBufferEXT(int texunit, int target, int internalformat, uint buffer)
		{
			Functions.glMultiTexBufferEXTPtr(texunit, target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1bOES(int texture, sbyte s)
		{
			Functions.glMultiTexCoord1bOESPtr(texture, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1bvOES(int texture, sbyte* coords)
		{
			Functions.glMultiTexCoord1bvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1d(int target, double s)
		{
			Functions.glMultiTexCoord1dPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1dARB(int target, double s)
		{
			Functions.glMultiTexCoord1dARBPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1dv(int target, double* v)
		{
			Functions.glMultiTexCoord1dvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1dvARB(int target, double* v)
		{
			Functions.glMultiTexCoord1dvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1f(int target, float s)
		{
			Functions.glMultiTexCoord1fPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1fARB(int target, float s)
		{
			Functions.glMultiTexCoord1fARBPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1fv(int target, float* v)
		{
			Functions.glMultiTexCoord1fvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1fvARB(int target, float* v)
		{
			Functions.glMultiTexCoord1fvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1hNV(int target, short s)
		{
			Functions.glMultiTexCoord1hNVPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1hvNV(int target, short* v)
		{
			Functions.glMultiTexCoord1hvNVPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1i(int target, int s)
		{
			Functions.glMultiTexCoord1iPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1iARB(int target, int s)
		{
			Functions.glMultiTexCoord1iARBPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1iv(int target, int* v)
		{
			Functions.glMultiTexCoord1ivPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1ivARB(int target, int* v)
		{
			Functions.glMultiTexCoord1ivARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1s(int target, short s)
		{
			Functions.glMultiTexCoord1sPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1sARB(int target, short s)
		{
			Functions.glMultiTexCoord1sARBPtr(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1sv(int target, short* v)
		{
			Functions.glMultiTexCoord1svPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1svARB(int target, short* v)
		{
			Functions.glMultiTexCoord1svARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1xOES(int texture, IntPtr s)
		{
			Functions.glMultiTexCoord1xOESPtr(texture, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord1xvOES(int texture, IntPtr* coords)
		{
			Functions.glMultiTexCoord1xvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2bOES(int texture, sbyte s, sbyte t)
		{
			Functions.glMultiTexCoord2bOESPtr(texture, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2bvOES(int texture, sbyte* coords)
		{
			Functions.glMultiTexCoord2bvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2d(int target, double s, double t)
		{
			Functions.glMultiTexCoord2dPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2dARB(int target, double s, double t)
		{
			Functions.glMultiTexCoord2dARBPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2dv(int target, double* v)
		{
			Functions.glMultiTexCoord2dvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2dvARB(int target, double* v)
		{
			Functions.glMultiTexCoord2dvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2f(int target, float s, float t)
		{
			Functions.glMultiTexCoord2fPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2fARB(int target, float s, float t)
		{
			Functions.glMultiTexCoord2fARBPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2fv(int target, float* v)
		{
			Functions.glMultiTexCoord2fvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2fvARB(int target, float* v)
		{
			Functions.glMultiTexCoord2fvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2hNV(int target, short s, short t)
		{
			Functions.glMultiTexCoord2hNVPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2hvNV(int target, short* v)
		{
			Functions.glMultiTexCoord2hvNVPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2i(int target, int s, int t)
		{
			Functions.glMultiTexCoord2iPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2iARB(int target, int s, int t)
		{
			Functions.glMultiTexCoord2iARBPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2iv(int target, int* v)
		{
			Functions.glMultiTexCoord2ivPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2ivARB(int target, int* v)
		{
			Functions.glMultiTexCoord2ivARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2s(int target, short s, short t)
		{
			Functions.glMultiTexCoord2sPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2sARB(int target, short s, short t)
		{
			Functions.glMultiTexCoord2sARBPtr(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2sv(int target, short* v)
		{
			Functions.glMultiTexCoord2svPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2svARB(int target, short* v)
		{
			Functions.glMultiTexCoord2svARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2xOES(int texture, IntPtr s, IntPtr t)
		{
			Functions.glMultiTexCoord2xOESPtr(texture, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord2xvOES(int texture, IntPtr* coords)
		{
			Functions.glMultiTexCoord2xvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3bOES(int texture, sbyte s, sbyte t, sbyte r)
		{
			Functions.glMultiTexCoord3bOESPtr(texture, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3bvOES(int texture, sbyte* coords)
		{
			Functions.glMultiTexCoord3bvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3d(int target, double s, double t, double r)
		{
			Functions.glMultiTexCoord3dPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3dARB(int target, double s, double t, double r)
		{
			Functions.glMultiTexCoord3dARBPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3dv(int target, double* v)
		{
			Functions.glMultiTexCoord3dvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3dvARB(int target, double* v)
		{
			Functions.glMultiTexCoord3dvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3f(int target, float s, float t, float r)
		{
			Functions.glMultiTexCoord3fPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3fARB(int target, float s, float t, float r)
		{
			Functions.glMultiTexCoord3fARBPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3fv(int target, float* v)
		{
			Functions.glMultiTexCoord3fvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3fvARB(int target, float* v)
		{
			Functions.glMultiTexCoord3fvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3hNV(int target, short s, short t, short r)
		{
			Functions.glMultiTexCoord3hNVPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3hvNV(int target, short* v)
		{
			Functions.glMultiTexCoord3hvNVPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3i(int target, int s, int t, int r)
		{
			Functions.glMultiTexCoord3iPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3iARB(int target, int s, int t, int r)
		{
			Functions.glMultiTexCoord3iARBPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3iv(int target, int* v)
		{
			Functions.glMultiTexCoord3ivPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3ivARB(int target, int* v)
		{
			Functions.glMultiTexCoord3ivARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3s(int target, short s, short t, short r)
		{
			Functions.glMultiTexCoord3sPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3sARB(int target, short s, short t, short r)
		{
			Functions.glMultiTexCoord3sARBPtr(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3sv(int target, short* v)
		{
			Functions.glMultiTexCoord3svPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3svARB(int target, short* v)
		{
			Functions.glMultiTexCoord3svARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3xOES(int texture, IntPtr s, IntPtr t, IntPtr r)
		{
			Functions.glMultiTexCoord3xOESPtr(texture, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord3xvOES(int texture, IntPtr* coords)
		{
			Functions.glMultiTexCoord3xvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4bOES(int texture, sbyte s, sbyte t, sbyte r, sbyte q)
		{
			Functions.glMultiTexCoord4bOESPtr(texture, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4bvOES(int texture, sbyte* coords)
		{
			Functions.glMultiTexCoord4bvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4d(int target, double s, double t, double r, double q)
		{
			Functions.glMultiTexCoord4dPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4dARB(int target, double s, double t, double r, double q)
		{
			Functions.glMultiTexCoord4dARBPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4dv(int target, double* v)
		{
			Functions.glMultiTexCoord4dvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4dvARB(int target, double* v)
		{
			Functions.glMultiTexCoord4dvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4f(int target, float s, float t, float r, float q)
		{
			Functions.glMultiTexCoord4fPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4fARB(int target, float s, float t, float r, float q)
		{
			Functions.glMultiTexCoord4fARBPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4fv(int target, float* v)
		{
			Functions.glMultiTexCoord4fvPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4fvARB(int target, float* v)
		{
			Functions.glMultiTexCoord4fvARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4hNV(int target, short s, short t, short r, short q)
		{
			Functions.glMultiTexCoord4hNVPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4hvNV(int target, short* v)
		{
			Functions.glMultiTexCoord4hvNVPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4i(int target, int s, int t, int r, int q)
		{
			Functions.glMultiTexCoord4iPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4iARB(int target, int s, int t, int r, int q)
		{
			Functions.glMultiTexCoord4iARBPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4iv(int target, int* v)
		{
			Functions.glMultiTexCoord4ivPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4ivARB(int target, int* v)
		{
			Functions.glMultiTexCoord4ivARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4s(int target, short s, short t, short r, short q)
		{
			Functions.glMultiTexCoord4sPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4sARB(int target, short s, short t, short r, short q)
		{
			Functions.glMultiTexCoord4sARBPtr(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4sv(int target, short* v)
		{
			Functions.glMultiTexCoord4svPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4svARB(int target, short* v)
		{
			Functions.glMultiTexCoord4svARBPtr(target, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4x(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q)
		{
			Functions.glMultiTexCoord4xPtr(texture, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4xOES(int texture, IntPtr s, IntPtr t, IntPtr r, IntPtr q)
		{
			Functions.glMultiTexCoord4xOESPtr(texture, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoord4xvOES(int texture, IntPtr* coords)
		{
			Functions.glMultiTexCoord4xvOESPtr(texture, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP1ui(int texture, int type, uint coords)
		{
			Functions.glMultiTexCoordP1uiPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP1uiv(int texture, int type, uint* coords)
		{
			Functions.glMultiTexCoordP1uivPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP2ui(int texture, int type, uint coords)
		{
			Functions.glMultiTexCoordP2uiPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP2uiv(int texture, int type, uint* coords)
		{
			Functions.glMultiTexCoordP2uivPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP3ui(int texture, int type, uint coords)
		{
			Functions.glMultiTexCoordP3uiPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP3uiv(int texture, int type, uint* coords)
		{
			Functions.glMultiTexCoordP3uivPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP4ui(int texture, int type, uint coords)
		{
			Functions.glMultiTexCoordP4uiPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordP4uiv(int texture, int type, uint* coords)
		{
			Functions.glMultiTexCoordP4uivPtr(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, IntPtr pointer)
		{
			Functions.glMultiTexCoordPointerEXTPtr(texunit, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexEnvfEXT(int texunit, int target, int pname, float param)
		{
			Functions.glMultiTexEnvfEXTPtr(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexEnvfvEXT(int texunit, int target, int pname, float* _params)
		{
			Functions.glMultiTexEnvfvEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexEnviEXT(int texunit, int target, int pname, int param)
		{
			Functions.glMultiTexEnviEXTPtr(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexEnvivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glMultiTexEnvivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGendEXT(int texunit, int coord, int pname, double param)
		{
			Functions.glMultiTexGendEXTPtr(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGendvEXT(int texunit, int coord, int pname, double* _params)
		{
			Functions.glMultiTexGendvEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGenfEXT(int texunit, int coord, int pname, float param)
		{
			Functions.glMultiTexGenfEXTPtr(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGenfvEXT(int texunit, int coord, int pname, float* _params)
		{
			Functions.glMultiTexGenfvEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGeniEXT(int texunit, int coord, int pname, int param)
		{
			Functions.glMultiTexGeniEXTPtr(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexGenivEXT(int texunit, int coord, int pname, int* _params)
		{
			Functions.glMultiTexGenivEXTPtr(texunit, coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexImage1DEXTPtr(texunit, target, level, internalformat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexImage2DEXTPtr(texunit, target, level, internalformat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexImage3DEXTPtr(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameterIivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glMultiTexParameterIivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* _params)
		{
			Functions.glMultiTexParameterIuivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameterfEXT(int texunit, int target, int pname, float param)
		{
			Functions.glMultiTexParameterfEXTPtr(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameterfvEXT(int texunit, int target, int pname, float* _params)
		{
			Functions.glMultiTexParameterfvEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameteriEXT(int texunit, int target, int pname, int param)
		{
			Functions.glMultiTexParameteriEXTPtr(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexParameterivEXT(int texunit, int target, int pname, int* _params)
		{
			Functions.glMultiTexParameterivEXTPtr(texunit, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexRenderbufferEXT(int texunit, int target, uint renderbuffer)
		{
			Functions.glMultiTexRenderbufferEXTPtr(texunit, target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexSubImage1DEXTPtr(texunit, target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexSubImage2DEXTPtr(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glMultiTexSubImage3DEXTPtr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastBarrierNV()
		{
			Functions.glMulticastBarrierNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter)
		{
			Functions.glMulticastBlitFramebufferNVPtr(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glMulticastBufferSubDataNVPtr(gpuMask, buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size)
		{
			Functions.glMulticastCopyBufferSubDataNVPtr(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			Functions.glMulticastCopyImageSubDataNVPtr(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v)
		{
			Functions.glMulticastFramebufferSampleLocationsfvNVPtr(gpu, framebuffer, start, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long* _params)
		{
			Functions.glMulticastGetQueryObjecti64vNVPtr(gpu, id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int* _params)
		{
			Functions.glMulticastGetQueryObjectivNVPtr(gpu, id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong* _params)
		{
			Functions.glMulticastGetQueryObjectui64vNVPtr(gpu, id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint* _params)
		{
			Functions.glMulticastGetQueryObjectuivNVPtr(gpu, id, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask)
		{
			Functions.glMulticastWaitSyncNVPtr(signalGpu, waitGpuMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset)
		{
			Functions.glNamedBufferAttachMemoryNVPtr(buffer, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferData(uint buffer, uint size, IntPtr data, int usage)
		{
			Functions.glNamedBufferDataPtr(buffer, size, data, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferDataEXT(uint buffer, uint size, IntPtr data, int usage)
		{
			Functions.glNamedBufferDataEXTPtr(buffer, size, data, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferPageCommitmentARB(uint buffer, uint offset, uint size, bool commit)
		{
			Functions.glNamedBufferPageCommitmentARBPtr(buffer, offset, size, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferPageCommitmentEXT(uint buffer, uint offset, uint size, bool commit)
		{
			Functions.glNamedBufferPageCommitmentEXTPtr(buffer, offset, size, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferStorage(uint buffer, uint size, IntPtr data, uint flags)
		{
			Functions.glNamedBufferStoragePtr(buffer, size, data, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferStorageExternalEXT(uint buffer, uint offset, uint size, IntPtr clientBuffer, uint flags)
		{
			Functions.glNamedBufferStorageExternalEXTPtr(buffer, offset, size, clientBuffer, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferStorageEXT(uint buffer, uint size, IntPtr data, uint flags)
		{
			Functions.glNamedBufferStorageEXTPtr(buffer, size, data, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferStorageMemEXT(uint buffer, uint size, uint memory, ulong offset)
		{
			Functions.glNamedBufferStorageMemEXTPtr(buffer, size, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferSubData(uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glNamedBufferSubDataPtr(buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedBufferSubDataEXT(uint buffer, uint offset, uint size, IntPtr data)
		{
			Functions.glNamedBufferSubDataEXTPtr(buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, uint readOffset, uint writeOffset, uint size)
		{
			Functions.glNamedCopyBufferSubDataEXTPtr(readBuffer, writeBuffer, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferDrawBuffer(uint framebuffer, int buf)
		{
			Functions.glNamedFramebufferDrawBufferPtr(framebuffer, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs)
		{
			Functions.glNamedFramebufferDrawBuffersPtr(framebuffer, n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferParameteri(uint framebuffer, int pname, int param)
		{
			Functions.glNamedFramebufferParameteriPtr(framebuffer, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferParameteriEXT(uint framebuffer, int pname, int param)
		{
			Functions.glNamedFramebufferParameteriEXTPtr(framebuffer, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferReadBuffer(uint framebuffer, int src)
		{
			Functions.glNamedFramebufferReadBufferPtr(framebuffer, src);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferRenderbuffer(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer)
		{
			Functions.glNamedFramebufferRenderbufferPtr(framebuffer, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferRenderbufferEXT(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer)
		{
			Functions.glNamedFramebufferRenderbufferEXTPtr(framebuffer, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v)
		{
			Functions.glNamedFramebufferSampleLocationsfvARBPtr(framebuffer, start, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v)
		{
			Functions.glNamedFramebufferSampleLocationsfvNVPtr(framebuffer, start, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTexture(uint framebuffer, int attachment, uint texture, int level)
		{
			Functions.glNamedFramebufferTexturePtr(framebuffer, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values)
		{
			Functions.glNamedFramebufferSamplePositionsfvAMDPtr(framebuffer, numsamples, pixelindex, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTexture1DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level)
		{
			Functions.glNamedFramebufferTexture1DEXTPtr(framebuffer, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTexture2DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level)
		{
			Functions.glNamedFramebufferTexture2DEXTPtr(framebuffer, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTexture3DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level, int zoffset)
		{
			Functions.glNamedFramebufferTexture3DEXTPtr(framebuffer, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTextureEXT(uint framebuffer, int attachment, uint texture, int level)
		{
			Functions.glNamedFramebufferTextureEXTPtr(framebuffer, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTextureFaceEXT(uint framebuffer, int attachment, uint texture, int level, int face)
		{
			Functions.glNamedFramebufferTextureFaceEXTPtr(framebuffer, attachment, texture, level, face);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTextureLayer(uint framebuffer, int attachment, uint texture, int level, int layer)
		{
			Functions.glNamedFramebufferTextureLayerPtr(framebuffer, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedFramebufferTextureLayerEXT(uint framebuffer, int attachment, uint texture, int level, int layer)
		{
			Functions.glNamedFramebufferTextureLayerEXTPtr(framebuffer, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameter4dEXT(uint program, int target, uint index, double x, double y, double z, double w)
		{
			Functions.glNamedProgramLocalParameter4dEXTPtr(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameter4dvEXT(uint program, int target, uint index, double* _params)
		{
			Functions.glNamedProgramLocalParameter4dvEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameter4fEXT(uint program, int target, uint index, float x, float y, float z, float w)
		{
			Functions.glNamedProgramLocalParameter4fEXTPtr(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameter4fvEXT(uint program, int target, uint index, float* _params)
		{
			Functions.glNamedProgramLocalParameter4fvEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameterI4iEXT(uint program, int target, uint index, int x, int y, int z, int w)
		{
			Functions.glNamedProgramLocalParameterI4iEXTPtr(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameterI4ivEXT(uint program, int target, uint index, int* _params)
		{
			Functions.glNamedProgramLocalParameterI4ivEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameterI4uiEXT(uint program, int target, uint index, uint x, uint y, uint z, uint w)
		{
			Functions.glNamedProgramLocalParameterI4uiEXTPtr(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameterI4uivEXT(uint program, int target, uint index, uint* _params)
		{
			Functions.glNamedProgramLocalParameterI4uivEXTPtr(program, target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParameters4fvEXT(uint program, int target, uint index, int count, float* _params)
		{
			Functions.glNamedProgramLocalParameters4fvEXTPtr(program, target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParametersI4ivEXT(uint program, int target, uint index, int count, int* _params)
		{
			Functions.glNamedProgramLocalParametersI4ivEXTPtr(program, target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramLocalParametersI4uivEXT(uint program, int target, uint index, int count, uint* _params)
		{
			Functions.glNamedProgramLocalParametersI4uivEXTPtr(program, target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedProgramStringEXT(uint program, int target, int format, int len, IntPtr _string)
		{
			Functions.glNamedProgramStringEXTPtr(program, target, format, len, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorage(uint renderbuffer, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStoragePtr(renderbuffer, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorageEXT(uint renderbuffer, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStorageEXTPtr(renderbuffer, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStorageMultisamplePtr(renderbuffer, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStorageMultisampleAdvancedAMDPtr(renderbuffer, samples, storageSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStorageMultisampleCoverageEXTPtr(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, int internalformat, int width, int height)
		{
			Functions.glNamedRenderbufferStorageMultisampleEXTPtr(renderbuffer, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNamedStringARB(int type, int namelen, byte* name, int stringlen, byte* _string)
		{
			Functions.glNamedStringARBPtr(type, namelen, name, stringlen, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNewList(uint list, int mode)
		{
			Functions.glNewListPtr(list, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glNewObjectBufferATI(int size, IntPtr pointer, int usage)
		{
			return Functions.glNewObjectBufferATIPtr(size, pointer, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3b(sbyte nx, sbyte ny, sbyte nz)
		{
			Functions.glNormal3bPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3bv(sbyte* v)
		{
			Functions.glNormal3bvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3d(double nx, double ny, double nz)
		{
			Functions.glNormal3dPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3dv(double* v)
		{
			Functions.glNormal3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3f(float nx, float ny, float nz)
		{
			Functions.glNormal3fPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glNormal3fVertex3fSUNPtr(nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3fVertex3fvSUN(float* n, float* v)
		{
			Functions.glNormal3fVertex3fvSUNPtr(n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3fv(float* v)
		{
			Functions.glNormal3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3hNV(short nx, short ny, short nz)
		{
			Functions.glNormal3hNVPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3hvNV(short* v)
		{
			Functions.glNormal3hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3i(int nx, int ny, int nz)
		{
			Functions.glNormal3iPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3iv(int* v)
		{
			Functions.glNormal3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3s(short nx, short ny, short nz)
		{
			Functions.glNormal3sPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3sv(short* v)
		{
			Functions.glNormal3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3x(IntPtr nx, IntPtr ny, IntPtr nz)
		{
			Functions.glNormal3xPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3xOES(IntPtr nx, IntPtr ny, IntPtr nz)
		{
			Functions.glNormal3xOESPtr(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormal3xvOES(IntPtr* coords)
		{
			Functions.glNormal3xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalFormatNV(int type, int stride)
		{
			Functions.glNormalFormatNVPtr(type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalP3ui(int type, uint coords)
		{
			Functions.glNormalP3uiPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalP3uiv(int type, uint* coords)
		{
			Functions.glNormalP3uivPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalPointer(int type, int stride, IntPtr pointer)
		{
			Functions.glNormalPointerPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalPointerEXT(int type, int stride, int count, IntPtr pointer)
		{
			Functions.glNormalPointerEXTPtr(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glNormalPointerListIBMPtr(type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalPointervINTEL(int type, IntPtr* pointer)
		{
			Functions.glNormalPointervINTELPtr(type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, sbyte nz)
		{
			Functions.glNormalStream3bATIPtr(stream, nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3bvATI(int stream, sbyte* coords)
		{
			Functions.glNormalStream3bvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3dATI(int stream, double nx, double ny, double nz)
		{
			Functions.glNormalStream3dATIPtr(stream, nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3dvATI(int stream, double* coords)
		{
			Functions.glNormalStream3dvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3fATI(int stream, float nx, float ny, float nz)
		{
			Functions.glNormalStream3fATIPtr(stream, nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3fvATI(int stream, float* coords)
		{
			Functions.glNormalStream3fvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3iATI(int stream, int nx, int ny, int nz)
		{
			Functions.glNormalStream3iATIPtr(stream, nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3ivATI(int stream, int* coords)
		{
			Functions.glNormalStream3ivATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3sATI(int stream, short nx, short ny, short nz)
		{
			Functions.glNormalStream3sATIPtr(stream, nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glNormalStream3svATI(int stream, short* coords)
		{
			Functions.glNormalStream3svATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glObjectLabel(int identifier, uint name, int length, byte* label)
		{
			Functions.glObjectLabelPtr(identifier, name, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glObjectLabelKHR(int identifier, uint name, int length, byte* label)
		{
			Functions.glObjectLabelKHRPtr(identifier, name, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glObjectPtrLabel(IntPtr ptr, int length, byte* label)
		{
			Functions.glObjectPtrLabelPtr(ptr, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glObjectPtrLabelKHR(IntPtr ptr, int length, byte* label)
		{
			Functions.glObjectPtrLabelKHRPtr(ptr, length, label);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glObjectPurgeableAPPLE(int objectType, uint name, int option)
		{
			return Functions.glObjectPurgeableAPPLEPtr(objectType, name, option);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glObjectUnpurgeableAPPLE(int objectType, uint name, int option)
		{
			return Functions.glObjectUnpurgeableAPPLEPtr(objectType, name, option);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			Functions.glOrthoPtr(left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glOrthof(float l, float r, float b, float t, float n, float f)
		{
			Functions.glOrthofPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glOrthofOES(float l, float r, float b, float t, float n, float f)
		{
			Functions.glOrthofOESPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glOrthox(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f)
		{
			Functions.glOrthoxPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glOrthoxOES(IntPtr l, IntPtr r, IntPtr b, IntPtr t, IntPtr n, IntPtr f)
		{
			Functions.glOrthoxOESPtr(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPNTrianglesfATI(int pname, float param)
		{
			Functions.glPNTrianglesfATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPNTrianglesiATI(int pname, int param)
		{
			Functions.glPNTrianglesiATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPassTexCoordATI(uint dst, uint coord, int swizzle)
		{
			Functions.glPassTexCoordATIPtr(dst, coord, swizzle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPassThrough(float token)
		{
			Functions.glPassThroughPtr(token);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPassThroughxOES(IntPtr token)
		{
			Functions.glPassThroughxOESPtr(token);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPatchParameterfv(int pname, float* values)
		{
			Functions.glPatchParameterfvPtr(pname, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPatchParameteri(int pname, int value)
		{
			Functions.glPatchParameteriPtr(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPatchParameteriEXT(int pname, int value)
		{
			Functions.glPatchParameteriEXTPtr(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPatchParameteriOES(int pname, int value)
		{
			Functions.glPatchParameteriOESPtr(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathColorGenNV(int color, int genMode, int colorFormat, float* coeffs)
		{
			Functions.glPathColorGenNVPtr(color, genMode, colorFormat, coeffs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords)
		{
			Functions.glPathCommandsNVPtr(path, numCommands, commands, numCoords, coordType, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathCoordsNV(uint path, int numCoords, int coordType, IntPtr coords)
		{
			Functions.glPathCoordsNVPtr(path, numCoords, coordType, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathCoverDepthFuncNV(int func)
		{
			Functions.glPathCoverDepthFuncNVPtr(func);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathDashArrayNV(uint path, int dashCount, float* dashArray)
		{
			Functions.glPathDashArrayNVPtr(path, dashCount, dashArray);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathFogGenNV(int genMode)
		{
			Functions.glPathFogGenNVPtr(genMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			return Functions.glPathGlyphIndexArrayNVPtr(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glPathGlyphIndexRangeNV(int fontTarget, IntPtr fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount)
		{
			return Functions.glPathGlyphIndexRangeNVPtr(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathGlyphRangeNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, int handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			Functions.glPathGlyphRangeNVPtr(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathGlyphsNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, int type, IntPtr charcodes, int handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			Functions.glPathGlyphsNVPtr(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			return Functions.glPathMemoryGlyphIndexArrayNVPtr(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathParameterfNV(uint path, int pname, float value)
		{
			Functions.glPathParameterfNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathParameterfvNV(uint path, int pname, float* value)
		{
			Functions.glPathParameterfvNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathParameteriNV(uint path, int pname, int value)
		{
			Functions.glPathParameteriNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathParameterivNV(uint path, int pname, int* value)
		{
			Functions.glPathParameterivNVPtr(path, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathStencilDepthOffsetNV(float factor, float units)
		{
			Functions.glPathStencilDepthOffsetNVPtr(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathStencilFuncNV(int func, int _ref, uint mask)
		{
			Functions.glPathStencilFuncNVPtr(func, _ref, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathStringNV(uint path, int format, int length, IntPtr pathString)
		{
			Functions.glPathStringNVPtr(path, format, length, pathString);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords)
		{
			Functions.glPathSubCommandsNVPtr(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathSubCoordsNV(uint path, int coordStart, int numCoords, int coordType, IntPtr coords)
		{
			Functions.glPathSubCoordsNVPtr(path, coordStart, numCoords, coordType, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPathTexGenNV(int texCoordSet, int genMode, int components, float* coeffs)
		{
			Functions.glPathTexGenNVPtr(texCoordSet, genMode, components, coeffs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPauseTransformFeedback()
		{
			Functions.glPauseTransformFeedbackPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPauseTransformFeedbackNV()
		{
			Functions.glPauseTransformFeedbackNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelDataRangeNV(int target, int length, IntPtr pointer)
		{
			Functions.glPixelDataRangeNVPtr(target, length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelMapfv(int map, int mapsize, float* values)
		{
			Functions.glPixelMapfvPtr(map, mapsize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelMapuiv(int map, int mapsize, uint* values)
		{
			Functions.glPixelMapuivPtr(map, mapsize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelMapusv(int map, int mapsize, ushort* values)
		{
			Functions.glPixelMapusvPtr(map, mapsize, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelMapx(int map, int size, IntPtr* values)
		{
			Functions.glPixelMapxPtr(map, size, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelStoref(int pname, float param)
		{
			Functions.glPixelStorefPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelStorei(int pname, int param)
		{
			Functions.glPixelStoreiPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelStorex(int pname, IntPtr param)
		{
			Functions.glPixelStorexPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTexGenParameterfSGIS(int pname, float param)
		{
			Functions.glPixelTexGenParameterfSGISPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTexGenParameterfvSGIS(int pname, float* _params)
		{
			Functions.glPixelTexGenParameterfvSGISPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTexGenParameteriSGIS(int pname, int param)
		{
			Functions.glPixelTexGenParameteriSGISPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTexGenParameterivSGIS(int pname, int* _params)
		{
			Functions.glPixelTexGenParameterivSGISPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTexGenSGIX(int mode)
		{
			Functions.glPixelTexGenSGIXPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransferf(int pname, float param)
		{
			Functions.glPixelTransferfPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransferi(int pname, int param)
		{
			Functions.glPixelTransferiPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransferxOES(int pname, IntPtr param)
		{
			Functions.glPixelTransferxOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransformParameterfEXT(int target, int pname, float param)
		{
			Functions.glPixelTransformParameterfEXTPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransformParameterfvEXT(int target, int pname, float* _params)
		{
			Functions.glPixelTransformParameterfvEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransformParameteriEXT(int target, int pname, int param)
		{
			Functions.glPixelTransformParameteriEXTPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelTransformParameterivEXT(int target, int pname, int* _params)
		{
			Functions.glPixelTransformParameterivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelZoom(float xfactor, float yfactor)
		{
			Functions.glPixelZoomPtr(xfactor, yfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPixelZoomxOES(IntPtr xfactor, IntPtr yfactor)
		{
			Functions.glPixelZoomxOESPtr(xfactor, yfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY)
		{
			return Functions.glPointAlongPathNVPtr(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterf(int pname, float param)
		{
			Functions.glPointParameterfPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfARB(int pname, float param)
		{
			Functions.glPointParameterfARBPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfEXT(int pname, float param)
		{
			Functions.glPointParameterfEXTPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfSGIS(int pname, float param)
		{
			Functions.glPointParameterfSGISPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfv(int pname, float* _params)
		{
			Functions.glPointParameterfvPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfvARB(int pname, float* _params)
		{
			Functions.glPointParameterfvARBPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfvEXT(int pname, float* _params)
		{
			Functions.glPointParameterfvEXTPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterfvSGIS(int pname, float* _params)
		{
			Functions.glPointParameterfvSGISPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameteri(int pname, int param)
		{
			Functions.glPointParameteriPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameteriNV(int pname, int param)
		{
			Functions.glPointParameteriNVPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameteriv(int pname, int* _params)
		{
			Functions.glPointParameterivPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterivNV(int pname, int* _params)
		{
			Functions.glPointParameterivNVPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterx(int pname, IntPtr param)
		{
			Functions.glPointParameterxPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterxOES(int pname, IntPtr param)
		{
			Functions.glPointParameterxOESPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterxv(int pname, IntPtr* _params)
		{
			Functions.glPointParameterxvPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointParameterxvOES(int pname, IntPtr* _params)
		{
			Functions.glPointParameterxvOESPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointSize(float size)
		{
			Functions.glPointSizePtr(size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointSizePointerOES(int type, int stride, IntPtr pointer)
		{
			Functions.glPointSizePointerOESPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointSizex(IntPtr size)
		{
			Functions.glPointSizexPtr(size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPointSizexOES(IntPtr size)
		{
			Functions.glPointSizexOESPtr(size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glPollAsyncSGIX(uint* markerp)
		{
			return Functions.glPollAsyncSGIXPtr(markerp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glPollInstrumentsSGIX(int* marker_p)
		{
			return Functions.glPollInstrumentsSGIXPtr(marker_p);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonMode(int face, int mode)
		{
			Functions.glPolygonModePtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonModeNV(int face, int mode)
		{
			Functions.glPolygonModeNVPtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffset(float factor, float units)
		{
			Functions.glPolygonOffsetPtr(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffsetClamp(float factor, float units, float clamp)
		{
			Functions.glPolygonOffsetClampPtr(factor, units, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffsetClampEXT(float factor, float units, float clamp)
		{
			Functions.glPolygonOffsetClampEXTPtr(factor, units, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffsetEXT(float factor, float bias)
		{
			Functions.glPolygonOffsetEXTPtr(factor, bias);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffsetx(IntPtr factor, IntPtr units)
		{
			Functions.glPolygonOffsetxPtr(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonOffsetxOES(IntPtr factor, IntPtr units)
		{
			Functions.glPolygonOffsetxOESPtr(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPolygonStipple(byte* mask)
		{
			Functions.glPolygonStipplePtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopAttrib()
		{
			Functions.glPopAttribPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopClientAttrib()
		{
			Functions.glPopClientAttribPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopDebugGroup()
		{
			Functions.glPopDebugGroupPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopDebugGroupKHR()
		{
			Functions.glPopDebugGroupKHRPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopGroupMarkerEXT()
		{
			Functions.glPopGroupMarkerEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopMatrix()
		{
			Functions.glPopMatrixPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPopName()
		{
			Functions.glPopNamePtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3)
		{
			Functions.glPresentFrameDualFillNVPtr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1)
		{
			Functions.glPresentFrameKeyedNVPtr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			Functions.glPrimitiveBoundingBoxPtr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			Functions.glPrimitiveBoundingBoxARBPtr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			Functions.glPrimitiveBoundingBoxEXTPtr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			Functions.glPrimitiveBoundingBoxOESPtr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveRestartIndex(uint index)
		{
			Functions.glPrimitiveRestartIndexPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveRestartIndexNV(uint index)
		{
			Functions.glPrimitiveRestartIndexNVPtr(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrimitiveRestartNV()
		{
			Functions.glPrimitiveRestartNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrioritizeTextures(int n, uint* textures, float* priorities)
		{
			Functions.glPrioritizeTexturesPtr(n, textures, priorities);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrioritizeTexturesEXT(int n, uint* textures, float* priorities)
		{
			Functions.glPrioritizeTexturesEXTPtr(n, textures, priorities);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPrioritizeTexturesxOES(int n, uint* textures, IntPtr* priorities)
		{
			Functions.glPrioritizeTexturesxOESPtr(n, textures, priorities);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramBinary(uint program, int binaryFormat, IntPtr binary, int length)
		{
			Functions.glProgramBinaryPtr(program, binaryFormat, binary, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramBinaryOES(uint program, int binaryFormat, IntPtr binary, int length)
		{
			Functions.glProgramBinaryOESPtr(program, binaryFormat, binary, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramBufferParametersIivNV(int target, uint bindingIndex, uint wordIndex, int count, int* _params)
		{
			Functions.glProgramBufferParametersIivNVPtr(target, bindingIndex, wordIndex, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramBufferParametersIuivNV(int target, uint bindingIndex, uint wordIndex, int count, uint* _params)
		{
			Functions.glProgramBufferParametersIuivNVPtr(target, bindingIndex, wordIndex, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramBufferParametersfvNV(int target, uint bindingIndex, uint wordIndex, int count, float* _params)
		{
			Functions.glProgramBufferParametersfvNVPtr(target, bindingIndex, wordIndex, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameter4dARB(int target, uint index, double x, double y, double z, double w)
		{
			Functions.glProgramEnvParameter4dARBPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameter4dvARB(int target, uint index, double* _params)
		{
			Functions.glProgramEnvParameter4dvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameter4fARB(int target, uint index, float x, float y, float z, float w)
		{
			Functions.glProgramEnvParameter4fARBPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameter4fvARB(int target, uint index, float* _params)
		{
			Functions.glProgramEnvParameter4fvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameterI4iNV(int target, uint index, int x, int y, int z, int w)
		{
			Functions.glProgramEnvParameterI4iNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameterI4ivNV(int target, uint index, int* _params)
		{
			Functions.glProgramEnvParameterI4ivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w)
		{
			Functions.glProgramEnvParameterI4uiNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameterI4uivNV(int target, uint index, uint* _params)
		{
			Functions.glProgramEnvParameterI4uivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParameters4fvEXT(int target, uint index, int count, float* _params)
		{
			Functions.glProgramEnvParameters4fvEXTPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParametersI4ivNV(int target, uint index, int count, int* _params)
		{
			Functions.glProgramEnvParametersI4ivNVPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramEnvParametersI4uivNV(int target, uint index, int count, uint* _params)
		{
			Functions.glProgramEnvParametersI4uivNVPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameter4dARB(int target, uint index, double x, double y, double z, double w)
		{
			Functions.glProgramLocalParameter4dARBPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameter4dvARB(int target, uint index, double* _params)
		{
			Functions.glProgramLocalParameter4dvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameter4fARB(int target, uint index, float x, float y, float z, float w)
		{
			Functions.glProgramLocalParameter4fARBPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameter4fvARB(int target, uint index, float* _params)
		{
			Functions.glProgramLocalParameter4fvARBPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameterI4iNV(int target, uint index, int x, int y, int z, int w)
		{
			Functions.glProgramLocalParameterI4iNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameterI4ivNV(int target, uint index, int* _params)
		{
			Functions.glProgramLocalParameterI4ivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w)
		{
			Functions.glProgramLocalParameterI4uiNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameterI4uivNV(int target, uint index, uint* _params)
		{
			Functions.glProgramLocalParameterI4uivNVPtr(target, index, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParameters4fvEXT(int target, uint index, int count, float* _params)
		{
			Functions.glProgramLocalParameters4fvEXTPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParametersI4ivNV(int target, uint index, int count, int* _params)
		{
			Functions.glProgramLocalParametersI4ivNVPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramLocalParametersI4uivNV(int target, uint index, int count, uint* _params)
		{
			Functions.glProgramLocalParametersI4uivNVPtr(target, index, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w)
		{
			Functions.glProgramNamedParameter4dNVPtr(id, len, name, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v)
		{
			Functions.glProgramNamedParameter4dvNVPtr(id, len, name, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w)
		{
			Functions.glProgramNamedParameter4fNVPtr(id, len, name, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v)
		{
			Functions.glProgramNamedParameter4fvNVPtr(id, len, name, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameter4dNV(int target, uint index, double x, double y, double z, double w)
		{
			Functions.glProgramParameter4dNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameter4dvNV(int target, uint index, double* v)
		{
			Functions.glProgramParameter4dvNVPtr(target, index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameter4fNV(int target, uint index, float x, float y, float z, float w)
		{
			Functions.glProgramParameter4fNVPtr(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameter4fvNV(int target, uint index, float* v)
		{
			Functions.glProgramParameter4fvNVPtr(target, index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameteri(uint program, int pname, int value)
		{
			Functions.glProgramParameteriPtr(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameteriARB(uint program, int pname, int value)
		{
			Functions.glProgramParameteriARBPtr(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameteriEXT(uint program, int pname, int value)
		{
			Functions.glProgramParameteriEXTPtr(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameters4dvNV(int target, uint index, int count, double* v)
		{
			Functions.glProgramParameters4dvNVPtr(target, index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramParameters4fvNV(int target, uint index, int count, float* v)
		{
			Functions.glProgramParameters4fvNVPtr(target, index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float* coeffs)
		{
			Functions.glProgramPathFragmentInputGenNVPtr(program, location, genMode, components, coeffs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramStringARB(int target, int format, int len, IntPtr _string)
		{
			Functions.glProgramStringARBPtr(target, format, len, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramSubroutineParametersuivNV(int target, int count, uint* _params)
		{
			Functions.glProgramSubroutineParametersuivNVPtr(target, count, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1d(uint program, int location, double v0)
		{
			Functions.glProgramUniform1dPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1dEXT(uint program, int location, double x)
		{
			Functions.glProgramUniform1dEXTPtr(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1dv(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform1dvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1dvEXT(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform1dvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1f(uint program, int location, float v0)
		{
			Functions.glProgramUniform1fPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1fEXT(uint program, int location, float v0)
		{
			Functions.glProgramUniform1fEXTPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1fv(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform1fvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1fvEXT(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform1fvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1i(uint program, int location, int v0)
		{
			Functions.glProgramUniform1iPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1i64ARB(uint program, int location, long x)
		{
			Functions.glProgramUniform1i64ARBPtr(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1i64NV(uint program, int location, long x)
		{
			Functions.glProgramUniform1i64NVPtr(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1i64vARB(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform1i64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1i64vNV(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform1i64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1iEXT(uint program, int location, int v0)
		{
			Functions.glProgramUniform1iEXTPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1iv(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform1ivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ivEXT(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform1ivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ui(uint program, int location, uint v0)
		{
			Functions.glProgramUniform1uiPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ui64ARB(uint program, int location, ulong x)
		{
			Functions.glProgramUniform1ui64ARBPtr(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ui64NV(uint program, int location, ulong x)
		{
			Functions.glProgramUniform1ui64NVPtr(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform1ui64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform1ui64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1uiEXT(uint program, int location, uint v0)
		{
			Functions.glProgramUniform1uiEXTPtr(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1uiv(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform1uivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform1uivEXT(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform1uivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2d(uint program, int location, double v0, double v1)
		{
			Functions.glProgramUniform2dPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2dEXT(uint program, int location, double x, double y)
		{
			Functions.glProgramUniform2dEXTPtr(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2dv(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform2dvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2dvEXT(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform2dvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2f(uint program, int location, float v0, float v1)
		{
			Functions.glProgramUniform2fPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2fEXT(uint program, int location, float v0, float v1)
		{
			Functions.glProgramUniform2fEXTPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2fv(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform2fvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2fvEXT(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform2fvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2i(uint program, int location, int v0, int v1)
		{
			Functions.glProgramUniform2iPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2i64ARB(uint program, int location, long x, long y)
		{
			Functions.glProgramUniform2i64ARBPtr(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2i64NV(uint program, int location, long x, long y)
		{
			Functions.glProgramUniform2i64NVPtr(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2i64vARB(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform2i64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2i64vNV(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform2i64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2iEXT(uint program, int location, int v0, int v1)
		{
			Functions.glProgramUniform2iEXTPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2iv(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform2ivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ivEXT(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform2ivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ui(uint program, int location, uint v0, uint v1)
		{
			Functions.glProgramUniform2uiPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y)
		{
			Functions.glProgramUniform2ui64ARBPtr(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y)
		{
			Functions.glProgramUniform2ui64NVPtr(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform2ui64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform2ui64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1)
		{
			Functions.glProgramUniform2uiEXTPtr(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2uiv(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform2uivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform2uivEXT(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform2uivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3d(uint program, int location, double v0, double v1, double v2)
		{
			Functions.glProgramUniform3dPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3dEXT(uint program, int location, double x, double y, double z)
		{
			Functions.glProgramUniform3dEXTPtr(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3dv(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform3dvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3dvEXT(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform3dvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3f(uint program, int location, float v0, float v1, float v2)
		{
			Functions.glProgramUniform3fPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2)
		{
			Functions.glProgramUniform3fEXTPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3fv(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform3fvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3fvEXT(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform3fvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3i(uint program, int location, int v0, int v1, int v2)
		{
			Functions.glProgramUniform3iPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z)
		{
			Functions.glProgramUniform3i64ARBPtr(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3i64NV(uint program, int location, long x, long y, long z)
		{
			Functions.glProgramUniform3i64NVPtr(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3i64vARB(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform3i64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3i64vNV(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform3i64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2)
		{
			Functions.glProgramUniform3iEXTPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3iv(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform3ivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ivEXT(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform3ivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
		{
			Functions.glProgramUniform3uiPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z)
		{
			Functions.glProgramUniform3ui64ARBPtr(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z)
		{
			Functions.glProgramUniform3ui64NVPtr(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform3ui64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform3ui64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2)
		{
			Functions.glProgramUniform3uiEXTPtr(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3uiv(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform3uivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform3uivEXT(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform3uivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
		{
			Functions.glProgramUniform4dPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w)
		{
			Functions.glProgramUniform4dEXTPtr(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4dv(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform4dvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4dvEXT(uint program, int location, int count, double* value)
		{
			Functions.glProgramUniform4dvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
		{
			Functions.glProgramUniform4fPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3)
		{
			Functions.glProgramUniform4fEXTPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4fv(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform4fvPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4fvEXT(uint program, int location, int count, float* value)
		{
			Functions.glProgramUniform4fvEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
		{
			Functions.glProgramUniform4iPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w)
		{
			Functions.glProgramUniform4i64ARBPtr(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w)
		{
			Functions.glProgramUniform4i64NVPtr(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4i64vARB(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform4i64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4i64vNV(uint program, int location, int count, long* value)
		{
			Functions.glProgramUniform4i64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3)
		{
			Functions.glProgramUniform4iEXTPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4iv(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform4ivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ivEXT(uint program, int location, int count, int* value)
		{
			Functions.glProgramUniform4ivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			Functions.glProgramUniform4uiPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			Functions.glProgramUniform4ui64ARBPtr(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			Functions.glProgramUniform4ui64NVPtr(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform4ui64vARBPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniform4ui64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			Functions.glProgramUniform4uiEXTPtr(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4uiv(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform4uivPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniform4uivEXT(uint program, int location, int count, uint* value)
		{
			Functions.glProgramUniform4uivEXTPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64ARB(uint program, int location, ulong value)
		{
			Functions.glProgramUniformHandleui64ARBPtr(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64IMG(uint program, int location, ulong value)
		{
			Functions.glProgramUniformHandleui64IMGPtr(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64NV(uint program, int location, ulong value)
		{
			Functions.glProgramUniformHandleui64NVPtr(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values)
		{
			Functions.glProgramUniformHandleui64vARBPtr(program, location, count, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong* values)
		{
			Functions.glProgramUniformHandleui64vIMGPtr(program, location, count, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values)
		{
			Functions.glProgramUniformHandleui64vNVPtr(program, location, count, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2x3dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2x3dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2x3fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2x3fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2x4dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix2x4dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2x4fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix2x4fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3x2dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3x2dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3x2fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3x2fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3x4dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix3x4dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3x4fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix3x4fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4x2dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4x2dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4x2fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4x2fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4x3dvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double* value)
		{
			Functions.glProgramUniformMatrix4x3dvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4x3fvPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float* value)
		{
			Functions.glProgramUniformMatrix4x3fvEXTPtr(program, location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformui64NV(uint program, int location, ulong value)
		{
			Functions.glProgramUniformui64NVPtr(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramUniformui64vNV(uint program, int location, int count, ulong* value)
		{
			Functions.glProgramUniformui64vNVPtr(program, location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProgramVertexLimitNV(int target, int limit)
		{
			Functions.glProgramVertexLimitNVPtr(target, limit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProvokingVertex(int mode)
		{
			Functions.glProvokingVertexPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glProvokingVertexEXT(int mode)
		{
			Functions.glProvokingVertexEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushAttrib(uint mask)
		{
			Functions.glPushAttribPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushClientAttrib(uint mask)
		{
			Functions.glPushClientAttribPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushClientAttribDefaultEXT(uint mask)
		{
			Functions.glPushClientAttribDefaultEXTPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushDebugGroup(int source, uint id, int length, byte* message)
		{
			Functions.glPushDebugGroupPtr(source, id, length, message);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushDebugGroupKHR(int source, uint id, int length, byte* message)
		{
			Functions.glPushDebugGroupKHRPtr(source, id, length, message);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushGroupMarkerEXT(int length, byte* marker)
		{
			Functions.glPushGroupMarkerEXTPtr(length, marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushMatrix()
		{
			Functions.glPushMatrixPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glPushName(uint name)
		{
			Functions.glPushNamePtr(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glQueryCounter(uint id, int target)
		{
			Functions.glQueryCounterPtr(id, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glQueryCounterEXT(uint id, int target)
		{
			Functions.glQueryCounterEXTPtr(id, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint glQueryMatrixxOES(IntPtr* mantissa, int* exponent)
		{
			return Functions.glQueryMatrixxOESPtr(mantissa, exponent);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glQueryObjectParameteruiAMD(int target, uint id, int pname, uint param)
		{
			Functions.glQueryObjectParameteruiAMDPtr(target, id, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glQueryResourceNV(int queryType, int tagId, uint bufSize, int* buffer)
		{
			return Functions.glQueryResourceNVPtr(queryType, tagId, bufSize, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glQueryResourceTagNV(int tagId, byte* tagString)
		{
			Functions.glQueryResourceTagNVPtr(tagId, tagString);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2d(double x, double y)
		{
			Functions.glRasterPos2dPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2dv(double* v)
		{
			Functions.glRasterPos2dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2f(float x, float y)
		{
			Functions.glRasterPos2fPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2fv(float* v)
		{
			Functions.glRasterPos2fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2i(int x, int y)
		{
			Functions.glRasterPos2iPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2iv(int* v)
		{
			Functions.glRasterPos2ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2s(short x, short y)
		{
			Functions.glRasterPos2sPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2sv(short* v)
		{
			Functions.glRasterPos2svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2xOES(IntPtr x, IntPtr y)
		{
			Functions.glRasterPos2xOESPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos2xvOES(IntPtr* coords)
		{
			Functions.glRasterPos2xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3d(double x, double y, double z)
		{
			Functions.glRasterPos3dPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3dv(double* v)
		{
			Functions.glRasterPos3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3f(float x, float y, float z)
		{
			Functions.glRasterPos3fPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3fv(float* v)
		{
			Functions.glRasterPos3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3i(int x, int y, int z)
		{
			Functions.glRasterPos3iPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3iv(int* v)
		{
			Functions.glRasterPos3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3s(short x, short y, short z)
		{
			Functions.glRasterPos3sPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3sv(short* v)
		{
			Functions.glRasterPos3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3xOES(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glRasterPos3xOESPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos3xvOES(IntPtr* coords)
		{
			Functions.glRasterPos3xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4d(double x, double y, double z, double w)
		{
			Functions.glRasterPos4dPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4dv(double* v)
		{
			Functions.glRasterPos4dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4f(float x, float y, float z, float w)
		{
			Functions.glRasterPos4fPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4fv(float* v)
		{
			Functions.glRasterPos4fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4i(int x, int y, int z, int w)
		{
			Functions.glRasterPos4iPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4iv(int* v)
		{
			Functions.glRasterPos4ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4s(short x, short y, short z, short w)
		{
			Functions.glRasterPos4sPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4sv(short* v)
		{
			Functions.glRasterPos4svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4xOES(IntPtr x, IntPtr y, IntPtr z, IntPtr w)
		{
			Functions.glRasterPos4xOESPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterPos4xvOES(IntPtr* coords)
		{
			Functions.glRasterPos4xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRasterSamplesEXT(uint samples, bool fixedsamplelocations)
		{
			Functions.glRasterSamplesEXTPtr(samples, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadBuffer(int src)
		{
			Functions.glReadBufferPtr(src);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadBufferIndexedEXT(int src, int index)
		{
			Functions.glReadBufferIndexedEXTPtr(src, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadBufferNV(int mode)
		{
			Functions.glReadBufferNVPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadInstrumentsSGIX(int marker)
		{
			Functions.glReadInstrumentsSGIXPtr(marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glReadPixelsPtr(x, y, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data)
		{
			Functions.glReadnPixelsPtr(x, y, width, height, format, type, bufSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadnPixelsARB(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data)
		{
			Functions.glReadnPixelsARBPtr(x, y, width, height, format, type, bufSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadnPixelsEXT(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data)
		{
			Functions.glReadnPixelsEXTPtr(x, y, width, height, format, type, bufSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReadnPixelsKHR(int x, int y, int width, int height, int format, int type, int bufSize, IntPtr data)
		{
			Functions.glReadnPixelsKHRPtr(x, y, width, height, format, type, bufSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glReleaseKeyedMutexWin32EXT(uint memory, ulong key)
		{
			return Functions.glReleaseKeyedMutexWin32EXTPtr(memory, key);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectd(double x1, double y1, double x2, double y2)
		{
			Functions.glRectdPtr(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectdv(double* v1, double* v2)
		{
			Functions.glRectdvPtr(v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectf(float x1, float y1, float x2, float y2)
		{
			Functions.glRectfPtr(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectfv(float* v1, float* v2)
		{
			Functions.glRectfvPtr(v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRecti(int x1, int y1, int x2, int y2)
		{
			Functions.glRectiPtr(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectiv(int* v1, int* v2)
		{
			Functions.glRectivPtr(v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRects(short x1, short y1, short x2, short y2)
		{
			Functions.glRectsPtr(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectsv(short* v1, short* v2)
		{
			Functions.glRectsvPtr(v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectxOES(IntPtr x1, IntPtr y1, IntPtr x2, IntPtr y2)
		{
			Functions.glRectxOESPtr(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRectxvOES(IntPtr* v1, IntPtr* v2)
		{
			Functions.glRectxvOESPtr(v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReferencePlaneSGIX(double* equation)
		{
			Functions.glReferencePlaneSGIXPtr(equation);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReleaseShaderCompiler()
		{
			Functions.glReleaseShaderCompilerPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderGpuMaskNV(uint mask)
		{
			Functions.glRenderGpuMaskNVPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glRenderMode(int mode)
		{
			return Functions.glRenderModePtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorage(int target, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStoragePtr(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageEXT(int target, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageEXTPtr(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisamplePtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleANGLEPtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleAPPLEPtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleAdvancedAMD(int target, int samples, int storageSamples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleAdvancedAMDPtr(target, samples, storageSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleCoverageNVPtr(target, coverageSamples, colorSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleEXTPtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleIMGPtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageMultisampleNV(int target, int samples, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageMultisampleNVPtr(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRenderbufferStorageOES(int target, int internalformat, int width, int height)
		{
			Functions.glRenderbufferStorageOESPtr(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodePointerSUN(int type, int stride, IntPtr* pointer)
		{
			Functions.glReplacementCodePointerSUNPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeubSUN(byte code)
		{
			Functions.glReplacementCodeubSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeubvSUN(byte* code)
		{
			Functions.glReplacementCodeubvSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z)
		{
			Functions.glReplacementCodeuiColor3fVertex3fSUNPtr(rc, r, g, b, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v)
		{
			Functions.glReplacementCodeuiColor3fVertex3fvSUNPtr(rc, c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr(rc, r, g, b, a, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v)
		{
			Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr(rc, c, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
		{
			Functions.glReplacementCodeuiColor4ubVertex3fSUNPtr(rc, r, g, b, a, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v)
		{
			Functions.glReplacementCodeuiColor4ubVertex3fvSUNPtr(rc, c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glReplacementCodeuiNormal3fVertex3fSUNPtr(rc, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v)
		{
			Functions.glReplacementCodeuiNormal3fVertex3fvSUNPtr(rc, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiSUN(uint code)
		{
			Functions.glReplacementCodeuiSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v)
		{
			Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr(rc, tc, c, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr(rc, s, t, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v)
		{
			Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr(rc, tc, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z)
		{
			Functions.glReplacementCodeuiTexCoord2fVertex3fSUNPtr(rc, s, t, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v)
		{
			Functions.glReplacementCodeuiTexCoord2fVertex3fvSUNPtr(rc, tc, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z)
		{
			Functions.glReplacementCodeuiVertex3fSUNPtr(rc, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v)
		{
			Functions.glReplacementCodeuiVertex3fvSUNPtr(rc, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeuivSUN(uint* code)
		{
			Functions.glReplacementCodeuivSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeusSUN(ushort code)
		{
			Functions.glReplacementCodeusSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glReplacementCodeusvSUN(ushort* code)
		{
			Functions.glReplacementCodeusvSUNPtr(code);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRequestResidentProgramsNV(int n, uint* programs)
		{
			Functions.glRequestResidentProgramsNVPtr(n, programs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResetHistogram(int target)
		{
			Functions.glResetHistogramPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResetHistogramEXT(int target)
		{
			Functions.glResetHistogramEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResetMemoryObjectParameterNV(uint memory, int pname)
		{
			Functions.glResetMemoryObjectParameterNVPtr(memory, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResetMinmax(int target)
		{
			Functions.glResetMinmaxPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResetMinmaxEXT(int target)
		{
			Functions.glResetMinmaxEXTPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResizeBuffersMESA()
		{
			Functions.glResizeBuffersMESAPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResolveDepthValuesNV()
		{
			Functions.glResolveDepthValuesNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResolveMultisampleFramebufferAPPLE()
		{
			Functions.glResolveMultisampleFramebufferAPPLEPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResumeTransformFeedback()
		{
			Functions.glResumeTransformFeedbackPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glResumeTransformFeedbackNV()
		{
			Functions.glResumeTransformFeedbackNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRotated(double angle, double x, double y, double z)
		{
			Functions.glRotatedPtr(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRotatef(float angle, float x, float y, float z)
		{
			Functions.glRotatefPtr(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRotatex(IntPtr angle, IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glRotatexPtr(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glRotatexOES(IntPtr angle, IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glRotatexOESPtr(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleCoverage(float value, bool invert)
		{
			Functions.glSampleCoveragePtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleCoverageARB(float value, bool invert)
		{
			Functions.glSampleCoverageARBPtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleCoveragex(int value, bool invert)
		{
			Functions.glSampleCoveragexPtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleCoveragexOES(int value, bool invert)
		{
			Functions.glSampleCoveragexOESPtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleMapATI(uint dst, uint interp, int swizzle)
		{
			Functions.glSampleMapATIPtr(dst, interp, swizzle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleMaskEXT(float value, bool invert)
		{
			Functions.glSampleMaskEXTPtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleMaskIndexedNV(uint index, uint mask)
		{
			Functions.glSampleMaskIndexedNVPtr(index, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleMaskSGIS(float value, bool invert)
		{
			Functions.glSampleMaskSGISPtr(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSampleMaski(uint maskNumber, uint mask)
		{
			Functions.glSampleMaskiPtr(maskNumber, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplePatternEXT(int pattern)
		{
			Functions.glSamplePatternEXTPtr(pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplePatternSGIS(int pattern)
		{
			Functions.glSamplePatternSGISPtr(pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIiv(uint sampler, int pname, int* param)
		{
			Functions.glSamplerParameterIivPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIivEXT(uint sampler, int pname, int* param)
		{
			Functions.glSamplerParameterIivEXTPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIivOES(uint sampler, int pname, int* param)
		{
			Functions.glSamplerParameterIivOESPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIuiv(uint sampler, int pname, uint* param)
		{
			Functions.glSamplerParameterIuivPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIuivEXT(uint sampler, int pname, uint* param)
		{
			Functions.glSamplerParameterIuivEXTPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterIuivOES(uint sampler, int pname, uint* param)
		{
			Functions.glSamplerParameterIuivOESPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterf(uint sampler, int pname, float param)
		{
			Functions.glSamplerParameterfPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameterfv(uint sampler, int pname, float* param)
		{
			Functions.glSamplerParameterfvPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameteri(uint sampler, int pname, int param)
		{
			Functions.glSamplerParameteriPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSamplerParameteriv(uint sampler, int pname, int* param)
		{
			Functions.glSamplerParameterivPtr(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScaled(double x, double y, double z)
		{
			Functions.glScaledPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScalef(float x, float y, float z)
		{
			Functions.glScalefPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScalex(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glScalexPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScalexOES(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glScalexOESPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissor(int x, int y, int width, int height)
		{
			Functions.glScissorPtr(x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorArrayv(uint first, int count, int* v)
		{
			Functions.glScissorArrayvPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorArrayvNV(uint first, int count, int* v)
		{
			Functions.glScissorArrayvNVPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorArrayvOES(uint first, int count, int* v)
		{
			Functions.glScissorArrayvOESPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorExclusiveArrayvNV(uint first, int count, int* v)
		{
			Functions.glScissorExclusiveArrayvNVPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorExclusiveNV(int x, int y, int width, int height)
		{
			Functions.glScissorExclusiveNVPtr(x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexed(uint index, int left, int bottom, int width, int height)
		{
			Functions.glScissorIndexedPtr(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexedNV(uint index, int left, int bottom, int width, int height)
		{
			Functions.glScissorIndexedNVPtr(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexedOES(uint index, int left, int bottom, int width, int height)
		{
			Functions.glScissorIndexedOESPtr(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexedv(uint index, int* v)
		{
			Functions.glScissorIndexedvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexedvNV(uint index, int* v)
		{
			Functions.glScissorIndexedvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glScissorIndexedvOES(uint index, int* v)
		{
			Functions.glScissorIndexedvOESPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue)
		{
			Functions.glSecondaryColor3bPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue)
		{
			Functions.glSecondaryColor3bEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3bv(sbyte* v)
		{
			Functions.glSecondaryColor3bvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3bvEXT(sbyte* v)
		{
			Functions.glSecondaryColor3bvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3d(double red, double green, double blue)
		{
			Functions.glSecondaryColor3dPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3dEXT(double red, double green, double blue)
		{
			Functions.glSecondaryColor3dEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3dv(double* v)
		{
			Functions.glSecondaryColor3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3dvEXT(double* v)
		{
			Functions.glSecondaryColor3dvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3f(float red, float green, float blue)
		{
			Functions.glSecondaryColor3fPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3fEXT(float red, float green, float blue)
		{
			Functions.glSecondaryColor3fEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3fv(float* v)
		{
			Functions.glSecondaryColor3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3fvEXT(float* v)
		{
			Functions.glSecondaryColor3fvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3hNV(short red, short green, short blue)
		{
			Functions.glSecondaryColor3hNVPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3hvNV(short* v)
		{
			Functions.glSecondaryColor3hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3i(int red, int green, int blue)
		{
			Functions.glSecondaryColor3iPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3iEXT(int red, int green, int blue)
		{
			Functions.glSecondaryColor3iEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3iv(int* v)
		{
			Functions.glSecondaryColor3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ivEXT(int* v)
		{
			Functions.glSecondaryColor3ivEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3s(short red, short green, short blue)
		{
			Functions.glSecondaryColor3sPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3sEXT(short red, short green, short blue)
		{
			Functions.glSecondaryColor3sEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3sv(short* v)
		{
			Functions.glSecondaryColor3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3svEXT(short* v)
		{
			Functions.glSecondaryColor3svEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ub(byte red, byte green, byte blue)
		{
			Functions.glSecondaryColor3ubPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ubEXT(byte red, byte green, byte blue)
		{
			Functions.glSecondaryColor3ubEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ubv(byte* v)
		{
			Functions.glSecondaryColor3ubvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ubvEXT(byte* v)
		{
			Functions.glSecondaryColor3ubvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3ui(uint red, uint green, uint blue)
		{
			Functions.glSecondaryColor3uiPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3uiEXT(uint red, uint green, uint blue)
		{
			Functions.glSecondaryColor3uiEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3uiv(uint* v)
		{
			Functions.glSecondaryColor3uivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3uivEXT(uint* v)
		{
			Functions.glSecondaryColor3uivEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3us(ushort red, ushort green, ushort blue)
		{
			Functions.glSecondaryColor3usPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue)
		{
			Functions.glSecondaryColor3usEXTPtr(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3usv(ushort* v)
		{
			Functions.glSecondaryColor3usvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColor3usvEXT(ushort* v)
		{
			Functions.glSecondaryColor3usvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorFormatNV(int size, int type, int stride)
		{
			Functions.glSecondaryColorFormatNVPtr(size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorP3ui(int type, uint color)
		{
			Functions.glSecondaryColorP3uiPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorP3uiv(int type, uint* color)
		{
			Functions.glSecondaryColorP3uivPtr(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorPointer(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glSecondaryColorPointerPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorPointerEXT(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glSecondaryColorPointerEXTPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glSecondaryColorPointerListIBMPtr(size, type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSelectBuffer(int size, uint* buffer)
		{
			Functions.glSelectBufferPtr(size, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint* counterList)
		{
			Functions.glSelectPerfMonitorCountersAMDPtr(monitor, enable, group, numCounters, counterList);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* _params)
		{
			Functions.glSemaphoreParameterui64vEXTPtr(semaphore, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)
		{
			Functions.glSeparableFilter2DPtr(target, internalformat, width, height, format, type, row, column);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSeparableFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)
		{
			Functions.glSeparableFilter2DEXTPtr(target, internalformat, width, height, format, type, row, column);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetFenceAPPLE(uint fence)
		{
			Functions.glSetFenceAPPLEPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetFenceNV(uint fence, int condition)
		{
			Functions.glSetFenceNVPtr(fence, condition);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetFragmentShaderConstantATI(uint dst, float* value)
		{
			Functions.glSetFragmentShaderConstantATIPtr(dst, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetInvariantEXT(uint id, int type, IntPtr addr)
		{
			Functions.glSetInvariantEXTPtr(id, type, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetLocalConstantEXT(uint id, int type, IntPtr addr)
		{
			Functions.glSetLocalConstantEXTPtr(id, type, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSetMultisamplefvAMD(int pname, uint index, float* val)
		{
			Functions.glSetMultisamplefvAMDPtr(pname, index, val);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShadeModel(int mode)
		{
			Functions.glShadeModelPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderBinary(int count, uint* shaders, int binaryformat, IntPtr binary, int length)
		{
			Functions.glShaderBinaryPtr(count, shaders, binaryformat, binary, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderOp1EXT(int op, uint res, uint arg1)
		{
			Functions.glShaderOp1EXTPtr(op, res, arg1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderOp2EXT(int op, uint res, uint arg1, uint arg2)
		{
			Functions.glShaderOp2EXTPtr(op, res, arg1, arg2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, uint arg3)
		{
			Functions.glShaderOp3EXTPtr(op, res, arg1, arg2, arg3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderSource(uint shader, int count, byte** strings, int* length)
		{
			Functions.glShaderSourcePtr(shader, count, strings, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderSourceARB(uint shaderObj, int count, byte** _string, int* length)
		{
			Functions.glShaderSourceARBPtr(shaderObj, count, _string, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
		{
			Functions.glShaderStorageBlockBindingPtr(program, storageBlockIndex, storageBlockBinding);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShadingRateImageBarrierNV(bool synchronize)
		{
			Functions.glShadingRateImageBarrierNVPtr(synchronize);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShadingRateImagePaletteNV(uint viewport, uint first, int count, uint* rates)
		{
			Functions.glShadingRateImagePaletteNVPtr(viewport, first, count, rates);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShadingRateSampleOrderNV(int order)
		{
			Functions.glShadingRateSampleOrderNVPtr(order);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glShadingRateSampleOrderCustomNV(int rate, uint samples, int* locations)
		{
			Functions.glShadingRateSampleOrderCustomNVPtr(rate, samples, locations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSharpenTexFuncSGIS(int target, int n, float* points)
		{
			Functions.glSharpenTexFuncSGISPtr(target, n, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts)
		{
			Functions.glSignalSemaphoreEXTPtr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpecializeShader(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			Functions.glSpecializeShaderPtr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			Functions.glSpecializeShaderARBPtr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpriteParameterfSGIX(int pname, float param)
		{
			Functions.glSpriteParameterfSGIXPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpriteParameterfvSGIX(int pname, float* _params)
		{
			Functions.glSpriteParameterfvSGIXPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpriteParameteriSGIX(int pname, int param)
		{
			Functions.glSpriteParameteriSGIXPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSpriteParameterivSGIX(int pname, int* _params)
		{
			Functions.glSpriteParameterivSGIXPtr(pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStartInstrumentsSGIX()
		{
			Functions.glStartInstrumentsSGIXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask)
		{
			Functions.glStartTilingQCOMPtr(x, y, width, height, preserveMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStateCaptureNV(uint state, int mode)
		{
			Functions.glStateCaptureNVPtr(state, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag)
		{
			Functions.glStencilClearTagEXTPtr(stencilTagBits, stencilClearTag);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int transformType, float* transformValues)
		{
			Functions.glStencilFillPathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilFillPathNV(uint path, int fillMode, uint mask)
		{
			Functions.glStencilFillPathNVPtr(path, fillMode, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilFunc(int func, int _ref, uint mask)
		{
			Functions.glStencilFuncPtr(func, _ref, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilFuncSeparate(int face, int func, int _ref, uint mask)
		{
			Functions.glStencilFuncSeparatePtr(face, func, _ref, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilFuncSeparateATI(int frontfunc, int backfunc, int _ref, uint mask)
		{
			Functions.glStencilFuncSeparateATIPtr(frontfunc, backfunc, _ref, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilMask(uint mask)
		{
			Functions.glStencilMaskPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilMaskSeparate(int face, uint mask)
		{
			Functions.glStencilMaskSeparatePtr(face, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilOp(int fail, int zfail, int zpass)
		{
			Functions.glStencilOpPtr(fail, zfail, zpass);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass)
		{
			Functions.glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass)
		{
			Functions.glStencilOpSeparateATIPtr(face, sfail, dpfail, dppass);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilOpValueAMD(int face, uint value)
		{
			Functions.glStencilOpValueAMDPtr(face, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int transformType, float* transformValues)
		{
			Functions.glStencilStrokePathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilStrokePathNV(uint path, int reference, uint mask)
		{
			Functions.glStencilStrokePathNVPtr(path, reference, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float* transformValues)
		{
			Functions.glStencilThenCoverFillPathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode)
		{
			Functions.glStencilThenCoverFillPathNVPtr(path, fillMode, mask, coverMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float* transformValues)
		{
			Functions.glStencilThenCoverStrokePathInstancedNVPtr(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode)
		{
			Functions.glStencilThenCoverStrokePathNVPtr(path, reference, mask, coverMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStopInstrumentsSGIX(int marker)
		{
			Functions.glStopInstrumentsSGIXPtr(marker);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glStringMarkerGREMEDY(int len, IntPtr _string)
		{
			Functions.glStringMarkerGREMEDYPtr(len, _string);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSubpixelPrecisionBiasNV(uint xbits, uint ybits)
		{
			Functions.glSubpixelPrecisionBiasNVPtr(xbits, ybits);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSwizzleEXT(uint res, uint _in, int outX, int outY, int outZ, int outW)
		{
			Functions.glSwizzleEXTPtr(res, _in, outX, outY, outZ, outW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSyncTextureINTEL(uint texture)
		{
			Functions.glSyncTextureINTELPtr(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTagSampleBufferSGIX()
		{
			Functions.glTagSampleBufferSGIXPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz)
		{
			Functions.glTangent3bEXTPtr(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3bvEXT(sbyte* v)
		{
			Functions.glTangent3bvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3dEXT(double tx, double ty, double tz)
		{
			Functions.glTangent3dEXTPtr(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3dvEXT(double* v)
		{
			Functions.glTangent3dvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3fEXT(float tx, float ty, float tz)
		{
			Functions.glTangent3fEXTPtr(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3fvEXT(float* v)
		{
			Functions.glTangent3fvEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3iEXT(int tx, int ty, int tz)
		{
			Functions.glTangent3iEXTPtr(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3ivEXT(int* v)
		{
			Functions.glTangent3ivEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3sEXT(short tx, short ty, short tz)
		{
			Functions.glTangent3sEXTPtr(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangent3svEXT(short* v)
		{
			Functions.glTangent3svEXTPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTangentPointerEXT(int type, int stride, IntPtr pointer)
		{
			Functions.glTangentPointerEXTPtr(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTbufferMask3DFX(uint mask)
		{
			Functions.glTbufferMask3DFXPtr(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTessellationFactorAMD(float factor)
		{
			Functions.glTessellationFactorAMDPtr(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTessellationModeAMD(int mode)
		{
			Functions.glTessellationModeAMDPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glTestFenceAPPLE(uint fence)
		{
			return Functions.glTestFenceAPPLEPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glTestFenceNV(uint fence)
		{
			return Functions.glTestFenceNVPtr(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glTestObjectAPPLE(int _object, uint name)
		{
			return Functions.glTestObjectAPPLEPtr(_object, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexAttachMemoryNV(int target, uint memory, ulong offset)
		{
			Functions.glTexAttachMemoryNVPtr(target, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBuffer(int target, int internalformat, uint buffer)
		{
			Functions.glTexBufferPtr(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferARB(int target, int internalformat, uint buffer)
		{
			Functions.glTexBufferARBPtr(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferEXT(int target, int internalformat, uint buffer)
		{
			Functions.glTexBufferEXTPtr(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferOES(int target, int internalformat, uint buffer)
		{
			Functions.glTexBufferOESPtr(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferRange(int target, int internalformat, uint buffer, uint offset, uint size)
		{
			Functions.glTexBufferRangePtr(target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferRangeEXT(int target, int internalformat, uint buffer, uint offset, uint size)
		{
			Functions.glTexBufferRangeEXTPtr(target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBufferRangeOES(int target, int internalformat, uint buffer, uint offset, uint size)
		{
			Functions.glTexBufferRangeOESPtr(target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBumpParameterfvATI(int pname, float* param)
		{
			Functions.glTexBumpParameterfvATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexBumpParameterivATI(int pname, int* param)
		{
			Functions.glTexBumpParameterivATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1bOES(sbyte s)
		{
			Functions.glTexCoord1bOESPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1bvOES(sbyte* coords)
		{
			Functions.glTexCoord1bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1d(double s)
		{
			Functions.glTexCoord1dPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1dv(double* v)
		{
			Functions.glTexCoord1dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1f(float s)
		{
			Functions.glTexCoord1fPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1fv(float* v)
		{
			Functions.glTexCoord1fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1hNV(short s)
		{
			Functions.glTexCoord1hNVPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1hvNV(short* v)
		{
			Functions.glTexCoord1hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1i(int s)
		{
			Functions.glTexCoord1iPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1iv(int* v)
		{
			Functions.glTexCoord1ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1s(short s)
		{
			Functions.glTexCoord1sPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1sv(short* v)
		{
			Functions.glTexCoord1svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1xOES(IntPtr s)
		{
			Functions.glTexCoord1xOESPtr(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord1xvOES(IntPtr* coords)
		{
			Functions.glTexCoord1xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2bOES(sbyte s, sbyte t)
		{
			Functions.glTexCoord2bOESPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2bvOES(sbyte* coords)
		{
			Functions.glTexCoord2bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2d(double s, double t)
		{
			Functions.glTexCoord2dPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2dv(double* v)
		{
			Functions.glTexCoord2dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2f(float s, float t)
		{
			Functions.glTexCoord2fPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z)
		{
			Functions.glTexCoord2fColor3fVertex3fSUNPtr(s, t, r, g, b, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v)
		{
			Functions.glTexCoord2fColor3fVertex3fvSUNPtr(tc, c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glTexCoord2fColor4fNormal3fVertex3fSUNPtr(s, t, r, g, b, a, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v)
		{
			Functions.glTexCoord2fColor4fNormal3fVertex3fvSUNPtr(tc, c, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
		{
			Functions.glTexCoord2fColor4ubVertex3fSUNPtr(s, t, r, g, b, a, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v)
		{
			Functions.glTexCoord2fColor4ubVertex3fvSUNPtr(tc, c, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z)
		{
			Functions.glTexCoord2fNormal3fVertex3fSUNPtr(s, t, nx, ny, nz, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v)
		{
			Functions.glTexCoord2fNormal3fVertex3fvSUNPtr(tc, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z)
		{
			Functions.glTexCoord2fVertex3fSUNPtr(s, t, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fVertex3fvSUN(float* tc, float* v)
		{
			Functions.glTexCoord2fVertex3fvSUNPtr(tc, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2fv(float* v)
		{
			Functions.glTexCoord2fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2hNV(short s, short t)
		{
			Functions.glTexCoord2hNVPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2hvNV(short* v)
		{
			Functions.glTexCoord2hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2i(int s, int t)
		{
			Functions.glTexCoord2iPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2iv(int* v)
		{
			Functions.glTexCoord2ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2s(short s, short t)
		{
			Functions.glTexCoord2sPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2sv(short* v)
		{
			Functions.glTexCoord2svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2xOES(IntPtr s, IntPtr t)
		{
			Functions.glTexCoord2xOESPtr(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord2xvOES(IntPtr* coords)
		{
			Functions.glTexCoord2xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3bOES(sbyte s, sbyte t, sbyte r)
		{
			Functions.glTexCoord3bOESPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3bvOES(sbyte* coords)
		{
			Functions.glTexCoord3bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3d(double s, double t, double r)
		{
			Functions.glTexCoord3dPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3dv(double* v)
		{
			Functions.glTexCoord3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3f(float s, float t, float r)
		{
			Functions.glTexCoord3fPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3fv(float* v)
		{
			Functions.glTexCoord3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3hNV(short s, short t, short r)
		{
			Functions.glTexCoord3hNVPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3hvNV(short* v)
		{
			Functions.glTexCoord3hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3i(int s, int t, int r)
		{
			Functions.glTexCoord3iPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3iv(int* v)
		{
			Functions.glTexCoord3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3s(short s, short t, short r)
		{
			Functions.glTexCoord3sPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3sv(short* v)
		{
			Functions.glTexCoord3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3xOES(IntPtr s, IntPtr t, IntPtr r)
		{
			Functions.glTexCoord3xOESPtr(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord3xvOES(IntPtr* coords)
		{
			Functions.glTexCoord3xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q)
		{
			Functions.glTexCoord4bOESPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4bvOES(sbyte* coords)
		{
			Functions.glTexCoord4bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4d(double s, double t, double r, double q)
		{
			Functions.glTexCoord4dPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4dv(double* v)
		{
			Functions.glTexCoord4dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4f(float s, float t, float r, float q)
		{
			Functions.glTexCoord4fPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
		{
			Functions.glTexCoord4fColor4fNormal3fVertex4fSUNPtr(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v)
		{
			Functions.glTexCoord4fColor4fNormal3fVertex4fvSUNPtr(tc, c, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w)
		{
			Functions.glTexCoord4fVertex4fSUNPtr(s, t, p, q, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4fVertex4fvSUN(float* tc, float* v)
		{
			Functions.glTexCoord4fVertex4fvSUNPtr(tc, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4fv(float* v)
		{
			Functions.glTexCoord4fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4hNV(short s, short t, short r, short q)
		{
			Functions.glTexCoord4hNVPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4hvNV(short* v)
		{
			Functions.glTexCoord4hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4i(int s, int t, int r, int q)
		{
			Functions.glTexCoord4iPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4iv(int* v)
		{
			Functions.glTexCoord4ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4s(short s, short t, short r, short q)
		{
			Functions.glTexCoord4sPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4sv(short* v)
		{
			Functions.glTexCoord4svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4xOES(IntPtr s, IntPtr t, IntPtr r, IntPtr q)
		{
			Functions.glTexCoord4xOESPtr(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoord4xvOES(IntPtr* coords)
		{
			Functions.glTexCoord4xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordFormatNV(int size, int type, int stride)
		{
			Functions.glTexCoordFormatNVPtr(size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP1ui(int type, uint coords)
		{
			Functions.glTexCoordP1uiPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP1uiv(int type, uint* coords)
		{
			Functions.glTexCoordP1uivPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP2ui(int type, uint coords)
		{
			Functions.glTexCoordP2uiPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP2uiv(int type, uint* coords)
		{
			Functions.glTexCoordP2uivPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP3ui(int type, uint coords)
		{
			Functions.glTexCoordP3uiPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP3uiv(int type, uint* coords)
		{
			Functions.glTexCoordP3uivPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP4ui(int type, uint coords)
		{
			Functions.glTexCoordP4uiPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordP4uiv(int type, uint* coords)
		{
			Functions.glTexCoordP4uivPtr(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordPointer(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glTexCoordPointerPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
		{
			Functions.glTexCoordPointerEXTPtr(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glTexCoordPointerListIBMPtr(size, type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexCoordPointervINTEL(int size, int type, IntPtr* pointer)
		{
			Functions.glTexCoordPointervINTELPtr(size, type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvf(int target, int pname, float param)
		{
			Functions.glTexEnvfPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvfv(int target, int pname, float* _params)
		{
			Functions.glTexEnvfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvi(int target, int pname, int param)
		{
			Functions.glTexEnviPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnviv(int target, int pname, int* _params)
		{
			Functions.glTexEnvivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvx(int target, int pname, IntPtr param)
		{
			Functions.glTexEnvxPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvxOES(int target, int pname, IntPtr param)
		{
			Functions.glTexEnvxOESPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvxv(int target, int pname, IntPtr* _params)
		{
			Functions.glTexEnvxvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexEnvxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glTexEnvxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexFilterFuncSGIS(int target, int filter, int n, float* weights)
		{
			Functions.glTexFilterFuncSGISPtr(target, filter, n, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGend(int coord, int pname, double param)
		{
			Functions.glTexGendPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGendv(int coord, int pname, double* _params)
		{
			Functions.glTexGendvPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenf(int coord, int pname, float param)
		{
			Functions.glTexGenfPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenfOES(int coord, int pname, float param)
		{
			Functions.glTexGenfOESPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenfv(int coord, int pname, float* _params)
		{
			Functions.glTexGenfvPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenfvOES(int coord, int pname, float* _params)
		{
			Functions.glTexGenfvOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGeni(int coord, int pname, int param)
		{
			Functions.glTexGeniPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGeniOES(int coord, int pname, int param)
		{
			Functions.glTexGeniOESPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGeniv(int coord, int pname, int* _params)
		{
			Functions.glTexGenivPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenivOES(int coord, int pname, int* _params)
		{
			Functions.glTexGenivOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenxOES(int coord, int pname, IntPtr param)
		{
			Functions.glTexGenxOESPtr(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexGenxvOES(int coord, int pname, IntPtr* _params)
		{
			Functions.glTexGenxvOESPtr(coord, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations)
		{
			Functions.glTexImage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
		{
			Functions.glTexImage2DMultisampleCoverageNVPtr(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage3DEXTPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			Functions.glTexImage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
		{
			Functions.glTexImage3DMultisampleCoverageNVPtr(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage3DOESPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTexImage4DSGISPtr(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
		{
			Functions.glTexPageCommitmentARBPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
		{
			Functions.glTexPageCommitmentEXTPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIiv(int target, int pname, int* _params)
		{
			Functions.glTexParameterIivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIivEXT(int target, int pname, int* _params)
		{
			Functions.glTexParameterIivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIivOES(int target, int pname, int* _params)
		{
			Functions.glTexParameterIivOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIuiv(int target, int pname, uint* _params)
		{
			Functions.glTexParameterIuivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIuivEXT(int target, int pname, uint* _params)
		{
			Functions.glTexParameterIuivEXTPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterIuivOES(int target, int pname, uint* _params)
		{
			Functions.glTexParameterIuivOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterf(int target, int pname, float param)
		{
			Functions.glTexParameterfPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterfv(int target, int pname, float* _params)
		{
			Functions.glTexParameterfvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameteri(int target, int pname, int param)
		{
			Functions.glTexParameteriPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameteriv(int target, int pname, int* _params)
		{
			Functions.glTexParameterivPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterx(int target, int pname, IntPtr param)
		{
			Functions.glTexParameterxPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterxOES(int target, int pname, IntPtr param)
		{
			Functions.glTexParameterxOESPtr(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterxv(int target, int pname, IntPtr* _params)
		{
			Functions.glTexParameterxvPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexParameterxvOES(int target, int pname, IntPtr* _params)
		{
			Functions.glTexParameterxvOESPtr(target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexRenderbufferNV(int target, uint renderbuffer)
		{
			Functions.glTexRenderbufferNVPtr(target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage1D(int target, int levels, int internalformat, int width)
		{
			Functions.glTexStorage1DPtr(target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage1DEXT(int target, int levels, int internalformat, int width)
		{
			Functions.glTexStorage1DEXTPtr(target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage2D(int target, int levels, int internalformat, int width, int height)
		{
			Functions.glTexStorage2DPtr(target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage2DEXT(int target, int levels, int internalformat, int width, int height)
		{
			Functions.glTexStorage2DEXTPtr(target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations)
		{
			Functions.glTexStorage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth)
		{
			Functions.glTexStorage3DPtr(target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth)
		{
			Functions.glTexStorage3DEXTPtr(target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			Functions.glTexStorage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorage3DMultisampleOES(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			Functions.glTexStorage3DMultisampleOESPtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageMem1DEXT(int target, int levels, int internalFormat, int width, uint memory, ulong offset)
		{
			Functions.glTexStorageMem1DEXTPtr(target, levels, internalFormat, width, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, uint memory, ulong offset)
		{
			Functions.glTexStorageMem2DEXTPtr(target, levels, internalFormat, width, height, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
		{
			Functions.glTexStorageMem2DMultisampleEXTPtr(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageMem3DEXT(int target, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			Functions.glTexStorageMem3DEXTPtr(target, levels, internalFormat, width, height, depth, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
		{
			Functions.glTexStorageMem3DMultisampleEXTPtr(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, uint flags)
		{
			Functions.glTexStorageSparseAMDPtr(target, internalFormat, width, height, depth, layers, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage1DEXTPtr(target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage2DEXTPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage3DEXTPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage3DOESPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, IntPtr pixels)
		{
			Functions.glTexSubImage4DSGISPtr(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset)
		{
			Functions.glTextureAttachMemoryNVPtr(texture, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBarrier()
		{
			Functions.glTextureBarrierPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBarrierNV()
		{
			Functions.glTextureBarrierNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBuffer(uint texture, int internalformat, uint buffer)
		{
			Functions.glTextureBufferPtr(texture, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBufferEXT(uint texture, int target, int internalformat, uint buffer)
		{
			Functions.glTextureBufferEXTPtr(texture, target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBufferRange(uint texture, int internalformat, uint buffer, uint offset, uint size)
		{
			Functions.glTextureBufferRangePtr(texture, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureBufferRangeEXT(uint texture, int target, int internalformat, uint buffer, uint offset, uint size)
		{
			Functions.glTextureBufferRangeEXTPtr(texture, target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha)
		{
			Functions.glTextureColorMaskSGISPtr(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
		{
			Functions.glTextureFoveationParametersQCOMPtr(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTextureImage1DEXTPtr(texture, target, level, internalformat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTextureImage2DEXTPtr(texture, target, level, internalformat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage2DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
		{
			Functions.glTextureImage2DMultisampleCoverageNVPtr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage2DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
		{
			Functions.glTextureImage2DMultisampleNVPtr(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
		{
			Functions.glTextureImage3DEXTPtr(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage3DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
		{
			Functions.glTextureImage3DMultisampleCoverageNVPtr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureImage3DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
		{
			Functions.glTextureImage3DMultisampleNVPtr(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureLightEXT(int pname)
		{
			Functions.glTextureLightEXTPtr(pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureMaterialEXT(int face, int mode)
		{
			Functions.glTextureMaterialEXTPtr(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureNormalEXT(int mode)
		{
			Functions.glTextureNormalEXTPtr(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
		{
			Functions.glTexturePageCommitmentEXTPtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterIiv(uint texture, int pname, int* _params)
		{
			Functions.glTextureParameterIivPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterIivEXT(uint texture, int target, int pname, int* _params)
		{
			Functions.glTextureParameterIivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterIuiv(uint texture, int pname, uint* _params)
		{
			Functions.glTextureParameterIuivPtr(texture, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterIuivEXT(uint texture, int target, int pname, uint* _params)
		{
			Functions.glTextureParameterIuivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterf(uint texture, int pname, float param)
		{
			Functions.glTextureParameterfPtr(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterfEXT(uint texture, int target, int pname, float param)
		{
			Functions.glTextureParameterfEXTPtr(texture, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterfv(uint texture, int pname, float* param)
		{
			Functions.glTextureParameterfvPtr(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterfvEXT(uint texture, int target, int pname, float* _params)
		{
			Functions.glTextureParameterfvEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameteri(uint texture, int pname, int param)
		{
			Functions.glTextureParameteriPtr(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameteriEXT(uint texture, int target, int pname, int param)
		{
			Functions.glTextureParameteriEXTPtr(texture, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameteriv(uint texture, int pname, int* param)
		{
			Functions.glTextureParameterivPtr(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureParameterivEXT(uint texture, int target, int pname, int* _params)
		{
			Functions.glTextureParameterivEXTPtr(texture, target, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureRangeAPPLE(int target, int length, IntPtr pointer)
		{
			Functions.glTextureRangeAPPLEPtr(target, length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureRenderbufferEXT(uint texture, int target, uint renderbuffer)
		{
			Functions.glTextureRenderbufferEXTPtr(texture, target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage1D(uint texture, int levels, int internalformat, int width)
		{
			Functions.glTextureStorage1DPtr(texture, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage1DEXT(uint texture, int target, int levels, int internalformat, int width)
		{
			Functions.glTextureStorage1DEXTPtr(texture, target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage2D(uint texture, int levels, int internalformat, int width, int height)
		{
			Functions.glTextureStorage2DPtr(texture, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage2DEXT(uint texture, int target, int levels, int internalformat, int width, int height)
		{
			Functions.glTextureStorage2DEXTPtr(texture, target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage2DMultisample(uint texture, int samples, int internalformat, int width, int height, bool fixedsamplelocations)
		{
			Functions.glTextureStorage2DMultisamplePtr(texture, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage2DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations)
		{
			Functions.glTextureStorage2DMultisampleEXTPtr(texture, target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage3D(uint texture, int levels, int internalformat, int width, int height, int depth)
		{
			Functions.glTextureStorage3DPtr(texture, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage3DEXT(uint texture, int target, int levels, int internalformat, int width, int height, int depth)
		{
			Functions.glTextureStorage3DEXTPtr(texture, target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage3DMultisample(uint texture, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			Functions.glTextureStorage3DMultisamplePtr(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorage3DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			Functions.glTextureStorage3DMultisampleEXTPtr(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageMem1DEXT(uint texture, int levels, int internalFormat, int width, uint memory, ulong offset)
		{
			Functions.glTextureStorageMem1DEXTPtr(texture, levels, internalFormat, width, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageMem2DEXT(uint texture, int levels, int internalFormat, int width, int height, uint memory, ulong offset)
		{
			Functions.glTextureStorageMem2DEXTPtr(texture, levels, internalFormat, width, height, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
		{
			Functions.glTextureStorageMem2DMultisampleEXTPtr(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageMem3DEXT(uint texture, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			Functions.glTextureStorageMem3DEXTPtr(texture, levels, internalFormat, width, height, depth, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
		{
			Functions.glTextureStorageMem3DMultisampleEXTPtr(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureStorageSparseAMD(uint texture, int target, int internalFormat, int width, int height, int depth, int layers, uint flags)
		{
			Functions.glTextureStorageSparseAMDPtr(texture, target, internalFormat, width, height, depth, layers, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage1DPtr(texture, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage1DEXTPtr(texture, target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage2DPtr(texture, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage2DEXTPtr(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage3DPtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
		{
			Functions.glTextureSubImage3DEXTPtr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureView(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			Functions.glTextureViewPtr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureViewEXT(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			Functions.glTextureViewEXTPtr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTextureViewOES(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			Functions.glTextureViewOESPtr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTrackMatrixNV(int target, uint address, int matrix, int transform)
		{
			Functions.glTrackMatrixNVPtr(target, address, matrix, transform);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackAttribsNV(int count, int* attribs, int bufferMode)
		{
			Functions.glTransformFeedbackAttribsNVPtr(count, attribs, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
		{
			Functions.glTransformFeedbackBufferBasePtr(xfb, index, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, uint offset, uint size)
		{
			Functions.glTransformFeedbackBufferRangePtr(xfb, index, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, int bufferMode)
		{
			Functions.glTransformFeedbackStreamAttribsNVPtr(count, attribs, nbuffers, bufstreams, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackVaryings(uint program, int count, byte** varyings, int bufferMode)
		{
			Functions.glTransformFeedbackVaryingsPtr(program, count, varyings, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackVaryingsEXT(uint program, int count, byte** varyings, int bufferMode)
		{
			Functions.glTransformFeedbackVaryingsEXTPtr(program, count, varyings, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, int bufferMode)
		{
			Functions.glTransformFeedbackVaryingsNVPtr(program, count, locations, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float* transformValues)
		{
			Functions.glTransformPathNVPtr(resultPath, srcPath, transformType, transformValues);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTranslated(double x, double y, double z)
		{
			Functions.glTranslatedPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTranslatef(float x, float y, float z)
		{
			Functions.glTranslatefPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTranslatex(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glTranslatexPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glTranslatexOES(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glTranslatexOESPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1d(int location, double x)
		{
			Functions.glUniform1dPtr(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1dv(int location, int count, double* value)
		{
			Functions.glUniform1dvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1f(int location, float v0)
		{
			Functions.glUniform1fPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1fARB(int location, float v0)
		{
			Functions.glUniform1fARBPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1fv(int location, int count, float* value)
		{
			Functions.glUniform1fvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1fvARB(int location, int count, float* value)
		{
			Functions.glUniform1fvARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1i(int location, int v0)
		{
			Functions.glUniform1iPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1i64ARB(int location, long x)
		{
			Functions.glUniform1i64ARBPtr(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1i64NV(int location, long x)
		{
			Functions.glUniform1i64NVPtr(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1i64vARB(int location, int count, long* value)
		{
			Functions.glUniform1i64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1i64vNV(int location, int count, long* value)
		{
			Functions.glUniform1i64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1iARB(int location, int v0)
		{
			Functions.glUniform1iARBPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1iv(int location, int count, int* value)
		{
			Functions.glUniform1ivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ivARB(int location, int count, int* value)
		{
			Functions.glUniform1ivARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ui(int location, uint v0)
		{
			Functions.glUniform1uiPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ui64ARB(int location, ulong x)
		{
			Functions.glUniform1ui64ARBPtr(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ui64NV(int location, ulong x)
		{
			Functions.glUniform1ui64NVPtr(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ui64vARB(int location, int count, ulong* value)
		{
			Functions.glUniform1ui64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1ui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniform1ui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1uiEXT(int location, uint v0)
		{
			Functions.glUniform1uiEXTPtr(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1uiv(int location, int count, uint* value)
		{
			Functions.glUniform1uivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform1uivEXT(int location, int count, uint* value)
		{
			Functions.glUniform1uivEXTPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2d(int location, double x, double y)
		{
			Functions.glUniform2dPtr(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2dv(int location, int count, double* value)
		{
			Functions.glUniform2dvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2f(int location, float v0, float v1)
		{
			Functions.glUniform2fPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2fARB(int location, float v0, float v1)
		{
			Functions.glUniform2fARBPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2fv(int location, int count, float* value)
		{
			Functions.glUniform2fvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2fvARB(int location, int count, float* value)
		{
			Functions.glUniform2fvARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2i(int location, int v0, int v1)
		{
			Functions.glUniform2iPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2i64ARB(int location, long x, long y)
		{
			Functions.glUniform2i64ARBPtr(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2i64NV(int location, long x, long y)
		{
			Functions.glUniform2i64NVPtr(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2i64vARB(int location, int count, long* value)
		{
			Functions.glUniform2i64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2i64vNV(int location, int count, long* value)
		{
			Functions.glUniform2i64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2iARB(int location, int v0, int v1)
		{
			Functions.glUniform2iARBPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2iv(int location, int count, int* value)
		{
			Functions.glUniform2ivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ivARB(int location, int count, int* value)
		{
			Functions.glUniform2ivARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ui(int location, uint v0, uint v1)
		{
			Functions.glUniform2uiPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ui64ARB(int location, ulong x, ulong y)
		{
			Functions.glUniform2ui64ARBPtr(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ui64NV(int location, ulong x, ulong y)
		{
			Functions.glUniform2ui64NVPtr(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ui64vARB(int location, int count, ulong* value)
		{
			Functions.glUniform2ui64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2ui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniform2ui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2uiEXT(int location, uint v0, uint v1)
		{
			Functions.glUniform2uiEXTPtr(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2uiv(int location, int count, uint* value)
		{
			Functions.glUniform2uivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform2uivEXT(int location, int count, uint* value)
		{
			Functions.glUniform2uivEXTPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3d(int location, double x, double y, double z)
		{
			Functions.glUniform3dPtr(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3dv(int location, int count, double* value)
		{
			Functions.glUniform3dvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3f(int location, float v0, float v1, float v2)
		{
			Functions.glUniform3fPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3fARB(int location, float v0, float v1, float v2)
		{
			Functions.glUniform3fARBPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3fv(int location, int count, float* value)
		{
			Functions.glUniform3fvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3fvARB(int location, int count, float* value)
		{
			Functions.glUniform3fvARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3i(int location, int v0, int v1, int v2)
		{
			Functions.glUniform3iPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3i64ARB(int location, long x, long y, long z)
		{
			Functions.glUniform3i64ARBPtr(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3i64NV(int location, long x, long y, long z)
		{
			Functions.glUniform3i64NVPtr(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3i64vARB(int location, int count, long* value)
		{
			Functions.glUniform3i64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3i64vNV(int location, int count, long* value)
		{
			Functions.glUniform3i64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3iARB(int location, int v0, int v1, int v2)
		{
			Functions.glUniform3iARBPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3iv(int location, int count, int* value)
		{
			Functions.glUniform3ivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ivARB(int location, int count, int* value)
		{
			Functions.glUniform3ivARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ui(int location, uint v0, uint v1, uint v2)
		{
			Functions.glUniform3uiPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z)
		{
			Functions.glUniform3ui64ARBPtr(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ui64NV(int location, ulong x, ulong y, ulong z)
		{
			Functions.glUniform3ui64NVPtr(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ui64vARB(int location, int count, ulong* value)
		{
			Functions.glUniform3ui64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3ui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniform3ui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3uiEXT(int location, uint v0, uint v1, uint v2)
		{
			Functions.glUniform3uiEXTPtr(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3uiv(int location, int count, uint* value)
		{
			Functions.glUniform3uivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform3uivEXT(int location, int count, uint* value)
		{
			Functions.glUniform3uivEXTPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4d(int location, double x, double y, double z, double w)
		{
			Functions.glUniform4dPtr(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4dv(int location, int count, double* value)
		{
			Functions.glUniform4dvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
		{
			Functions.glUniform4fPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4fARB(int location, float v0, float v1, float v2, float v3)
		{
			Functions.glUniform4fARBPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4fv(int location, int count, float* value)
		{
			Functions.glUniform4fvPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4fvARB(int location, int count, float* value)
		{
			Functions.glUniform4fvARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
		{
			Functions.glUniform4iPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4i64ARB(int location, long x, long y, long z, long w)
		{
			Functions.glUniform4i64ARBPtr(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4i64NV(int location, long x, long y, long z, long w)
		{
			Functions.glUniform4i64NVPtr(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4i64vARB(int location, int count, long* value)
		{
			Functions.glUniform4i64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4i64vNV(int location, int count, long* value)
		{
			Functions.glUniform4i64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4iARB(int location, int v0, int v1, int v2, int v3)
		{
			Functions.glUniform4iARBPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4iv(int location, int count, int* value)
		{
			Functions.glUniform4ivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ivARB(int location, int count, int* value)
		{
			Functions.glUniform4ivARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
		{
			Functions.glUniform4uiPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w)
		{
			Functions.glUniform4ui64ARBPtr(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w)
		{
			Functions.glUniform4ui64NVPtr(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ui64vARB(int location, int count, ulong* value)
		{
			Functions.glUniform4ui64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4ui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniform4ui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3)
		{
			Functions.glUniform4uiEXTPtr(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4uiv(int location, int count, uint* value)
		{
			Functions.glUniform4uivPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniform4uivEXT(int location, int count, uint* value)
		{
			Functions.glUniform4uivEXTPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			Functions.glUniformBlockBindingPtr(program, uniformBlockIndex, uniformBlockBinding);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformBufferEXT(uint program, int location, uint buffer)
		{
			Functions.glUniformBufferEXTPtr(program, location, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64ARB(int location, ulong value)
		{
			Functions.glUniformHandleui64ARBPtr(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64IMG(int location, ulong value)
		{
			Functions.glUniformHandleui64IMGPtr(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64NV(int location, ulong value)
		{
			Functions.glUniformHandleui64NVPtr(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64vARB(int location, int count, ulong* value)
		{
			Functions.glUniformHandleui64vARBPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64vIMG(int location, int count, ulong* value)
		{
			Functions.glUniformHandleui64vIMGPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformHandleui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniformHandleui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix2dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2fvARB(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2fvARBPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x3dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix2x3dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x3fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2x3fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x3fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2x3fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x4dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix2x4dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x4fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2x4fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix2x4fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix2x4fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix3dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3fvARB(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3fvARBPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x2dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix3x2dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x2fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3x2fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x2fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3x2fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x4dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix3x4dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x4fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3x4fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix3x4fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix3x4fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix4dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4fvARB(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4fvARBPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x2dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix4x2dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x2fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4x2fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x2fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4x2fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x3dv(int location, int count, bool transpose, double* value)
		{
			Functions.glUniformMatrix4x3dvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x3fv(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4x3fvPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformMatrix4x3fvNV(int location, int count, bool transpose, float* value)
		{
			Functions.glUniformMatrix4x3fvNVPtr(location, count, transpose, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformSubroutinesuiv(int shadertype, int count, uint* indices)
		{
			Functions.glUniformSubroutinesuivPtr(shadertype, count, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformui64NV(int location, ulong value)
		{
			Functions.glUniformui64NVPtr(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUniformui64vNV(int location, int count, ulong* value)
		{
			Functions.glUniformui64vNVPtr(location, count, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUnlockArraysEXT()
		{
			Functions.glUnlockArraysEXTPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glUnmapBuffer(int target)
		{
			return Functions.glUnmapBufferPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glUnmapBufferARB(int target)
		{
			return Functions.glUnmapBufferARBPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glUnmapBufferOES(int target)
		{
			return Functions.glUnmapBufferOESPtr(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glUnmapNamedBuffer(uint buffer)
		{
			return Functions.glUnmapNamedBufferPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glUnmapNamedBufferEXT(uint buffer)
		{
			return Functions.glUnmapNamedBufferEXTPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUnmapObjectBufferATI(uint buffer)
		{
			Functions.glUnmapObjectBufferATIPtr(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUnmapTexture2DINTEL(uint texture, int level)
		{
			Functions.glUnmapTexture2DINTELPtr(texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, int preserve)
		{
			Functions.glUpdateObjectBufferATIPtr(buffer, offset, size, pointer, preserve);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUseProgram(uint program)
		{
			Functions.glUseProgramPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUseProgramObjectARB(uint programObj)
		{
			Functions.glUseProgramObjectARBPtr(programObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUseProgramStages(uint pipeline, uint stages, uint program)
		{
			Functions.glUseProgramStagesPtr(pipeline, stages, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUseProgramStagesEXT(uint pipeline, uint stages, uint program)
		{
			Functions.glUseProgramStagesEXTPtr(pipeline, stages, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glUseShaderProgramEXT(int type, uint program)
		{
			Functions.glUseShaderProgramEXTPtr(type, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUFiniNV()
		{
			Functions.glVDPAUFiniNVPtr();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUGetSurfaceivNV(IntPtr surface, int pname, int bufSize, int* length, int* values)
		{
			Functions.glVDPAUGetSurfaceivNVPtr(surface, pname, bufSize, length, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress)
		{
			Functions.glVDPAUInitNVPtr(vdpDevice, getProcAddress);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool glVDPAUIsSurfaceNV(IntPtr surface)
		{
			return Functions.glVDPAUIsSurfaceNVPtr(surface);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUMapSurfacesNV(int numSurfaces, IntPtr* surfaces)
		{
			Functions.glVDPAUMapSurfacesNVPtr(numSurfaces, surfaces);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames)
		{
			return Functions.glVDPAURegisterOutputSurfaceNVPtr(vdpSurface, target, numTextureNames, textureNames);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames)
		{
			return Functions.glVDPAURegisterVideoSurfaceNVPtr(vdpSurface, target, numTextureNames, textureNames);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glVDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames, bool isFrameStructure)
		{
			return Functions.glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUSurfaceAccessNV(IntPtr surface, int access)
		{
			Functions.glVDPAUSurfaceAccessNVPtr(surface, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUUnmapSurfacesNV(int numSurface, IntPtr* surfaces)
		{
			Functions.glVDPAUUnmapSurfacesNVPtr(numSurface, surfaces);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVDPAUUnregisterSurfaceNV(IntPtr surface)
		{
			Functions.glVDPAUUnregisterSurfaceNVPtr(surface);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glValidateProgram(uint program)
		{
			Functions.glValidateProgramPtr(program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glValidateProgramARB(uint programObj)
		{
			Functions.glValidateProgramARBPtr(programObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glValidateProgramPipeline(uint pipeline)
		{
			Functions.glValidateProgramPipelinePtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glValidateProgramPipelineEXT(uint pipeline)
		{
			Functions.glValidateProgramPipelineEXTPtr(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, uint offset)
		{
			Functions.glVariantArrayObjectATIPtr(id, type, stride, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantPointerEXT(uint id, int type, uint stride, IntPtr addr)
		{
			Functions.glVariantPointerEXTPtr(id, type, stride, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantbvEXT(uint id, sbyte* addr)
		{
			Functions.glVariantbvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantdvEXT(uint id, double* addr)
		{
			Functions.glVariantdvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantfvEXT(uint id, float* addr)
		{
			Functions.glVariantfvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantivEXT(uint id, int* addr)
		{
			Functions.glVariantivEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantsvEXT(uint id, short* addr)
		{
			Functions.glVariantsvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantubvEXT(uint id, byte* addr)
		{
			Functions.glVariantubvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantuivEXT(uint id, uint* addr)
		{
			Functions.glVariantuivEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVariantusvEXT(uint id, ushort* addr)
		{
			Functions.glVariantusvEXTPtr(id, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2bOES(sbyte x, sbyte y)
		{
			Functions.glVertex2bOESPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2bvOES(sbyte* coords)
		{
			Functions.glVertex2bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2d(double x, double y)
		{
			Functions.glVertex2dPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2dv(double* v)
		{
			Functions.glVertex2dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2f(float x, float y)
		{
			Functions.glVertex2fPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2fv(float* v)
		{
			Functions.glVertex2fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2hNV(short x, short y)
		{
			Functions.glVertex2hNVPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2hvNV(short* v)
		{
			Functions.glVertex2hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2i(int x, int y)
		{
			Functions.glVertex2iPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2iv(int* v)
		{
			Functions.glVertex2ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2s(short x, short y)
		{
			Functions.glVertex2sPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2sv(short* v)
		{
			Functions.glVertex2svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2xOES(IntPtr x)
		{
			Functions.glVertex2xOESPtr(x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex2xvOES(IntPtr* coords)
		{
			Functions.glVertex2xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3bOES(sbyte x, sbyte y, sbyte z)
		{
			Functions.glVertex3bOESPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3bvOES(sbyte* coords)
		{
			Functions.glVertex3bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3d(double x, double y, double z)
		{
			Functions.glVertex3dPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3dv(double* v)
		{
			Functions.glVertex3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3f(float x, float y, float z)
		{
			Functions.glVertex3fPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3fv(float* v)
		{
			Functions.glVertex3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3hNV(short x, short y, short z)
		{
			Functions.glVertex3hNVPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3hvNV(short* v)
		{
			Functions.glVertex3hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3i(int x, int y, int z)
		{
			Functions.glVertex3iPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3iv(int* v)
		{
			Functions.glVertex3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3s(short x, short y, short z)
		{
			Functions.glVertex3sPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3sv(short* v)
		{
			Functions.glVertex3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3xOES(IntPtr x, IntPtr y)
		{
			Functions.glVertex3xOESPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex3xvOES(IntPtr* coords)
		{
			Functions.glVertex3xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w)
		{
			Functions.glVertex4bOESPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4bvOES(sbyte* coords)
		{
			Functions.glVertex4bvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4d(double x, double y, double z, double w)
		{
			Functions.glVertex4dPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4dv(double* v)
		{
			Functions.glVertex4dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4f(float x, float y, float z, float w)
		{
			Functions.glVertex4fPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4fv(float* v)
		{
			Functions.glVertex4fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4hNV(short x, short y, short z, short w)
		{
			Functions.glVertex4hNVPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4hvNV(short* v)
		{
			Functions.glVertex4hvNVPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4i(int x, int y, int z, int w)
		{
			Functions.glVertex4iPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4iv(int* v)
		{
			Functions.glVertex4ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4s(short x, short y, short z, short w)
		{
			Functions.glVertex4sPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4sv(short* v)
		{
			Functions.glVertex4svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4xOES(IntPtr x, IntPtr y, IntPtr z)
		{
			Functions.glVertex4xOESPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertex4xvOES(IntPtr* coords)
		{
			Functions.glVertex4xvOESPtr(coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
		{
			Functions.glVertexArrayAttribBindingPtr(vaobj, attribindex, bindingindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset)
		{
			Functions.glVertexArrayAttribFormatPtr(vaobj, attribindex, size, type, normalized, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexArrayAttribIFormatPtr(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexArrayAttribLFormatPtr(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride)
		{
			Functions.glVertexArrayBindVertexBufferEXTPtr(vaobj, bindingindex, buffer, offset, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
		{
			Functions.glVertexArrayBindingDivisorPtr(vaobj, bindingindex, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayColorOffsetEXTPtr(vaobj, buffer, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, uint offset)
		{
			Functions.glVertexArrayEdgeFlagOffsetEXTPtr(vaobj, buffer, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayElementBuffer(uint vaobj, uint buffer)
		{
			Functions.glVertexArrayElementBufferPtr(vaobj, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset)
		{
			Functions.glVertexArrayFogCoordOffsetEXTPtr(vaobj, buffer, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset)
		{
			Functions.glVertexArrayIndexOffsetEXTPtr(vaobj, buffer, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayMultiTexCoordOffsetEXTPtr(vaobj, buffer, texunit, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, int type, int stride, uint offset)
		{
			Functions.glVertexArrayNormalOffsetEXTPtr(vaobj, buffer, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayParameteriAPPLE(int pname, int param)
		{
			Functions.glVertexArrayParameteriAPPLEPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayRangeAPPLE(int length, IntPtr pointer)
		{
			Functions.glVertexArrayRangeAPPLEPtr(length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayRangeNV(int length, IntPtr pointer)
		{
			Functions.glVertexArrayRangeNVPtr(length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArraySecondaryColorOffsetEXTPtr(vaobj, buffer, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayTexCoordOffsetEXTPtr(vaobj, buffer, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex)
		{
			Functions.glVertexArrayVertexAttribBindingEXTPtr(vaobj, attribindex, bindingindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor)
		{
			Functions.glVertexArrayVertexAttribDivisorEXTPtr(vaobj, index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset)
		{
			Functions.glVertexArrayVertexAttribFormatEXTPtr(vaobj, attribindex, size, type, normalized, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexArrayVertexAttribIFormatEXTPtr(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayVertexAttribIOffsetEXTPtr(vaobj, buffer, index, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexArrayVertexAttribLFormatEXTPtr(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayVertexAttribLOffsetEXTPtr(vaobj, buffer, index, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, bool normalized, int stride, uint offset)
		{
			Functions.glVertexArrayVertexAttribOffsetEXTPtr(vaobj, buffer, index, size, type, normalized, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor)
		{
			Functions.glVertexArrayVertexBindingDivisorEXTPtr(vaobj, bindingindex, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, uint offset, int stride)
		{
			Functions.glVertexArrayVertexBufferPtr(vaobj, bindingindex, buffer, offset, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, uint* offsets, int* strides)
		{
			Functions.glVertexArrayVertexBuffersPtr(vaobj, first, count, buffers, offsets, strides);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, uint offset)
		{
			Functions.glVertexArrayVertexOffsetEXTPtr(vaobj, buffer, size, type, stride, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1d(uint index, double x)
		{
			Functions.glVertexAttrib1dPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1dARB(uint index, double x)
		{
			Functions.glVertexAttrib1dARBPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1dNV(uint index, double x)
		{
			Functions.glVertexAttrib1dNVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1dv(uint index, double* v)
		{
			Functions.glVertexAttrib1dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1dvARB(uint index, double* v)
		{
			Functions.glVertexAttrib1dvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1dvNV(uint index, double* v)
		{
			Functions.glVertexAttrib1dvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1f(uint index, float x)
		{
			Functions.glVertexAttrib1fPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1fARB(uint index, float x)
		{
			Functions.glVertexAttrib1fARBPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1fNV(uint index, float x)
		{
			Functions.glVertexAttrib1fNVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1fv(uint index, float* v)
		{
			Functions.glVertexAttrib1fvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1fvARB(uint index, float* v)
		{
			Functions.glVertexAttrib1fvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1fvNV(uint index, float* v)
		{
			Functions.glVertexAttrib1fvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1hNV(uint index, short x)
		{
			Functions.glVertexAttrib1hNVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1hvNV(uint index, short* v)
		{
			Functions.glVertexAttrib1hvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1s(uint index, short x)
		{
			Functions.glVertexAttrib1sPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1sARB(uint index, short x)
		{
			Functions.glVertexAttrib1sARBPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1sNV(uint index, short x)
		{
			Functions.glVertexAttrib1sNVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1sv(uint index, short* v)
		{
			Functions.glVertexAttrib1svPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1svARB(uint index, short* v)
		{
			Functions.glVertexAttrib1svARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib1svNV(uint index, short* v)
		{
			Functions.glVertexAttrib1svNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2d(uint index, double x, double y)
		{
			Functions.glVertexAttrib2dPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2dARB(uint index, double x, double y)
		{
			Functions.glVertexAttrib2dARBPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2dNV(uint index, double x, double y)
		{
			Functions.glVertexAttrib2dNVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2dv(uint index, double* v)
		{
			Functions.glVertexAttrib2dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2dvARB(uint index, double* v)
		{
			Functions.glVertexAttrib2dvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2dvNV(uint index, double* v)
		{
			Functions.glVertexAttrib2dvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2f(uint index, float x, float y)
		{
			Functions.glVertexAttrib2fPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2fARB(uint index, float x, float y)
		{
			Functions.glVertexAttrib2fARBPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2fNV(uint index, float x, float y)
		{
			Functions.glVertexAttrib2fNVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2fv(uint index, float* v)
		{
			Functions.glVertexAttrib2fvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2fvARB(uint index, float* v)
		{
			Functions.glVertexAttrib2fvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2fvNV(uint index, float* v)
		{
			Functions.glVertexAttrib2fvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2hNV(uint index, short x, short y)
		{
			Functions.glVertexAttrib2hNVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2hvNV(uint index, short* v)
		{
			Functions.glVertexAttrib2hvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2s(uint index, short x, short y)
		{
			Functions.glVertexAttrib2sPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2sARB(uint index, short x, short y)
		{
			Functions.glVertexAttrib2sARBPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2sNV(uint index, short x, short y)
		{
			Functions.glVertexAttrib2sNVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2sv(uint index, short* v)
		{
			Functions.glVertexAttrib2svPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2svARB(uint index, short* v)
		{
			Functions.glVertexAttrib2svARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib2svNV(uint index, short* v)
		{
			Functions.glVertexAttrib2svNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3d(uint index, double x, double y, double z)
		{
			Functions.glVertexAttrib3dPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3dARB(uint index, double x, double y, double z)
		{
			Functions.glVertexAttrib3dARBPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3dNV(uint index, double x, double y, double z)
		{
			Functions.glVertexAttrib3dNVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3dv(uint index, double* v)
		{
			Functions.glVertexAttrib3dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3dvARB(uint index, double* v)
		{
			Functions.glVertexAttrib3dvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3dvNV(uint index, double* v)
		{
			Functions.glVertexAttrib3dvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3f(uint index, float x, float y, float z)
		{
			Functions.glVertexAttrib3fPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3fARB(uint index, float x, float y, float z)
		{
			Functions.glVertexAttrib3fARBPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3fNV(uint index, float x, float y, float z)
		{
			Functions.glVertexAttrib3fNVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3fv(uint index, float* v)
		{
			Functions.glVertexAttrib3fvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3fvARB(uint index, float* v)
		{
			Functions.glVertexAttrib3fvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3fvNV(uint index, float* v)
		{
			Functions.glVertexAttrib3fvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3hNV(uint index, short x, short y, short z)
		{
			Functions.glVertexAttrib3hNVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3hvNV(uint index, short* v)
		{
			Functions.glVertexAttrib3hvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3s(uint index, short x, short y, short z)
		{
			Functions.glVertexAttrib3sPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3sARB(uint index, short x, short y, short z)
		{
			Functions.glVertexAttrib3sARBPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3sNV(uint index, short x, short y, short z)
		{
			Functions.glVertexAttrib3sNVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3sv(uint index, short* v)
		{
			Functions.glVertexAttrib3svPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3svARB(uint index, short* v)
		{
			Functions.glVertexAttrib3svARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib3svNV(uint index, short* v)
		{
			Functions.glVertexAttrib3svNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nbv(uint index, sbyte* v)
		{
			Functions.glVertexAttrib4NbvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NbvARB(uint index, sbyte* v)
		{
			Functions.glVertexAttrib4NbvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Niv(uint index, int* v)
		{
			Functions.glVertexAttrib4NivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NivARB(uint index, int* v)
		{
			Functions.glVertexAttrib4NivARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nsv(uint index, short* v)
		{
			Functions.glVertexAttrib4NsvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NsvARB(uint index, short* v)
		{
			Functions.glVertexAttrib4NsvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
		{
			Functions.glVertexAttrib4NubPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w)
		{
			Functions.glVertexAttrib4NubARBPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nubv(uint index, byte* v)
		{
			Functions.glVertexAttrib4NubvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NubvARB(uint index, byte* v)
		{
			Functions.glVertexAttrib4NubvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nuiv(uint index, uint* v)
		{
			Functions.glVertexAttrib4NuivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NuivARB(uint index, uint* v)
		{
			Functions.glVertexAttrib4NuivARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4Nusv(uint index, ushort* v)
		{
			Functions.glVertexAttrib4NusvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4NusvARB(uint index, ushort* v)
		{
			Functions.glVertexAttrib4NusvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4bv(uint index, sbyte* v)
		{
			Functions.glVertexAttrib4bvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4bvARB(uint index, sbyte* v)
		{
			Functions.glVertexAttrib4bvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4d(uint index, double x, double y, double z, double w)
		{
			Functions.glVertexAttrib4dPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4dARB(uint index, double x, double y, double z, double w)
		{
			Functions.glVertexAttrib4dARBPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4dNV(uint index, double x, double y, double z, double w)
		{
			Functions.glVertexAttrib4dNVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4dv(uint index, double* v)
		{
			Functions.glVertexAttrib4dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4dvARB(uint index, double* v)
		{
			Functions.glVertexAttrib4dvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4dvNV(uint index, double* v)
		{
			Functions.glVertexAttrib4dvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
		{
			Functions.glVertexAttrib4fPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4fARB(uint index, float x, float y, float z, float w)
		{
			Functions.glVertexAttrib4fARBPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4fNV(uint index, float x, float y, float z, float w)
		{
			Functions.glVertexAttrib4fNVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4fv(uint index, float* v)
		{
			Functions.glVertexAttrib4fvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4fvARB(uint index, float* v)
		{
			Functions.glVertexAttrib4fvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4fvNV(uint index, float* v)
		{
			Functions.glVertexAttrib4fvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4hNV(uint index, short x, short y, short z, short w)
		{
			Functions.glVertexAttrib4hNVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4hvNV(uint index, short* v)
		{
			Functions.glVertexAttrib4hvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4iv(uint index, int* v)
		{
			Functions.glVertexAttrib4ivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4ivARB(uint index, int* v)
		{
			Functions.glVertexAttrib4ivARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4s(uint index, short x, short y, short z, short w)
		{
			Functions.glVertexAttrib4sPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4sARB(uint index, short x, short y, short z, short w)
		{
			Functions.glVertexAttrib4sARBPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4sNV(uint index, short x, short y, short z, short w)
		{
			Functions.glVertexAttrib4sNVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4sv(uint index, short* v)
		{
			Functions.glVertexAttrib4svPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4svARB(uint index, short* v)
		{
			Functions.glVertexAttrib4svARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4svNV(uint index, short* v)
		{
			Functions.glVertexAttrib4svNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w)
		{
			Functions.glVertexAttrib4ubNVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4ubv(uint index, byte* v)
		{
			Functions.glVertexAttrib4ubvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4ubvARB(uint index, byte* v)
		{
			Functions.glVertexAttrib4ubvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4ubvNV(uint index, byte* v)
		{
			Functions.glVertexAttrib4ubvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4uiv(uint index, uint* v)
		{
			Functions.glVertexAttrib4uivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4uivARB(uint index, uint* v)
		{
			Functions.glVertexAttrib4uivARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4usv(uint index, ushort* v)
		{
			Functions.glVertexAttrib4usvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttrib4usvARB(uint index, ushort* v)
		{
			Functions.glVertexAttrib4usvARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, uint buffer, uint offset)
		{
			Functions.glVertexAttribArrayObjectATIPtr(index, size, type, normalized, stride, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribBinding(uint attribindex, uint bindingindex)
		{
			Functions.glVertexAttribBindingPtr(attribindex, bindingindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribDivisor(uint index, uint divisor)
		{
			Functions.glVertexAttribDivisorPtr(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribDivisorANGLE(uint index, uint divisor)
		{
			Functions.glVertexAttribDivisorANGLEPtr(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribDivisorARB(uint index, uint divisor)
		{
			Functions.glVertexAttribDivisorARBPtr(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribDivisorEXT(uint index, uint divisor)
		{
			Functions.glVertexAttribDivisorEXTPtr(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribDivisorNV(uint index, uint divisor)
		{
			Functions.glVertexAttribDivisorNVPtr(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribFormat(uint attribindex, int size, int type, bool normalized, uint relativeoffset)
		{
			Functions.glVertexAttribFormatPtr(attribindex, size, type, normalized, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribFormatNV(uint index, int size, int type, bool normalized, int stride)
		{
			Functions.glVertexAttribFormatNVPtr(index, size, type, normalized, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1i(uint index, int x)
		{
			Functions.glVertexAttribI1iPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1iEXT(uint index, int x)
		{
			Functions.glVertexAttribI1iEXTPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1iv(uint index, int* v)
		{
			Functions.glVertexAttribI1ivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1ivEXT(uint index, int* v)
		{
			Functions.glVertexAttribI1ivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1ui(uint index, uint x)
		{
			Functions.glVertexAttribI1uiPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1uiEXT(uint index, uint x)
		{
			Functions.glVertexAttribI1uiEXTPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1uiv(uint index, uint* v)
		{
			Functions.glVertexAttribI1uivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI1uivEXT(uint index, uint* v)
		{
			Functions.glVertexAttribI1uivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2i(uint index, int x, int y)
		{
			Functions.glVertexAttribI2iPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2iEXT(uint index, int x, int y)
		{
			Functions.glVertexAttribI2iEXTPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2iv(uint index, int* v)
		{
			Functions.glVertexAttribI2ivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2ivEXT(uint index, int* v)
		{
			Functions.glVertexAttribI2ivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2ui(uint index, uint x, uint y)
		{
			Functions.glVertexAttribI2uiPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2uiEXT(uint index, uint x, uint y)
		{
			Functions.glVertexAttribI2uiEXTPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2uiv(uint index, uint* v)
		{
			Functions.glVertexAttribI2uivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI2uivEXT(uint index, uint* v)
		{
			Functions.glVertexAttribI2uivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3i(uint index, int x, int y, int z)
		{
			Functions.glVertexAttribI3iPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3iEXT(uint index, int x, int y, int z)
		{
			Functions.glVertexAttribI3iEXTPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3iv(uint index, int* v)
		{
			Functions.glVertexAttribI3ivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3ivEXT(uint index, int* v)
		{
			Functions.glVertexAttribI3ivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3ui(uint index, uint x, uint y, uint z)
		{
			Functions.glVertexAttribI3uiPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z)
		{
			Functions.glVertexAttribI3uiEXTPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3uiv(uint index, uint* v)
		{
			Functions.glVertexAttribI3uivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI3uivEXT(uint index, uint* v)
		{
			Functions.glVertexAttribI3uivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4bv(uint index, sbyte* v)
		{
			Functions.glVertexAttribI4bvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4bvEXT(uint index, sbyte* v)
		{
			Functions.glVertexAttribI4bvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4i(uint index, int x, int y, int z, int w)
		{
			Functions.glVertexAttribI4iPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w)
		{
			Functions.glVertexAttribI4iEXTPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4iv(uint index, int* v)
		{
			Functions.glVertexAttribI4ivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4ivEXT(uint index, int* v)
		{
			Functions.glVertexAttribI4ivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4sv(uint index, short* v)
		{
			Functions.glVertexAttribI4svPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4svEXT(uint index, short* v)
		{
			Functions.glVertexAttribI4svEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4ubv(uint index, byte* v)
		{
			Functions.glVertexAttribI4ubvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4ubvEXT(uint index, byte* v)
		{
			Functions.glVertexAttribI4ubvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
		{
			Functions.glVertexAttribI4uiPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w)
		{
			Functions.glVertexAttribI4uiEXTPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4uiv(uint index, uint* v)
		{
			Functions.glVertexAttribI4uivPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4uivEXT(uint index, uint* v)
		{
			Functions.glVertexAttribI4uivEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4usv(uint index, ushort* v)
		{
			Functions.glVertexAttribI4usvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribI4usvEXT(uint index, ushort* v)
		{
			Functions.glVertexAttribI4usvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribIFormat(uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexAttribIFormatPtr(attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribIFormatNV(uint index, int size, int type, int stride)
		{
			Functions.glVertexAttribIFormatNVPtr(index, size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribIPointer(uint index, int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexAttribIPointerPtr(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribIPointerEXT(uint index, int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexAttribIPointerEXTPtr(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1d(uint index, double x)
		{
			Functions.glVertexAttribL1dPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1dEXT(uint index, double x)
		{
			Functions.glVertexAttribL1dEXTPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1dv(uint index, double* v)
		{
			Functions.glVertexAttribL1dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1dvEXT(uint index, double* v)
		{
			Functions.glVertexAttribL1dvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1i64NV(uint index, long x)
		{
			Functions.glVertexAttribL1i64NVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1i64vNV(uint index, long* v)
		{
			Functions.glVertexAttribL1i64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1ui64ARB(uint index, ulong x)
		{
			Functions.glVertexAttribL1ui64ARBPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1ui64NV(uint index, ulong x)
		{
			Functions.glVertexAttribL1ui64NVPtr(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1ui64vARB(uint index, ulong* v)
		{
			Functions.glVertexAttribL1ui64vARBPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL1ui64vNV(uint index, ulong* v)
		{
			Functions.glVertexAttribL1ui64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2d(uint index, double x, double y)
		{
			Functions.glVertexAttribL2dPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2dEXT(uint index, double x, double y)
		{
			Functions.glVertexAttribL2dEXTPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2dv(uint index, double* v)
		{
			Functions.glVertexAttribL2dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2dvEXT(uint index, double* v)
		{
			Functions.glVertexAttribL2dvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2i64NV(uint index, long x, long y)
		{
			Functions.glVertexAttribL2i64NVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2i64vNV(uint index, long* v)
		{
			Functions.glVertexAttribL2i64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2ui64NV(uint index, ulong x, ulong y)
		{
			Functions.glVertexAttribL2ui64NVPtr(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL2ui64vNV(uint index, ulong* v)
		{
			Functions.glVertexAttribL2ui64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3d(uint index, double x, double y, double z)
		{
			Functions.glVertexAttribL3dPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3dEXT(uint index, double x, double y, double z)
		{
			Functions.glVertexAttribL3dEXTPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3dv(uint index, double* v)
		{
			Functions.glVertexAttribL3dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3dvEXT(uint index, double* v)
		{
			Functions.glVertexAttribL3dvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3i64NV(uint index, long x, long y, long z)
		{
			Functions.glVertexAttribL3i64NVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3i64vNV(uint index, long* v)
		{
			Functions.glVertexAttribL3i64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z)
		{
			Functions.glVertexAttribL3ui64NVPtr(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL3ui64vNV(uint index, ulong* v)
		{
			Functions.glVertexAttribL3ui64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4d(uint index, double x, double y, double z, double w)
		{
			Functions.glVertexAttribL4dPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w)
		{
			Functions.glVertexAttribL4dEXTPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4dv(uint index, double* v)
		{
			Functions.glVertexAttribL4dvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4dvEXT(uint index, double* v)
		{
			Functions.glVertexAttribL4dvEXTPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w)
		{
			Functions.glVertexAttribL4i64NVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4i64vNV(uint index, long* v)
		{
			Functions.glVertexAttribL4i64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w)
		{
			Functions.glVertexAttribL4ui64NVPtr(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribL4ui64vNV(uint index, ulong* v)
		{
			Functions.glVertexAttribL4ui64vNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribLFormat(uint attribindex, int size, int type, uint relativeoffset)
		{
			Functions.glVertexAttribLFormatPtr(attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribLFormatNV(uint index, int size, int type, int stride)
		{
			Functions.glVertexAttribLFormatNVPtr(index, size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribLPointer(uint index, int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexAttribLPointerPtr(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribLPointerEXT(uint index, int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexAttribLPointerEXTPtr(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP1ui(uint index, int type, bool normalized, uint value)
		{
			Functions.glVertexAttribP1uiPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP1uiv(uint index, int type, bool normalized, uint* value)
		{
			Functions.glVertexAttribP1uivPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP2ui(uint index, int type, bool normalized, uint value)
		{
			Functions.glVertexAttribP2uiPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP2uiv(uint index, int type, bool normalized, uint* value)
		{
			Functions.glVertexAttribP2uivPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP3ui(uint index, int type, bool normalized, uint value)
		{
			Functions.glVertexAttribP3uiPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP3uiv(uint index, int type, bool normalized, uint* value)
		{
			Functions.glVertexAttribP3uivPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP4ui(uint index, int type, bool normalized, uint value)
		{
			Functions.glVertexAttribP4uiPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribP4uiv(uint index, int type, bool normalized, uint* value)
		{
			Functions.glVertexAttribP4uivPtr(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribParameteriAMD(uint index, int pname, int param)
		{
			Functions.glVertexAttribParameteriAMDPtr(index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, void* pointer)
		{
			Functions.glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, void* pointer)
		{
			Functions.glVertexAttribPointerARBPtr(index, size, type, normalized, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexAttribPointerNVPtr(index, fsize, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs1dvNV(uint index, int count, double* v)
		{
			Functions.glVertexAttribs1dvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs1fvNV(uint index, int count, float* v)
		{
			Functions.glVertexAttribs1fvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs1hvNV(uint index, int n, short* v)
		{
			Functions.glVertexAttribs1hvNVPtr(index, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs1svNV(uint index, int count, short* v)
		{
			Functions.glVertexAttribs1svNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs2dvNV(uint index, int count, double* v)
		{
			Functions.glVertexAttribs2dvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs2fvNV(uint index, int count, float* v)
		{
			Functions.glVertexAttribs2fvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs2hvNV(uint index, int n, short* v)
		{
			Functions.glVertexAttribs2hvNVPtr(index, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs2svNV(uint index, int count, short* v)
		{
			Functions.glVertexAttribs2svNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs3dvNV(uint index, int count, double* v)
		{
			Functions.glVertexAttribs3dvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs3fvNV(uint index, int count, float* v)
		{
			Functions.glVertexAttribs3fvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs3hvNV(uint index, int n, short* v)
		{
			Functions.glVertexAttribs3hvNVPtr(index, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs3svNV(uint index, int count, short* v)
		{
			Functions.glVertexAttribs3svNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs4dvNV(uint index, int count, double* v)
		{
			Functions.glVertexAttribs4dvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs4fvNV(uint index, int count, float* v)
		{
			Functions.glVertexAttribs4fvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs4hvNV(uint index, int n, short* v)
		{
			Functions.glVertexAttribs4hvNVPtr(index, n, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs4svNV(uint index, int count, short* v)
		{
			Functions.glVertexAttribs4svNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexAttribs4ubvNV(uint index, int count, byte* v)
		{
			Functions.glVertexAttribs4ubvNVPtr(index, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexBindingDivisor(uint bindingindex, uint divisor)
		{
			Functions.glVertexBindingDivisorPtr(bindingindex, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexBlendARB(int count)
		{
			Functions.glVertexBlendARBPtr(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexBlendEnvfATI(int pname, float param)
		{
			Functions.glVertexBlendEnvfATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexBlendEnviATI(int pname, int param)
		{
			Functions.glVertexBlendEnviATIPtr(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexFormatNV(int size, int type, int stride)
		{
			Functions.glVertexFormatNVPtr(size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP2ui(int type, uint value)
		{
			Functions.glVertexP2uiPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP2uiv(int type, uint* value)
		{
			Functions.glVertexP2uivPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP3ui(int type, uint value)
		{
			Functions.glVertexP3uiPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP3uiv(int type, uint* value)
		{
			Functions.glVertexP3uivPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP4ui(int type, uint value)
		{
			Functions.glVertexP4uiPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexP4uiv(int type, uint* value)
		{
			Functions.glVertexP4uivPtr(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexPointer(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexPointerPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
		{
			Functions.glVertexPointerEXTPtr(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride)
		{
			Functions.glVertexPointerListIBMPtr(size, type, stride, pointer, ptrstride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexPointervINTEL(int size, int type, IntPtr* pointer)
		{
			Functions.glVertexPointervINTELPtr(size, type, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1dATI(int stream, double x)
		{
			Functions.glVertexStream1dATIPtr(stream, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1dvATI(int stream, double* coords)
		{
			Functions.glVertexStream1dvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1fATI(int stream, float x)
		{
			Functions.glVertexStream1fATIPtr(stream, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1fvATI(int stream, float* coords)
		{
			Functions.glVertexStream1fvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1iATI(int stream, int x)
		{
			Functions.glVertexStream1iATIPtr(stream, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1ivATI(int stream, int* coords)
		{
			Functions.glVertexStream1ivATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1sATI(int stream, short x)
		{
			Functions.glVertexStream1sATIPtr(stream, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream1svATI(int stream, short* coords)
		{
			Functions.glVertexStream1svATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2dATI(int stream, double x, double y)
		{
			Functions.glVertexStream2dATIPtr(stream, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2dvATI(int stream, double* coords)
		{
			Functions.glVertexStream2dvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2fATI(int stream, float x, float y)
		{
			Functions.glVertexStream2fATIPtr(stream, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2fvATI(int stream, float* coords)
		{
			Functions.glVertexStream2fvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2iATI(int stream, int x, int y)
		{
			Functions.glVertexStream2iATIPtr(stream, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2ivATI(int stream, int* coords)
		{
			Functions.glVertexStream2ivATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2sATI(int stream, short x, short y)
		{
			Functions.glVertexStream2sATIPtr(stream, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream2svATI(int stream, short* coords)
		{
			Functions.glVertexStream2svATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3dATI(int stream, double x, double y, double z)
		{
			Functions.glVertexStream3dATIPtr(stream, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3dvATI(int stream, double* coords)
		{
			Functions.glVertexStream3dvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3fATI(int stream, float x, float y, float z)
		{
			Functions.glVertexStream3fATIPtr(stream, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3fvATI(int stream, float* coords)
		{
			Functions.glVertexStream3fvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3iATI(int stream, int x, int y, int z)
		{
			Functions.glVertexStream3iATIPtr(stream, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3ivATI(int stream, int* coords)
		{
			Functions.glVertexStream3ivATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3sATI(int stream, short x, short y, short z)
		{
			Functions.glVertexStream3sATIPtr(stream, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream3svATI(int stream, short* coords)
		{
			Functions.glVertexStream3svATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4dATI(int stream, double x, double y, double z, double w)
		{
			Functions.glVertexStream4dATIPtr(stream, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4dvATI(int stream, double* coords)
		{
			Functions.glVertexStream4dvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4fATI(int stream, float x, float y, float z, float w)
		{
			Functions.glVertexStream4fATIPtr(stream, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4fvATI(int stream, float* coords)
		{
			Functions.glVertexStream4fvATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4iATI(int stream, int x, int y, int z, int w)
		{
			Functions.glVertexStream4iATIPtr(stream, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4ivATI(int stream, int* coords)
		{
			Functions.glVertexStream4ivATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4sATI(int stream, short x, short y, short z, short w)
		{
			Functions.glVertexStream4sATIPtr(stream, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexStream4svATI(int stream, short* coords)
		{
			Functions.glVertexStream4svATIPtr(stream, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexWeightPointerEXT(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glVertexWeightPointerEXTPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexWeightfEXT(float weight)
		{
			Functions.glVertexWeightfEXTPtr(weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexWeightfvEXT(float* weight)
		{
			Functions.glVertexWeightfvEXTPtr(weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexWeighthNV(short weight)
		{
			Functions.glVertexWeighthNVPtr(weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVertexWeighthvNV(short* weight)
		{
			Functions.glVertexWeighthvNVPtr(weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time)
		{
			return Functions.glVideoCaptureNVPtr(video_capture_slot, sequence_num, capture_time);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double* _params)
		{
			Functions.glVideoCaptureStreamParameterdvNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float* _params)
		{
			Functions.glVideoCaptureStreamParameterfvNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int* _params)
		{
			Functions.glVideoCaptureStreamParameterivNVPtr(video_capture_slot, stream, pname, _params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewport(int x, int y, int width, int height)
		{
			Functions.glViewportPtr(x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportArrayv(uint first, int count, float* v)
		{
			Functions.glViewportArrayvPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportArrayvNV(uint first, int count, float* v)
		{
			Functions.glViewportArrayvNVPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportArrayvOES(uint first, int count, float* v)
		{
			Functions.glViewportArrayvOESPtr(first, count, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedf(uint index, float x, float y, float w, float h)
		{
			Functions.glViewportIndexedfPtr(index, x, y, w, h);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedfOES(uint index, float x, float y, float w, float h)
		{
			Functions.glViewportIndexedfOESPtr(index, x, y, w, h);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedfNV(uint index, float x, float y, float w, float h)
		{
			Functions.glViewportIndexedfNVPtr(index, x, y, w, h);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedfv(uint index, float* v)
		{
			Functions.glViewportIndexedfvPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedfvOES(uint index, float* v)
		{
			Functions.glViewportIndexedfvOESPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportIndexedfvNV(uint index, float* v)
		{
			Functions.glViewportIndexedfvNVPtr(index, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff)
		{
			Functions.glViewportPositionWScaleNVPtr(index, xcoeff, ycoeff);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew)
		{
			Functions.glViewportSwizzleNVPtr(index, swizzlex, swizzley, swizzlez, swizzlew);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts)
		{
			Functions.glWaitSemaphoreEXTPtr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWaitSync(IntPtr sync, uint flags, ulong timeout)
		{
			Functions.glWaitSyncPtr(sync, flags, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout)
		{
			Functions.glWaitSyncAPPLEPtr(sync, flags, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights)
		{
			Functions.glWeightPathsNVPtr(resultPath, numPaths, paths, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightPointerARB(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glWeightPointerARBPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightPointerOES(int size, int type, int stride, IntPtr pointer)
		{
			Functions.glWeightPointerOESPtr(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightbvARB(int size, sbyte* weights)
		{
			Functions.glWeightbvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightdvARB(int size, double* weights)
		{
			Functions.glWeightdvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightfvARB(int size, float* weights)
		{
			Functions.glWeightfvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightivARB(int size, int* weights)
		{
			Functions.glWeightivARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightsvARB(int size, short* weights)
		{
			Functions.glWeightsvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightubvARB(int size, byte* weights)
		{
			Functions.glWeightubvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightuivARB(int size, uint* weights)
		{
			Functions.glWeightuivARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWeightusvARB(int size, ushort* weights)
		{
			Functions.glWeightusvARBPtr(size, weights);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2d(double x, double y)
		{
			Functions.glWindowPos2dPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2dARB(double x, double y)
		{
			Functions.glWindowPos2dARBPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2dMESA(double x, double y)
		{
			Functions.glWindowPos2dMESAPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2dv(double* v)
		{
			Functions.glWindowPos2dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2dvARB(double* v)
		{
			Functions.glWindowPos2dvARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2dvMESA(double* v)
		{
			Functions.glWindowPos2dvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2f(float x, float y)
		{
			Functions.glWindowPos2fPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2fARB(float x, float y)
		{
			Functions.glWindowPos2fARBPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2fMESA(float x, float y)
		{
			Functions.glWindowPos2fMESAPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2fv(float* v)
		{
			Functions.glWindowPos2fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2fvARB(float* v)
		{
			Functions.glWindowPos2fvARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2fvMESA(float* v)
		{
			Functions.glWindowPos2fvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2i(int x, int y)
		{
			Functions.glWindowPos2iPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2iARB(int x, int y)
		{
			Functions.glWindowPos2iARBPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2iMESA(int x, int y)
		{
			Functions.glWindowPos2iMESAPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2iv(int* v)
		{
			Functions.glWindowPos2ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2ivARB(int* v)
		{
			Functions.glWindowPos2ivARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2ivMESA(int* v)
		{
			Functions.glWindowPos2ivMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2s(short x, short y)
		{
			Functions.glWindowPos2sPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2sARB(short x, short y)
		{
			Functions.glWindowPos2sARBPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2sMESA(short x, short y)
		{
			Functions.glWindowPos2sMESAPtr(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2sv(short* v)
		{
			Functions.glWindowPos2svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2svARB(short* v)
		{
			Functions.glWindowPos2svARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos2svMESA(short* v)
		{
			Functions.glWindowPos2svMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3d(double x, double y, double z)
		{
			Functions.glWindowPos3dPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3dARB(double x, double y, double z)
		{
			Functions.glWindowPos3dARBPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3dMESA(double x, double y, double z)
		{
			Functions.glWindowPos3dMESAPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3dv(double* v)
		{
			Functions.glWindowPos3dvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3dvARB(double* v)
		{
			Functions.glWindowPos3dvARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3dvMESA(double* v)
		{
			Functions.glWindowPos3dvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3f(float x, float y, float z)
		{
			Functions.glWindowPos3fPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3fARB(float x, float y, float z)
		{
			Functions.glWindowPos3fARBPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3fMESA(float x, float y, float z)
		{
			Functions.glWindowPos3fMESAPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3fv(float* v)
		{
			Functions.glWindowPos3fvPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3fvARB(float* v)
		{
			Functions.glWindowPos3fvARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3fvMESA(float* v)
		{
			Functions.glWindowPos3fvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3i(int x, int y, int z)
		{
			Functions.glWindowPos3iPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3iARB(int x, int y, int z)
		{
			Functions.glWindowPos3iARBPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3iMESA(int x, int y, int z)
		{
			Functions.glWindowPos3iMESAPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3iv(int* v)
		{
			Functions.glWindowPos3ivPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3ivARB(int* v)
		{
			Functions.glWindowPos3ivARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3ivMESA(int* v)
		{
			Functions.glWindowPos3ivMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3s(short x, short y, short z)
		{
			Functions.glWindowPos3sPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3sARB(short x, short y, short z)
		{
			Functions.glWindowPos3sARBPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3sMESA(short x, short y, short z)
		{
			Functions.glWindowPos3sMESAPtr(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3sv(short* v)
		{
			Functions.glWindowPos3svPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3svARB(short* v)
		{
			Functions.glWindowPos3svARBPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos3svMESA(short* v)
		{
			Functions.glWindowPos3svMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4dMESA(double x, double y, double z, double w)
		{
			Functions.glWindowPos4dMESAPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4dvMESA(double* v)
		{
			Functions.glWindowPos4dvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4fMESA(float x, float y, float z, float w)
		{
			Functions.glWindowPos4fMESAPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4fvMESA(float* v)
		{
			Functions.glWindowPos4fvMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4iMESA(int x, int y, int z, int w)
		{
			Functions.glWindowPos4iMESAPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4ivMESA(int* v)
		{
			Functions.glWindowPos4ivMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4sMESA(short x, short y, short z, short w)
		{
			Functions.glWindowPos4sMESAPtr(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowPos4svMESA(short* v)
		{
			Functions.glWindowPos4svMESAPtr(v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWindowRectanglesEXT(int mode, int count, int* box)
		{
			Functions.glWindowRectanglesEXTPtr(mode, count, box);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWriteMaskEXT(uint res, uint _in, int outX, int outY, int outZ, int outW)
		{
			Functions.glWriteMaskEXTPtr(res, _in, outX, outY, outZ, outW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			Functions.glDrawVkImageNVPtr(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static IntPtr glGetVkProcAddrNV(byte* name)
		{
			return Functions.glGetVkProcAddrNVPtr(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glWaitVkSemaphoreNV(ulong vkSemaphore)
		{
			Functions.glWaitVkSemaphoreNVPtr(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSignalVkSemaphoreNV(ulong vkSemaphore)
		{
			Functions.glSignalVkSemaphoreNVPtr(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void glSignalVkFenceNV(ulong vkFence)
		{
			Functions.glSignalVkFenceNVPtr(vkFence);
		}
	}
}